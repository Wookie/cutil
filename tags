!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
1	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/bitset.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/btree.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/buffer.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/child.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/events.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/list.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/pair.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/privileges.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/sanitize.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/socket.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
101	coverage/cutil/src/bitset.c.gcov.html	/^<a name="101"><span class="lineNum">     101 <\/span>                :            : }<\/a>$/;"	a
102	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="102"><span class="lineNum">     102 <\/span>                :            : <\/a>$/;"	a
105	coverage/cutil/src/events.c.gcov.html	/^<a name="105"><span class="lineNum">     105 <\/span>                :<span class="lineCov">        141 : }<\/span><\/a>$/;"	a
1054	coverage/cutil/src/btree.c.gcov.html	/^<a name="1054"><span class="lineNum">    1054 <\/span>                :            : }<\/a>$/;"	a
1070	coverage/cutil/src/btree.c.gcov.html	/^<a name="1070"><span class="lineNum">    1070 <\/span>                :            : }<\/a>$/;"	a
108	coverage/cutil/src/bitset.c.gcov.html	/^<a name="108"><span class="lineNum">     108 <\/span>                :            : }<\/a>$/;"	a
1081	coverage/cutil/src/btree.c.gcov.html	/^<a name="1081"><span class="lineNum">    1081 <\/span>                :            : static const bt_itr_t itr_end = NULL;<\/a>$/;"	a
1089	coverage/cutil/src/btree.c.gcov.html	/^<a name="1089"><span class="lineNum">    1089 <\/span>                :            : <\/a>$/;"	a
109	coverage/cutil/src/sanitize.c.gcov.html	/^<a name="109"><span class="lineNum">     109 <\/span>                :            : };<\/a>$/;"	a
1100	coverage/cutil/src/btree.c.gcov.html	/^<a name="1100"><span class="lineNum">    1100 <\/span>                :            : <\/a>$/;"	a
1106	coverage/cutil/src/btree.c.gcov.html	/^<a name="1106"><span class="lineNum">    1106 <\/span>                :            : <\/a>$/;"	a
111	coverage/cutil/src/buffer.c.gcov.html	/^<a name="111"><span class="lineNum">     111 <\/span>                :            : }<\/a>$/;"	a
1114	coverage/cutil/src/btree.c.gcov.html	/^<a name="1114"><span class="lineNum">    1114 <\/span>                :            : <\/a>$/;"	a
1125	coverage/cutil/src/btree.c.gcov.html	/^<a name="1125"><span class="lineNum">    1125 <\/span>                :            : <\/a>$/;"	a
1131	coverage/cutil/src/btree.c.gcov.html	/^<a name="1131"><span class="lineNum">    1131 <\/span>                :            : <\/a>$/;"	a
114	coverage/cutil/src/socket.c.gcov.html	/^<a name="114"><span class="lineNum">     114 <\/span>                :            : }<\/a>$/;"	a
1140	coverage/cutil/src/btree.c.gcov.html	/^<a name="1140"><span class="lineNum">    1140 <\/span>                :            : }<\/a>$/;"	a
118	coverage/cutil/src/btree.c.gcov.html	/^<a name="118"><span class="lineNum">     118 <\/span>                :            : #endif<\/a>$/;"	a
121	coverage/cutil/src/bitset.c.gcov.html	/^<a name="121"><span class="lineNum">     121 <\/span>                :            : }<\/a>$/;"	a
121	coverage/cutil/src/child.c.gcov.html	/^<a name="121"><span class="lineNum">     121 <\/span>                :            : <\/a>$/;"	a
125	coverage/cutil/src/list.c.gcov.html	/^<a name="125"><span class="lineNum">     125 <\/span>                :            : }<\/a>$/;"	a
126	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="126"><span class="lineNum">     126 <\/span>                :            : <\/a>$/;"	a
128	coverage/cutil/src/events.c.gcov.html	/^<a name="128"><span class="lineNum">     128 <\/span>                :            : }<\/a>$/;"	a
131	coverage/cutil/src/list.c.gcov.html	/^<a name="131"><span class="lineNum">     131 <\/span>                :            : }<\/a>$/;"	a
133	coverage/cutil/src/child.c.gcov.html	/^<a name="133"><span class="lineNum">     133 <\/span>                :            : <\/a>$/;"	a
137	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="137"><span class="lineNum">     137 <\/span>                :            : <\/a>$/;"	a
142	coverage/cutil/src/socket.c.gcov.html	/^<a name="142"><span class="lineNum">     142 <\/span>                :            : }<\/a>$/;"	a
143	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="143"><span class="lineNum">     143 <\/span>                :            : }<\/a>$/;"	a
143	coverage/cutil/src/list.c.gcov.html	/^<a name="143"><span class="lineNum">     143 <\/span>                :            : }<\/a>$/;"	a
146	coverage/cutil/src/events.c.gcov.html	/^<a name="146"><span class="lineNum">     146 <\/span>                :            : }<\/a>$/;"	a
149	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="149"><span class="lineNum">     149 <\/span>                :            : }<\/a>$/;"	a
150	coverage/cutil/src/btree.c.gcov.html	/^<a name="150"><span class="lineNum">     150 <\/span>                :            : }<\/a>$/;"	a
156	coverage/cutil/src/child.c.gcov.html	/^<a name="156"><span class="lineNum">     156 <\/span>                :            : <\/a>$/;"	a
157	coverage/cutil/src/events.c.gcov.html	/^<a name="157"><span class="lineNum">     157 <\/span>                :            : <\/a>$/;"	a
158	coverage/cutil/src/list.c.gcov.html	/^<a name="158"><span class="lineNum">     158 <\/span>                :            : }<\/a>$/;"	a
160	coverage/cutil/src/btree.c.gcov.html	/^<a name="160"><span class="lineNum">     160 <\/span>                :            : }<\/a>$/;"	a
165	coverage/cutil/src/list.c.gcov.html	/^<a name="165"><span class="lineNum">     165 <\/span>                :            : }<\/a>$/;"	a
170	coverage/cutil/src/list.c.gcov.html	/^<a name="170"><span class="lineNum">     170 <\/span>                :            : }<\/a>$/;"	a
172	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="172"><span class="lineNum">     172 <\/span>                :            : }<\/a>$/;"	a
174	coverage/cutil/src/socket.c.gcov.html	/^<a name="174"><span class="lineNum">     174 <\/span>                :            : <\/a>$/;"	a
175	coverage/cutil/src/btree.c.gcov.html	/^<a name="175"><span class="lineNum">     175 <\/span>                :            : <\/a>$/;"	a
179	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="179"><span class="lineNum">     179 <\/span>                :            : <\/a>$/;"	a
179	coverage/cutil/src/list.c.gcov.html	/^<a name="179"><span class="lineNum">     179 <\/span>                :            : }<\/a>$/;"	a
188	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="188"><span class="lineNum">     188 <\/span>                :            : }<\/a>$/;"	a
191	coverage/cutil/src/list.c.gcov.html	/^<a name="191"><span class="lineNum">     191 <\/span>                :            : }<\/a>$/;"	a
196	coverage/cutil/src/child.c.gcov.html	/^<a name="196"><span class="lineNum">     196 <\/span>                :            : }<\/a>$/;"	a
201	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="201"><span class="lineNum">     201 <\/span>                :            : }<\/a>$/;"	a
203	coverage/cutil/src/list.c.gcov.html	/^<a name="203"><span class="lineNum">     203 <\/span>                :            : }<\/a>$/;"	a
209	coverage/cutil/src/events.c.gcov.html	/^<a name="209"><span class="lineNum">     209 <\/span>                :            : <\/a>$/;"	a
210	coverage/cutil/src/socket.c.gcov.html	/^<a name="210"><span class="lineNum">     210 <\/span>                :            : }<\/a>$/;"	a
211	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="211"><span class="lineNum">     211 <\/span>                :            : }<\/a>$/;"	a
212	coverage/cutil/src/child.c.gcov.html	/^<a name="212"><span class="lineNum">     212 <\/span>                :            : #define PIPE_WRITE_FD 1<\/a>$/;"	a
214	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="214"><span class="lineNum">     214 <\/span>                :            : }<\/a>$/;"	a
223	coverage/cutil/src/btree.c.gcov.html	/^<a name="223"><span class="lineNum">     223 <\/span>                :            : \/* NOTE: If NULL is passed in for the bt_key_cmp_fn function, the default<\/a>$/;"	a
227	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="227"><span class="lineNum">     227 <\/span>                :            : }<\/a>$/;"	a
229	coverage/cutil/src/events.c.gcov.html	/^<a name="229"><span class="lineNum">     229 <\/span>                :            : }<\/a>$/;"	a
229	coverage/cutil/src/list.c.gcov.html	/^<a name="229"><span class="lineNum">     229 <\/span>                :            : }<\/a>$/;"	a
238	coverage/cutil/src/events.c.gcov.html	/^<a name="238"><span class="lineNum">     238 <\/span>                :<span class="lineCov">       1325 : }<\/span><\/a>$/;"	a
240	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="240"><span class="lineNum">     240 <\/span>                :            : \/********** PRIVATE **********\/<\/a>$/;"	a
246	coverage/cutil/src/btree.c.gcov.html	/^<a name="246"><span class="lineNum">     246 <\/span>                :            : <\/a>$/;"	a
246	coverage/cutil/src/socket.c.gcov.html	/^<a name="246"><span class="lineNum">     246 <\/span>                :            : }<\/a>$/;"	a
249	coverage/cutil/src/events.c.gcov.html	/^<a name="249"><span class="lineNum">     249 <\/span>                :            : };<\/a>$/;"	a
25	coverage/cutil/src/pair.c.gcov.html	/^<a name="25"><span class="lineNum">      25 <\/span>                :            : };<\/a>$/;"	a
251	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="251"><span class="lineNum">     251 <\/span>                :            : }<\/a>$/;"	a
268	coverage/cutil/src/list.c.gcov.html	/^<a name="268"><span class="lineNum">     268 <\/span>                :            : }<\/a>$/;"	a
279	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="279"><span class="lineNum">     279 <\/span>                :            : }<\/a>$/;"	a
28	coverage/cutil/src/bitset.c.gcov.html	/^<a name="28"><span class="lineNum">      28 <\/span>                :            : #define BIT(x) ((uint32_t)(1 &lt;&lt; (x &amp; 0x1f)))<\/a>$/;"	a
28	coverage/cutil/src/events.c.gcov.html	/^<a name="28"><span class="lineNum">      28 <\/span>                :            : <\/a>$/;"	a
284	coverage/cutil/src/list.c.gcov.html	/^<a name="284"><span class="lineNum">     284 <\/span>                :            : \/* removes the item at index &quot;itr&quot; and returns the iterator of the<\/a>$/;"	a
284	coverage/cutil/src/socket.c.gcov.html	/^<a name="284"><span class="lineNum">     284 <\/span>                :            : <\/a>$/;"	a
286	coverage/cutil/src/events.c.gcov.html	/^<a name="286"><span class="lineNum">     286 <\/span>                :            : }<\/a>$/;"	a
288	coverage/cutil/src/btree.c.gcov.html	/^<a name="288"><span class="lineNum">     288 <\/span>                :            : <\/a>$/;"	a
291	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="291"><span class="lineNum">     291 <\/span>                :<span class="lineCov">        534 : }<\/span><\/a>$/;"	a
302	coverage/cutil/src/btree.c.gcov.html	/^<a name="302"><span class="lineNum">     302 <\/span>                :            : <\/a>$/;"	a
307	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="307"><span class="lineNum">     307 <\/span>                :            : }<\/a>$/;"	a
307	coverage/cutil/src/list.c.gcov.html	/^<a name="307"><span class="lineNum">     307 <\/span>                :            : <\/a>$/;"	a
309	coverage/cutil/src/btree.c.gcov.html	/^<a name="309"><span class="lineNum">     309 <\/span>                :            : }<\/a>$/;"	a
313	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="313"><span class="lineNum">     313 <\/span>                :            : #include &lt;CUnit\/Basic.h&gt;<\/a>$/;"	a
320	coverage/cutil/src/btree.c.gcov.html	/^<a name="320"><span class="lineNum">     320 <\/span>                :            : }<\/a>$/;"	a
321	coverage/cutil/src/events.c.gcov.html	/^<a name="321"><span class="lineNum">     321 <\/span>                :            : <\/a>$/;"	a
328	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="328"><span class="lineNum">     328 <\/span>                :            : }<\/a>$/;"	a
33	coverage/cutil/src/privileges.c.gcov.html	/^<a name="33"><span class="lineNum">      33 <\/span>                :            : static gid_t orig_groups[NGROUPS_MAX];<\/a>$/;"	a
331	coverage/cutil/src/events.c.gcov.html	/^<a name="331"><span class="lineNum">     331 <\/span>                :            : }<\/a>$/;"	a
331	coverage/cutil/src/list.c.gcov.html	/^<a name="331"><span class="lineNum">     331 <\/span>                :            : }<\/a>$/;"	a
337	coverage/cutil/src/child.c.gcov.html	/^<a name="337"><span class="lineNum">     337 <\/span>                :            : }<\/a>$/;"	a
34	coverage/cutil/src/buffer.c.gcov.html	/^<a name="34"><span class="lineNum">      34 <\/span>                :            :  *\/<\/a>$/;"	a
35	coverage/cutil/src/pair.c.gcov.html	/^<a name="35"><span class="lineNum">      35 <\/span>                :            : }<\/a>$/;"	a
361	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="361"><span class="lineNum">     361 <\/span>                :            : <\/a>$/;"	a
364	coverage/cutil/src/child.c.gcov.html	/^<a name="364"><span class="lineNum">     364 <\/span>                :            : }<\/a>$/;"	a
38	coverage/cutil/src/sanitize.c.gcov.html	/^<a name="38"><span class="lineNum">      38 <\/span>                :            : #endif<\/a>$/;"	a
381	coverage/cutil/src/socket.c.gcov.html	/^<a name="381"><span class="lineNum">     381 <\/span>                :            : <\/a>$/;"	a
387	coverage/cutil/src/child.c.gcov.html	/^<a name="387"><span class="lineNum">     387 <\/span>                :            : }<\/a>$/;"	a
388	coverage/cutil/src/btree.c.gcov.html	/^<a name="388"><span class="lineNum">     388 <\/span>                :            : }<\/a>$/;"	a
398	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="398"><span class="lineNum">     398 <\/span>                :            : }<\/a>$/;"	a
398	coverage/cutil/src/child.c.gcov.html	/^<a name="398"><span class="lineNum">     398 <\/span>                :            : }<\/a>$/;"	a
399	coverage/cutil/src/socket.c.gcov.html	/^<a name="399"><span class="lineNum">     399 <\/span>                :            : <\/a>$/;"	a
404	coverage/cutil/src/child.c.gcov.html	/^<a name="404"><span class="lineNum">     404 <\/span>                :            : }<\/a>$/;"	a
407	coverage/cutil/src/list.c.gcov.html	/^<a name="407"><span class="lineNum">     407 <\/span>                :            : #include &lt;CUnit\/Basic.h&gt;<\/a>$/;"	a
408	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="408"><span class="lineNum">     408 <\/span>                :            : }<\/a>$/;"	a
414	coverage/cutil/src/child.c.gcov.html	/^<a name="414"><span class="lineNum">     414 <\/span>                :            : }<\/a>$/;"	a
422	coverage/cutil/src/child.c.gcov.html	/^<a name="422"><span class="lineNum">     422 <\/span>                :            : }<\/a>$/;"	a
428	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="428"><span class="lineNum">     428 <\/span>                :            : }<\/a>$/;"	a
43	coverage/cutil/src/pair.c.gcov.html	/^<a name="43"><span class="lineNum">      43 <\/span>                :            : }<\/a>$/;"	a
430	coverage/cutil/src/child.c.gcov.html	/^<a name="430"><span class="lineNum">     430 <\/span>                :            : }<\/a>$/;"	a
437	coverage/cutil/src/child.c.gcov.html	/^<a name="437"><span class="lineNum">     437 <\/span>                :            : <\/a>$/;"	a
438	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="438"><span class="lineNum">     438 <\/span>                :            : }<\/a>$/;"	a
441	coverage/cutil/src/child.c.gcov.html	/^<a name="441"><span class="lineNum">     441 <\/span>                :<span class="lineCov">        256 :     fail_fork = fail;<\/span><\/a>$/;"	a
441	coverage/cutil/src/socket.c.gcov.html	/^<a name="441"><span class="lineNum">     441 <\/span>                :            : }<\/a>$/;"	a
447	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="447"><span class="lineNum">     447 <\/span>                :            : }<\/a>$/;"	a
45	coverage/cutil/src/bitset.c.gcov.html	/^<a name="45"><span class="lineNum">      45 <\/span>                :            : }<\/a>$/;"	a
457	coverage/cutil/src/btree.c.gcov.html	/^<a name="457"><span class="lineNum">     457 <\/span>                :            : }<\/a>$/;"	a
49	coverage/cutil/src/pair.c.gcov.html	/^<a name="49"><span class="lineNum">      49 <\/span>                :            : }<\/a>$/;"	a
50	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="50"><span class="lineNum">      50 <\/span>                :            : <\/a>$/;"	a
51	coverage/cutil/src/buffer.c.gcov.html	/^<a name="51"><span class="lineNum">      51 <\/span>                :            : }<\/a>$/;"	a
53	coverage/cutil/src/bitset.c.gcov.html	/^<a name="53"><span class="lineNum">      53 <\/span>                :            : }<\/a>$/;"	a
53	coverage/cutil/src/events.c.gcov.html	/^<a name="53"><span class="lineNum">      53 <\/span>                :            : <\/a>$/;"	a
541	coverage/cutil/src/socket.c.gcov.html	/^<a name="541"><span class="lineNum">     541 <\/span>                :            : }<\/a>$/;"	a
55	coverage/cutil/src/child.c.gcov.html	/^<a name="55"><span class="lineNum">      55 <\/span>                :            : };<\/a>$/;"	a
55	coverage/cutil/src/list.c.gcov.html	/^<a name="55"><span class="lineNum">      55 <\/span>                :            : \/********** PUBLIC **********\/<\/a>$/;"	a
563	coverage/cutil/src/socket.c.gcov.html	/^<a name="563"><span class="lineNum">     563 <\/span>                :            : }<\/a>$/;"	a
571	coverage/cutil/src/btree.c.gcov.html	/^<a name="571"><span class="lineNum">     571 <\/span>                :            : }<\/a>$/;"	a
574	coverage/cutil/src/socket.c.gcov.html	/^<a name="574"><span class="lineNum">     574 <\/span>                :<span class="lineCov">        148 : }<\/span><\/a>$/;"	a
58	coverage/cutil/src/sanitize.c.gcov.html	/^<a name="58"><span class="lineNum">      58 <\/span>                :            : }<\/a>$/;"	a
585	coverage/cutil/src/socket.c.gcov.html	/^<a name="585"><span class="lineNum">     585 <\/span>                :            : <\/a>$/;"	a
59	coverage/cutil/src/buffer.c.gcov.html	/^<a name="59"><span class="lineNum">      59 <\/span>                :            : }<\/a>$/;"	a
596	coverage/cutil/src/socket.c.gcov.html	/^<a name="596"><span class="lineNum">     596 <\/span>                :            : }<\/a>$/;"	a
651	coverage/cutil/src/socket.c.gcov.html	/^<a name="651"><span class="lineNum">     651 <\/span>                :            : <\/a>$/;"	a
661	coverage/cutil/src/socket.c.gcov.html	/^<a name="661"><span class="lineNum">     661 <\/span>                :            : }<\/a>$/;"	a
67	coverage/cutil/src/list.c.gcov.html	/^<a name="67"><span class="lineNum">      67 <\/span>                :            : }<\/a>$/;"	a
68	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="68"><span class="lineNum">      68 <\/span>                :            : <\/a>$/;"	a
686	coverage/cutil/src/btree.c.gcov.html	/^<a name="686"><span class="lineNum">     686 <\/span>                :            : <\/a>$/;"	a
70	coverage/cutil/src/bitset.c.gcov.html	/^<a name="70"><span class="lineNum">      70 <\/span>                :            : }<\/a>$/;"	a
71	coverage/cutil/src/btree.c.gcov.html	/^<a name="71"><span class="lineNum">      71 <\/span>                :            : <\/a>$/;"	a
719	coverage/cutil/src/socket.c.gcov.html	/^<a name="719"><span class="lineNum">     719 <\/span>                :            : }<\/a>$/;"	a
739	coverage/cutil/src/socket.c.gcov.html	/^<a name="739"><span class="lineNum">     739 <\/span>                :            : }<\/a>$/;"	a
74	coverage/cutil/src/list.c.gcov.html	/^<a name="74"><span class="lineNum">      74 <\/span>                :            : }<\/a>$/;"	a
768	coverage/cutil/src/btree.c.gcov.html	/^<a name="768"><span class="lineNum">     768 <\/span>                :            : <\/a>$/;"	a
80	coverage/cutil/src/events.c.gcov.html	/^<a name="80"><span class="lineNum">      80 <\/span>                :            : <\/a>$/;"	a
83	coverage/cutil/src/child.c.gcov.html	/^<a name="83"><span class="lineNum">      83 <\/span>                :            : <\/a>$/;"	a
845	coverage/cutil/src/btree.c.gcov.html	/^<a name="845"><span class="lineNum">     845 <\/span>                :            : \/* NOTE: if the number of values stored in the table will exceed a load <\/a>$/;"	a
85	coverage/cutil/src/bitset.c.gcov.html	/^<a name="85"><span class="lineNum">      85 <\/span>                :            : }<\/a>$/;"	a
866	coverage/cutil/src/btree.c.gcov.html	/^<a name="866"><span class="lineNum">     866 <\/span>                :            : <\/a>$/;"	a
882	coverage/cutil/src/socket.c.gcov.html	/^<a name="882"><span class="lineNum">     882 <\/span>                :            : }<\/a>$/;"	a
89	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="89"><span class="lineNum">      89 <\/span>                :            : <\/a>$/;"	a
89	coverage/cutil/src/privileges.c.gcov.html	/^<a name="89"><span class="lineNum">      89 <\/span>                :<span class="lineCov">        259 : }<\/span><\/a>$/;"	a
892	coverage/cutil/src/btree.c.gcov.html	/^<a name="892"><span class="lineNum">     892 <\/span>                :            : }<\/a>$/;"	a
904	coverage/cutil/src/btree.c.gcov.html	/^<a name="904"><span class="lineNum">     904 <\/span>                :            : }<\/a>$/;"	a
910	coverage/cutil/src/socket.c.gcov.html	/^<a name="910"><span class="lineNum">     910 <\/span>                :            : }<\/a>$/;"	a
916	coverage/cutil/src/socket.c.gcov.html	/^<a name="916"><span class="lineNum">     916 <\/span>                :            : }<\/a>$/;"	a
917	coverage/cutil/src/btree.c.gcov.html	/^<a name="917"><span class="lineNum">     917 <\/span>                :            : <\/a>$/;"	a
927	coverage/cutil/src/socket.c.gcov.html	/^<a name="927"><span class="lineNum">     927 <\/span>                :            : }<\/a>$/;"	a
93	coverage/cutil/src/bitset.c.gcov.html	/^<a name="93"><span class="lineNum">      93 <\/span>                :            : }<\/a>$/;"	a
930	coverage/cutil/src/btree.c.gcov.html	/^<a name="930"><span class="lineNum">     930 <\/span>                :            : }<\/a>$/;"	a
935	coverage/cutil/src/socket.c.gcov.html	/^<a name="935"><span class="lineNum">     935 <\/span>                :            : }<\/a>$/;"	a
944	coverage/cutil/src/socket.c.gcov.html	/^<a name="944"><span class="lineNum">     944 <\/span>                :            : <\/a>$/;"	a
957	coverage/cutil/src/socket.c.gcov.html	/^<a name="957"><span class="lineNum">     957 <\/span>                :            : socket_ret_t test_connect_fn_ret = SOCKET_OK;<\/a>$/;"	a
96	coverage/cutil/src/list.c.gcov.html	/^<a name="96"><span class="lineNum">      96 <\/span>                :            : }<\/a>$/;"	a
963	coverage/cutil/src/socket.c.gcov.html	/^<a name="963"><span class="lineNum">     963 <\/span>                :            : }<\/a>$/;"	a
969	coverage/cutil/src/socket.c.gcov.html	/^<a name="969"><span class="lineNum">     969 <\/span>                :            : }<\/a>$/;"	a
97	coverage/cutil/src/socket.c.gcov.html	/^<a name="97"><span class="lineNum">      97 <\/span>                :            : };<\/a>$/;"	a
99	coverage/cutil/src/buffer.c.gcov.html	/^<a name="99"><span class="lineNum">      99 <\/span>                :            : }<\/a>$/;"	a
991	coverage/cutil/src/btree.c.gcov.html	/^<a name="991"><span class="lineNum">     991 <\/span>                :            : <\/a>$/;"	a
ACCEPT	src/macros.h	106;"	d
ACCEPT	src/macros.h	71;"	d
ADD_SUITE	tests/test_macros.h	21;"	d
ADD_TEST	tests/test_macros.h	22;"	d
ARRAY_SIZE	src/macros.h	37;"	d
ASSERT	src/macros.h	40;"	d
BIND	src/macros.h	107;"	d
BIND	src/macros.h	75;"	d
BIT	src/bitset.c	28;"	d	file:
BUILDDIRS	Makefile	/^BUILDDIRS = $(DIRS:%=build-%)$/;"	m
C	src/macros.h	120;"	d
CALLOC	src/macros.h	104;"	d
CALLOC	src/macros.h	66;"	d
CFLAGS	src/Makefile	/^CFLAGS=-O3 -I$(EXTRA_LIBS_ROOT)\/include$/;"	m
CFLAGS	src/Makefile	/^coverage: CFLAGS=-fprofile-arcs -ftest-coverage -O0 -gstabs+ -DUNIT_TESTING -I$(EXTRA_LIBS_ROOT)\/include$/;"	m
CFLAGS	src/Makefile	/^test: CFLAGS=-O0 -gstabs+ -DUNIT_TESTING -I$(EXTRA_LIBS_ROOT)\/include$/;"	m
CFLAGS	tests/Makefile	/^CFLAGS=-O0 -gstabs+ -DUNIT_TESTING -I$(CUTIL_ROOT)\/include -I$(EXTRA_LIBS_ROOT)\/include$/;"	m
CHECK	src/macros.h	47;"	d
CHECK_MSG	src/macros.h	48;"	d
CHECK_PTR	src/macros.h	51;"	d
CHECK_PTR_MSG	src/macros.h	52;"	d
CHECK_PTR_RET	src/macros.h	53;"	d
CHECK_PTR_RET_MSG	src/macros.h	54;"	d
CHECK_RET	src/macros.h	49;"	d
CHECK_RET_MSG	src/macros.h	50;"	d
CLEANDIRS	Makefile	/^CLEANDIRS = $(DIRS:%=clean-%)$/;"	m
CONNECT	src/macros.h	108;"	d
CONNECT	src/macros.h	79;"	d
COVERAGE	Makefile	/^COVERAGE?=.\/coverage$/;"	m
COVERAGE	src/Makefile	/^COVERAGE?=..\/coverage$/;"	m
CUTIL_ROOT	tests/Makefile	/^CUTIL_ROOT=..\/src$/;"	m
DEBUG	src/debug.h	17;"	d
DEBUG	src/debug.h	20;"	d
DEBUG	src/debug.h	22;"	d
DEBUG_ON	src/debug.h	25;"	d
DEFAULT_INITIAL_CAPACITY	src/btree.c	31;"	d	file:
DIRS	Makefile	/^DIRS = src tests$/;"	m
DWORDS_NEEDED	src/bitset.c	26;"	d	file:
DWORD_INDEX	src/bitset.c	27;"	d	file:
EMPTY_ENV	src/child.h	24;"	d
ERRNO	src/macros.h	113;"	d
ERRNO	src/macros.h	83;"	d
EVT_BAD_PTR	src/events.h	/^	EVT_BAD_PTR = -1,$/;"	e	enum:evt_ret_e
EVT_CHILD	src/events.h	/^	EVT_CHILD,$/;"	e	enum:evt_type_e
EVT_ERROR	src/events.h	/^	EVT_ERROR = -2$/;"	e	enum:evt_ret_e
EVT_IO	src/events.h	/^	EVT_IO$/;"	e	enum:evt_type_e
EVT_IO_READ	src/events.h	/^	EVT_IO_READ =  0x01,$/;"	e	enum:evt_io_type_e
EVT_IO_WRITE	src/events.h	/^	EVT_IO_WRITE = 0x02$/;"	e	enum:evt_io_type_e
EVT_OK	src/events.h	/^	EVT_OK = 1,$/;"	e	enum:evt_ret_e
EVT_SIGNAL	src/events.h	/^	EVT_SIGNAL,$/;"	e	enum:evt_type_e
EV_MULTIPLICITY	src/events.c	18;"	d	file:
EV_STANDALONE	src/events.c	17;"	d	file:
EXTRA_LIBS_ROOT	src/Makefile	/^EXTRA_LIBS_ROOT?=\/usr\/local$/;"	m
EXTRA_LIBS_ROOT	tests/Makefile	/^EXTRA_LIBS_ROOT?=\/usr\/local$/;"	m
FAIL	src/macros.h	44;"	d
FALSE	src/macros.h	33;"	d
FCNTL	src/macros.h	109;"	d
FCNTL	src/macros.h	87;"	d
FREE	src/macros.h	57;"	d
GCDA	src/Makefile	/^GCDA=$(SRC:.c=.gcda)$/;"	m
GCDA	tests/Makefile	/^GCDA=$(SRC:.c=.gcda)$/;"	m
GCNO	src/Makefile	/^GCNO=$(SRC:.c=.gcno)$/;"	m
GCNO	tests/Makefile	/^GCNO=$(SRC:.c=.gcno)$/;"	m
GCOV	src/Makefile	/^GCOV=$(SRC:.c=.c.gcov)$/;"	m
GCOV	tests/Makefile	/^GCOV=$(SRC:.c=.c.gcov)$/;"	m
GCOVDIRS	Makefile	/^GCOVDIRS = $(DIRS:%=gcov-%)$/;"	m
HDR	src/Makefile	/^HDR=aiofd.h bitset.h btree.h buffer.h child.h daemon.h debug.h events.h hashtable.h list.h log.h macros.h pair.h privileges.h sanitize.h socket.h$/;"	m
INSTALL	Makefile	/^INSTALL=\/usr\/bin\/install$/;"	m
INSTALL	src/Makefile	/^INSTALL=\/usr\/bin\/install$/;"	m
INSTALLDIRS	Makefile	/^INSTALLDIRS = $(DIRS:%=install-%)$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA=$(INSTALL) -m 644$/;"	m
INSTALL_DATA	src/Makefile	/^INSTALL_DATA=$(INSTALL) -m 644$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM=$(INSTALL)$/;"	m
INSTALL_PROGRAM	src/Makefile	/^INSTALL_PROGRAM=$(INSTALL)$/;"	m
IPv4	src/socket.h	/^typedef struct in_addr IPv4;$/;"	t	typeref:struct:in_addr
IPv6	src/socket.h	/^typedef struct in6_addr IPv6;$/;"	t	typeref:struct:in6_addr
ITEM_AT	src/hashtable.c	40;"	d	file:
ITEM_AT	src/list.c	42;"	d	file:
ITR_EQ	src/hashtable.c	41;"	d	file:
LDFLAGS	tests/Makefile	/^LDFLAGS=-O0 -gstabs+ -L$(CUTIL_ROOT)\/lib -L$(EXTRA_LIBS_ROOT)\/lib$/;"	m
LDFLAGS	tests/Makefile	/^coverage: LDFLAGS=-fprofile-arcs -O0 -gstabs+ -L$(CUTIL_ROOT)\/lib -L$(EXTRA_LIBS_ROOT)\/lib$/;"	m
LIBS	tests/Makefile	/^LIBS=-lcutil -lcunit -lev$/;"	m
LISTEN	src/macros.h	110;"	d
LISTEN	src/macros.h	91;"	d
LIST_AT	src/hashtable.c	39;"	d	file:
LOG	src/macros.h	43;"	d
LOG_TYPE_FILE	src/log.h	/^	LOG_TYPE_FILE$/;"	e	enum:log_type_s
LOG_TYPE_SYSLOG	src/log.h	/^	LOG_TYPE_SYSLOG,$/;"	e	enum:log_type_s
MALLOC	src/macros.h	103;"	d
MALLOC	src/macros.h	65;"	d
MEMCMP	src/macros.h	59;"	d
MEMCPY	src/macros.h	58;"	d
MEMSET	src/macros.h	60;"	d
MISSING_64BIT_ENDIAN	src/macros.h	136;"	d
MISSING_STRNLEN	src/macros.h	135;"	d
MULTIPLE	tests/test_aiofd.c	33;"	d	file:
MULTIPLE	tests/test_child.c	33;"	d	file:
MULTIPLE	tests/test_hashtable.c	35;"	d	file:
MULTIPLE	tests/test_list.c	35;"	d	file:
MULTIPLE	tests/test_privileges.c	34;"	d	file:
MULTIPLE	tests/test_socket.c	35;"	d	file:
NAME	src/Makefile	/^NAME=cutil$/;"	m
NOTICE	src/macros.h	42;"	d
NO_ARGS	src/child.h	23;"	d
NUM_PRIMES	src/hashtable.c	/^uint_t const NUM_PRIMES = 30;$/;"	v
OBJ	src/Makefile	/^OBJ=$(SRC:.c=.o)$/;"	m
OBJ	tests/Makefile	/^OBJ=$(SRC:.c=.o)$/;"	m
OPEN_MAX	src/sanitize.c	37;"	d	file:
OUT	src/Makefile	/^OUT=lib$(NAME).a$/;"	m
OUT	tests/Makefile	/^OUT=test_all$/;"	m
PIPE_READ_FD	src/child.c	211;"	d	file:
PIPE_WRITE_FD	src/child.c	212;"	d	file:
PORTABLE_32_BIT	src/macros.h	128;"	d
PORTABLE_64_BIT	src/macros.h	124;"	d
PREFIX	src/Makefile	/^PREFIX?=\/usr\/local$/;"	m
PRIMES	src/hashtable.c	/^uint_t const PRIMES[] =$/;"	v
REALLOC	src/macros.h	105;"	d
REALLOC	src/macros.h	67;"	d
REPEAT	tests/test_aiofd.c	31;"	d	file:
REPEAT	tests/test_child.c	31;"	d	file:
REPEAT	tests/test_hashtable.c	33;"	d	file:
REPEAT	tests/test_list.c	33;"	d	file:
REPEAT	tests/test_privileges.c	32;"	d	file:
REPEAT	tests/test_socket.c	33;"	d	file:
REPORTDIRS	Makefile	/^REPORTDIRS = $(DIRS:%=report-%)$/;"	m
SETSOCKOPT	src/macros.h	111;"	d
SETSOCKOPT	src/macros.h	95;"	d
SHELL	Makefile	/^SHELL=\/bin\/sh$/;"	m
SHELL	src/Makefile	/^SHELL=\/bin\/sh$/;"	m
SHELL	tests/Makefile	/^SHELL=\/bin\/sh$/;"	m
SIZEMAX	tests/test_aiofd.c	32;"	d	file:
SIZEMAX	tests/test_child.c	32;"	d	file:
SIZEMAX	tests/test_hashtable.c	34;"	d	file:
SIZEMAX	tests/test_list.c	34;"	d	file:
SIZEMAX	tests/test_privileges.c	33;"	d	file:
SIZEMAX	tests/test_socket.c	34;"	d	file:
SOCKET	src/macros.h	112;"	d
SOCKET	src/macros.h	99;"	d
SOCKET_BADHOSTNAME	src/socket.h	/^    SOCKET_BADHOSTNAME  = -3,$/;"	e	enum:socket_ret_e
SOCKET_BADPARAM	src/socket.h	/^    SOCKET_BADPARAM     = -2,$/;"	e	enum:socket_ret_e
SOCKET_BOUND	src/socket.h	/^	SOCKET_BOUND		= -8,$/;"	e	enum:socket_ret_e
SOCKET_CONNECTED	src/socket.h	/^	SOCKET_CONNECTED    = -7,$/;"	e	enum:socket_ret_e
SOCKET_CONNECT_FAIL	src/socket.h	/^	SOCKET_CONNECT_FAIL = -9$/;"	e	enum:socket_ret_e
SOCKET_COUNT	src/socket.h	/^	SOCKET_COUNT = (SOCKET_LAST - SOCKET_FIRST),$/;"	e	enum:socket_type_e
SOCKET_ERROR	src/socket.h	/^    SOCKET_ERROR        = -1,$/;"	e	enum:socket_ret_e
SOCKET_FIRST	src/socket.h	/^	SOCKET_FIRST = SOCKET_TCP,$/;"	e	enum:socket_type_e
SOCKET_INPUT	src/socket.h	/^    SOCKET_INPUT        = 2,$/;"	e	enum:socket_ret_e
SOCKET_INVALIDPORT	src/socket.h	/^    SOCKET_INVALIDPORT  = -4,$/;"	e	enum:socket_ret_e
SOCKET_LAST	src/socket.h	/^	SOCKET_LAST,$/;"	e	enum:socket_type_e
SOCKET_OK	src/socket.h	/^    SOCKET_OK           = 1,$/;"	e	enum:socket_ret_e
SOCKET_OUTPUT	src/socket.h	/^    SOCKET_OUTPUT       = 3,$/;"	e	enum:socket_ret_e
SOCKET_POLLERR	src/socket.h	/^    SOCKET_POLLERR      = -6,$/;"	e	enum:socket_ret_e
SOCKET_TCP	src/socket.h	/^    SOCKET_TCP,$/;"	e	enum:socket_type_e
SOCKET_TIMEOUT	src/socket.h	/^    SOCKET_TIMEOUT      = -5,$/;"	e	enum:socket_ret_e
SOCKET_UNIX	src/socket.h	/^	SOCKET_UNIX,$/;"	e	enum:socket_type_e
SOCKET_UNKNOWN	src/socket.h	/^	SOCKET_UNKNOWN = -1$/;"	e	enum:socket_type_e
SRC	src/Makefile	/^SRC=aiofd.c bitset.c btree.c buffer.c child.c daemon.c events.c hashtable.c list.c log.c pair.c privileges.c sanitize.c socket.c$/;"	m
SRC	tests/Makefile	/^SRC=test_all.c test_aiofd.c test_bitset.c test_btree.c test_buffer.c test_child.c test_hashtable.c test_list.c test_pair.c test_privileges.c test_sanitize.c test_socket.c$/;"	m
STRDUP	src/macros.h	61;"	d
SUITE	tests/test_macros.h	20;"	d
T	src/macros.h	118;"	d
TESTDIRS	Makefile	/^TESTDIRS = $(DIRS:%=test-%)$/;"	m
TRUE	src/macros.h	34;"	d
UNINSTALLDIRS	Makefile	/^UNINSTALLDIRS = $(DIRS:%=uninstall-%)$/;"	m
UT	src/macros.h	119;"	d
VALID_SOCKET_TYPE	src/socket.h	57;"	d
WARN	src/macros.h	41;"	d
_GNU_SOURCE	src/log.c	17;"	d	file:
__AIOFD_H__	src/aiofd.h	18;"	d
__BITSET_H__	src/bitset.h	18;"	d
__BTREE_H__	src/btree.h	18;"	d
__BUFFER_H__	src/buffer.h	18;"	d
__CHILD_H__	src/child.h	18;"	d
__DAEMON_H__	src/daemon.h	18;"	d
__EVENTS_H__	src/events.h	18;"	d
__HASHTABLE_H__	src/hashtable.h	18;"	d
__LIST_H__	src/list.h	18;"	d
__LOG_H__	src/log.h	18;"	d
__MACROS_H__	src/macros.h	18;"	d
__PAIR_H__	src/pair.h	18;"	d
__PRIVILEGES_H__	src/privileges.h	18;"	d
__SANITIZE_H__	src/sanitize.h	18;"	d
__SOCKET_H__	src/socket.h	18;"	d
__TEST_MACROS_H__	tests/test_macros.h	18;"	d
add_aiofd_test_suite	tests/test_aiofd.c	/^CU_pSuite add_aiofd_test_suite()$/;"	f
add_aiofd_tests	tests/test_aiofd.c	/^static CU_pSuite add_aiofd_tests( CU_pSuite pSuite )$/;"	f	file:
add_bitset_test_suite	tests/test_bitset.c	/^CU_pSuite add_bitset_test_suite()$/;"	f
add_bitset_tests	tests/test_bitset.c	/^static CU_pSuite add_bitset_tests( CU_pSuite pSuite )$/;"	f	file:
add_btree_test_suite	tests/test_btree.c	/^CU_pSuite add_btree_test_suite()$/;"	f
add_btree_tests	tests/test_btree.c	/^static CU_pSuite add_btree_tests( CU_pSuite pSuite )$/;"	f	file:
add_buffer_test_suite	tests/test_buffer.c	/^CU_pSuite add_buffer_test_suite()$/;"	f
add_buffer_tests	tests/test_buffer.c	/^static CU_pSuite add_buffer_tests( CU_pSuite pSuite )$/;"	f	file:
add_child_test_suite	tests/test_child.c	/^CU_pSuite add_child_test_suite()$/;"	f
add_child_tests	tests/test_child.c	/^static CU_pSuite add_child_tests( CU_pSuite pSuite )$/;"	f	file:
add_environ	tests/test_sanitize.c	/^static int8_t * add_environ[] =$/;"	v	file:
add_hashtable_test_suite	tests/test_hashtable.c	/^CU_pSuite add_hashtable_test_suite()$/;"	f
add_hashtable_tests	tests/test_hashtable.c	/^static CU_pSuite add_hashtable_tests( CU_pSuite pSuite )$/;"	f	file:
add_list_test_suite	tests/test_list.c	/^CU_pSuite add_list_test_suite()$/;"	f
add_list_tests	tests/test_list.c	/^static CU_pSuite add_list_tests( CU_pSuite pSuite )$/;"	f	file:
add_pair_test_suite	tests/test_pair.c	/^CU_pSuite add_pair_test_suite()$/;"	f
add_pair_tests	tests/test_pair.c	/^static CU_pSuite add_pair_tests( CU_pSuite pSuite )$/;"	f	file:
add_privileges_test_suite	tests/test_privileges.c	/^CU_pSuite add_privileges_test_suite()$/;"	f
add_privileges_tests	tests/test_privileges.c	/^static CU_pSuite add_privileges_tests( CU_pSuite pSuite )$/;"	f	file:
add_sanitize_test_suite	tests/test_sanitize.c	/^CU_pSuite add_sanitize_test_suite()$/;"	f
add_sanitize_tests	tests/test_sanitize.c	/^static CU_pSuite add_sanitize_tests( CU_pSuite pSuite )$/;"	f	file:
add_socket_test_suite	tests/test_socket.c	/^CU_pSuite add_socket_test_suite()$/;"	f
add_socket_tests	tests/test_socket.c	/^static CU_pSuite add_socket_tests( CU_pSuite pSuite )$/;"	f	file:
added_tz	tests/test_sanitize.c	/^static int added_tz = FALSE;$/;"	v	file:
addr	src/socket.c	/^	IPv4			addr;			\/* IPv4 struct from host string *\/$/;"	m	struct:socket_s	file:
aiofd	src/child.c	/^	aiofd_t			aiofd;			\/* the fd management state *\/$/;"	m	struct:child_process_s	file:
aiofd	src/socket.c	/^	aiofd_t			aiofd;			\/* the fd management state *\/$/;"	m	struct:socket_s	file:
aiofd	tests/test_all.c	/^SUITE( aiofd );$/;"	v
aiofd_deinitialize	src/aiofd.c	/^void aiofd_deinitialize( aiofd_t * const aiofd )$/;"	f
aiofd_delete	src/aiofd.c	/^void aiofd_delete( void * aio )$/;"	f
aiofd_enable_read_evt	src/aiofd.c	/^int aiofd_enable_read_evt( aiofd_t * const aiofd,$/;"	f
aiofd_enable_write_evt	src/aiofd.c	/^int aiofd_enable_write_evt( aiofd_t * const aiofd,$/;"	f
aiofd_flush	src/aiofd.c	/^int aiofd_flush( aiofd_t * const aiofd )$/;"	f
aiofd_get_listen	src/aiofd.c	/^int aiofd_get_listen( aiofd_t * const aiofd )$/;"	f
aiofd_initialize	src/aiofd.c	/^int aiofd_initialize( aiofd_t * const aiofd, $/;"	f
aiofd_new	src/aiofd.c	/^aiofd_t * aiofd_new( int const write_fd,$/;"	f
aiofd_ops_s	src/aiofd.h	/^	struct aiofd_ops_s$/;"	s	struct:aiofd_s
aiofd_ops_t	src/aiofd.h	/^typedef struct aiofd_ops_s aiofd_ops_t;$/;"	t	typeref:struct:aiofd_ops_s
aiofd_read	src/aiofd.c	/^int32_t aiofd_read( aiofd_t * const aiofd,$/;"	f
aiofd_read_fn	src/aiofd.c	/^static evt_ret_t aiofd_read_fn( evt_loop_t * const el,$/;"	f	file:
aiofd_s	src/aiofd.h	/^struct aiofd_s$/;"	s
aiofd_set_listen	src/aiofd.c	/^int aiofd_set_listen( aiofd_t * const aiofd, int listen )$/;"	f
aiofd_t	src/aiofd.h	/^typedef struct aiofd_s aiofd_t;$/;"	t	typeref:struct:aiofd_s
aiofd_write	src/aiofd.c	/^int aiofd_write( aiofd_t * const aiofd, $/;"	f
aiofd_write_common	src/aiofd.c	/^static int aiofd_write_common( aiofd_t* const aiofd, $/;"	f	file:
aiofd_write_fn	src/aiofd.c	/^static evt_ret_t aiofd_write_fn( evt_loop_t * const el,$/;"	f	file:
aiofd_write_s	src/aiofd.c	/^typedef struct aiofd_write_s$/;"	s	file:
aiofd_write_t	src/aiofd.c	/^} aiofd_write_t;$/;"	t	typeref:struct:aiofd_write_s	file:
aiofd_writev	src/aiofd.c	/^int aiofd_writev( aiofd_t * const aiofd,$/;"	f
balance	src/btree.c	/^	int32_t balance;			\/* balance factor *\/$/;"	m	struct:node_s	file:
bits	src/bitset.h	/^	uint32_t * bits;$/;"	m	struct:bitset_s
bitset	tests/test_all.c	/^SUITE( bitset );$/;"	v
bitset_s	src/bitset.h	/^typedef struct bitset_s$/;"	s
bitset_t	src/bitset.h	/^} bitset_t;$/;"	t	typeref:struct:bitset_s
bound	src/socket.c	/^	int32_t			bound;			\/* is the socket bound? *\/$/;"	m	struct:socket_s	file:
bset_clear	src/bitset.c	/^int bset_clear( bitset_t * const bset, size_t const bit )$/;"	f
bset_clear_all	src/bitset.c	/^int bset_clear_all( bitset_t * const bset )$/;"	f
bset_deinitialize	src/bitset.c	/^int bset_deinitialize( bitset_t * const bset )$/;"	f
bset_delete	src/bitset.c	/^void bset_delete( void * bset )$/;"	f
bset_initialize	src/bitset.c	/^int bset_initialize( bitset_t * const bset, size_t const num_bits )$/;"	f
bset_new	src/bitset.c	/^bitset_t * bset_new( size_t const num_bits )$/;"	f
bset_set	src/bitset.c	/^int bset_set( bitset_t * const bset, size_t const bit )$/;"	f
bset_set_all	src/bitset.c	/^int bset_set_all( bitset_t * const bset )$/;"	f
bset_test	src/bitset.c	/^int bset_test( bitset_t const * const bset, size_t const bit )$/;"	f
bt_add	src/btree.c	/^int bt_add( bt_t * const btree, $/;"	f
bt_add_more_nodes	src/btree.c	/^static void bt_add_more_nodes( bt_t * const btree )$/;"	f	file:
bt_balance_tree	src/btree.c	/^static node_t * bt_balance_tree( bt_t * const btree, node_t * n )$/;"	f	file:
bt_deinitialize	src/btree.c	/^static void bt_deinitialize(bt_t * const btree)$/;"	f	file:
bt_delete	src/btree.c	/^void bt_delete(void * bt)$/;"	f
bt_delete_fn	src/btree.h	/^typedef void (*bt_delete_fn)(void * value);$/;"	t
bt_find	src/btree.c	/^void * bt_find(bt_t * const btree, void * const key )$/;"	f
bt_find_node	src/btree.c	/^static node_t * bt_find_node( bt_t * const btree, void * const key )$/;"	f	file:
bt_find_tree_max	src/btree.c	/^static node_t * bt_find_tree_max( node_t * p )$/;"	f	file:
bt_find_tree_min	src/btree.c	/^static node_t * bt_find_tree_min( node_t * p )$/;"	f	file:
bt_get_mutex	src/btree.c	/^pthread_mutex_t * bt_get_mutex(bt_t * const btree)$/;"	f
bt_get_node	src/btree.c	/^static node_t * bt_get_node( node_t ** const nlist )$/;"	f	file:
bt_initialize	src/btree.c	/^static void bt_initialize$/;"	f	file:
bt_insert_node	src/btree.c	/^static int bt_insert_node( bt_t * const btree,$/;"	f	file:
bt_is_left_child	src/btree.c	/^static int bt_is_left_child( node_t * p, node_t * n )$/;"	f	file:
bt_itr_begin	src/btree.c	/^bt_itr_t bt_itr_begin(bt_t const * const btree)$/;"	f
bt_itr_end	src/btree.c	/^bt_itr_t bt_itr_end(bt_t const * const btree)$/;"	f
bt_itr_get	src/btree.c	/^void* bt_itr_get(bt_t const * const btree, bt_itr_t const itr)$/;"	f
bt_itr_get_key	src/btree.c	/^void* bt_itr_get_key(bt_t const * const btree, bt_itr_t const itr)$/;"	f
bt_itr_next	src/btree.c	/^bt_itr_t bt_itr_next(bt_t const * const btree, bt_itr_t const itr)$/;"	f
bt_itr_rbegin	src/btree.c	/^bt_itr_t bt_itr_rbegin(bt_t const * const btree)$/;"	f
bt_itr_rend	src/btree.c	/^bt_itr_t bt_itr_rend(bt_t const * const btree)$/;"	f
bt_itr_rnext	src/btree.c	/^bt_itr_t bt_itr_rnext(bt_t const * const btree, bt_itr_t const itr)$/;"	f
bt_itr_t	src/btree.h	/^typedef void * bt_itr_t;$/;"	t
bt_key_cmp_fn	src/btree.h	/^typedef int (*bt_key_cmp_fn)( void * l, void * r);$/;"	t
bt_lock	src/btree.c	/^void bt_lock(bt_t * const btree)$/;"	f
bt_new	src/btree.c	/^bt_t* bt_new$/;"	f
bt_print	src/btree.c	/^void bt_print( bt_t * const btree )$/;"	f
bt_print_node	src/btree.c	/^void bt_print_node( node_t * const p, int const indent )$/;"	f
bt_put_node	src/btree.c	/^static void bt_put_node( node_t ** const nlist, node_t * const node )$/;"	f	file:
bt_remove	src/btree.c	/^void * bt_remove(bt_t * const btree, void * const key )$/;"	f
bt_replace_node	src/btree.c	/^static node_t * bt_replace_node( node_t * p, node_t * s )$/;"	f	file:
bt_rotate_left	src/btree.c	/^static node_t * bt_rotate_left( node_t * const p )$/;"	f	file:
bt_rotate_left_right	src/btree.c	/^static node_t * bt_rotate_left_right( node_t * const p )$/;"	f	file:
bt_rotate_right	src/btree.c	/^static node_t * bt_rotate_right( node_t * const p )$/;"	f	file:
bt_rotate_right_left	src/btree.c	/^static node_t * bt_rotate_right_left( node_t * const p )$/;"	f	file:
bt_s	src/btree.c	/^struct bt_s$/;"	s	file:
bt_size	src/btree.c	/^uint_t bt_size(bt_t * const btree)$/;"	f
bt_t	src/btree.h	/^typedef struct bt_s bt_t;$/;"	t	typeref:struct:bt_s
bt_try_lock	src/btree.c	/^int bt_try_lock(bt_t * const btree)$/;"	f
bt_unlock	src/btree.c	/^void bt_unlock(bt_t * const btree)$/;"	f
btree	tests/test_all.c	/^SUITE( btree );$/;"	v
buf	tests/test_buffer.c	/^int8_t const * const buf = "blah";$/;"	v
buf	tests/test_child.c	/^static buf[16];$/;"	v	file:
buffer	tests/test_all.c	/^SUITE( buffer );$/;"	v
buffer_append	src/buffer.c	/^int buffer_append( buffer_t * const b, void * p, size_t len )$/;"	f
buffer_deinitialize	src/buffer.c	/^int buffer_deinitialize( buffer_t * const b )$/;"	f
buffer_delete	src/buffer.c	/^void buffer_delete( void * b )$/;"	f
buffer_initialize	src/buffer.c	/^int buffer_initialize( buffer_t * const b, void * p, size_t len )$/;"	f
buffer_new	src/buffer.c	/^buffer_t * buffer_new( void * p, size_t len )$/;"	f
buffer_t	src/buffer.h	/^typedef struct iovec buffer_t;$/;"	t	typeref:struct:iovec
build_clean_environ	src/sanitize.c	/^int8_t ** build_clean_environ( int preservec, int8_t ** preservev, int addc, int8_t ** addv )$/;"	f
callback	src/events.h	/^	evt_fn			callback;$/;"	m	struct:evt_s
child	src/events.h	/^	struct ev_child		child;$/;"	m	union:ev_data_u	typeref:struct:ev_data_u::ev_child
child	tests/test_all.c	/^SUITE( child );$/;"	v
child_aiofd_error_fn	src/child.c	/^static int child_aiofd_error_fn( aiofd_t * const aiofd,$/;"	f	file:
child_aiofd_read_fn	src/child.c	/^static int child_aiofd_read_fn( aiofd_t * const aiofd,$/;"	f	file:
child_aiofd_write_fn	src/child.c	/^static int child_aiofd_write_fn( aiofd_t * const aiofd,$/;"	f	file:
child_ops_s	src/child.h	/^typedef struct child_ops_s $/;"	s
child_ops_t	src/child.h	/^} child_ops_t;$/;"	t	typeref:struct:child_ops_s
child_params	src/events.h	/^	} child_params;$/;"	m	union:evt_params_u	typeref:struct:evt_params_u::__anon2
child_pid	tests/test_child.c	/^static pid_t child_pid = -1;$/;"	v	file:
child_process_deinitialize	src/child.c	/^static void child_process_deinitialize( child_process_t * const child, int wait )$/;"	f	file:
child_process_delete	src/child.c	/^void child_process_delete( void * cp, int wait )$/;"	f
child_process_flush	src/child.c	/^int child_process_flush( child_process_t * const cp )$/;"	f
child_process_get_pid	src/child.c	/^pid_t child_process_get_pid( child_process_t * const cp )$/;"	f
child_process_initialize	src/child.c	/^static int child_process_initialize( child_process_t * const child,$/;"	f	file:
child_process_new	src/child.c	/^child_process_t * child_process_new( int8_t const * const path,$/;"	f
child_process_read	src/child.c	/^int32_t child_process_read( child_process_t * const cp, $/;"	f
child_process_s	src/child.c	/^struct child_process_s$/;"	s	file:
child_process_set_fail_fork	src/child.c	/^void child_process_set_fail_fork( int fail )$/;"	f
child_process_set_num_good_pipes	src/child.c	/^void child_process_set_num_good_pipes( int ngood )$/;"	f
child_process_t	src/child.h	/^typedef struct child_process_s child_process_t;$/;"	t	typeref:struct:child_process_s
child_process_write	src/child.c	/^int child_process_write( child_process_t * const cp, $/;"	f
child_process_writev	src/child.c	/^int child_process_writev( child_process_t * const cp,$/;"	f
clean_environ	src/sanitize.c	/^static int8_t * clean_environ[] =$/;"	v	file:
connect_fn	src/socket.h	/^	socket_ret_t (*connect_fn)( socket_t * const s, void * user_data );$/;"	m	struct:socket_ops_s
connect_fn	tests/test_socket.c	/^static socket_ret_t connect_fn( socket_t * const s, void * user_data )$/;"	f	file:
connect_tests_connect_fn	tests/test_socket.c	/^static socket_ret_t connect_tests_connect_fn( socket_t * const s, void * user_data )$/;"	f	file:
connect_tests_error_fn	tests/test_socket.c	/^static socket_ret_t connect_tests_error_fn( socket_t * const s, int err, void * user_data )$/;"	f	file:
connected	src/socket.c	/^	int32_t			connected;		\/* is the socket connected? *\/$/;"	m	struct:socket_s	file:
connected	tests/test_socket.c	/^	int connected;$/;"	m	struct:sock_state_s	file:
cookie	src/log.h	/^	void * cookie;$/;"	m	struct:log_s
count	src/hashtable.h	/^	uint_t				count;				\/* number of items in the hashtable *\/$/;"	m	struct:ht_s
count	src/list.h	/^	uint_t			count;					\/* number of items in the list *\/$/;"	m	struct:list_s
create_pid_file	src/daemon.c	/^int create_pid_file( int8_t const * const fpath )$/;"	f
create_start_file	src/daemon.c	/^int create_start_file( int8_t const * const fpath )$/;"	f
daemonize	src/daemon.c	/^void daemonize( int8_t const * const root_dir )$/;"	f
data	src/aiofd.c	/^	void * data;$/;"	m	struct:aiofd_write_s	file:
data	src/list.c	/^	void *	data;	\/* pointer to the data *\/$/;"	m	struct:list_item_s	file:
default_key_cmp	src/btree.c	/^static int default_key_cmp( void * l, void * r )$/;"	f	file:
default_load_limit	src/hashtable.c	/^float const default_load_limit = 3.0f;$/;"	v
deinit_aiofd_suite	tests/test_aiofd.c	/^static int deinit_aiofd_suite( void )$/;"	f	file:
deinit_bitset_suite	tests/test_bitset.c	/^static int deinit_bitset_suite( void )$/;"	f	file:
deinit_btree_suite	tests/test_btree.c	/^static int deinit_btree_suite( void )$/;"	f	file:
deinit_buffer_suite	tests/test_buffer.c	/^static int deinit_buffer_suite( void )$/;"	f	file:
deinit_child_suite	tests/test_child.c	/^static int deinit_child_suite( void )$/;"	f	file:
deinit_hashtable_suite	tests/test_hashtable.c	/^static int deinit_hashtable_suite( void )$/;"	f	file:
deinit_list_suite	tests/test_list.c	/^static int deinit_list_suite( void )$/;"	f	file:
deinit_pair_suite	tests/test_pair.c	/^static int deinit_pair_suite( void )$/;"	f	file:
deinit_privileges_suite	tests/test_privileges.c	/^static int deinit_privileges_suite( void )$/;"	f	file:
deinit_sanitize_suite	tests/test_sanitize.c	/^static int deinit_sanitize_suite( void )$/;"	f	file:
deinit_socket_suite	tests/test_socket.c	/^static int deinit_socket_suite( void )$/;"	f	file:
dfn	src/hashtable.h	/^	ht_delete_fn		dfn;				\/* key delete function *\/$/;"	m	struct:ht_s
dfn	src/list.h	/^	list_delete_fn	dfn;					\/* destruction function for each node *\/$/;"	m	struct:list_s
disconnect_fn	src/socket.h	/^	socket_ret_t (*disconnect_fn)( socket_t * const s, void * user_data );$/;"	m	struct:socket_ops_s
disconnect_fn	tests/test_socket.c	/^static socket_ret_t disconnect_fn( socket_t * const s, void * user_data )$/;"	f	file:
drop_privileges	src/privileges.c	/^void drop_privileges( int permanent )$/;"	f
el	src/aiofd.h	/^	evt_loop_t*	el;				\/* event loop we registered out evt with *\/$/;"	m	struct:aiofd_s
el	src/events.h	/^	evt_loop_t *	el;			\/* the event loop associated wtih *\/$/;"	m	struct:evt_s
el	tests/test_all.c	/^evt_loop_t * el = NULL;$/;"	v
error	tests/test_socket.c	/^	int error;$/;"	m	struct:sock_state_s	file:
error_fn	src/aiofd.h	/^		int (*error_fn)( aiofd_t * const aiofd, int err, void * user_data );$/;"	m	struct:aiofd_s::aiofd_ops_s
error_fn	src/socket.h	/^	socket_ret_t (*error_fn)( socket_t * const s, int err, void * user_data );$/;"	m	struct:socket_ops_s
error_fn	tests/test_aiofd.c	/^static int error_fn( aiofd_t * const aiofd, int err, void * user_data )$/;"	f	file:
error_fn	tests/test_socket.c	/^static socket_ret_t error_fn( socket_t * const s, int err, void * user_data )$/;"	f	file:
ev	src/events.h	/^	ev_data_t		ev;			\/* MUST BE FIRST *\/$/;"	m	struct:evt_s
ev_data_t	src/events.h	/^} ev_data_t;$/;"	t	typeref:union:ev_data_u
ev_data_u	src/events.h	/^typedef union ev_data_u$/;"	u
evt_child_callback	src/events.c	/^static void evt_child_callback( struct ev_loop * loop,$/;"	f	file:
evt_deinitialize_event_handler	src/events.c	/^void evt_deinitialize_event_handler( evt_t * const evt )$/;"	f
evt_delete	src/events.c	/^void evt_delete(void * e)$/;"	f
evt_delete_event_handler	src/events.c	/^void evt_delete_event_handler( void * e )$/;"	f
evt_fn	src/events.h	/^typedef evt_ret_t (*evt_fn)( evt_loop_t * const el,$/;"	t
evt_initialize_event_handler	src/events.c	/^int evt_initialize_event_handler( evt_t * const evt,$/;"	f
evt_io_callback	src/events.c	/^static void evt_io_callback( struct ev_loop * loop,$/;"	f	file:
evt_io_type_e	src/events.h	/^typedef enum evt_io_type_e$/;"	g
evt_io_type_t	src/events.h	/^} evt_io_type_t;$/;"	t	typeref:enum:evt_io_type_e
evt_log_backend	src/events.c	/^static void evt_log_backend( evt_loop_t * const el )$/;"	f	file:
evt_loop_t	src/events.h	/^typedef struct ev_loop evt_loop_t;$/;"	t	typeref:struct:ev_loop
evt_new	src/events.c	/^evt_loop_t* evt_new( void )$/;"	f
evt_new_event_handler	src/events.c	/^evt_t * evt_new_event_handler( evt_type_t const t,$/;"	f
evt_params	src/events.h	/^	evt_params_t	evt_params;$/;"	m	struct:evt_s
evt_params_t	src/events.h	/^} evt_params_t;$/;"	t	typeref:union:evt_params_u
evt_params_u	src/events.h	/^typedef union evt_params_u$/;"	u
evt_ret_e	src/events.h	/^typedef enum evt_ret_e$/;"	g
evt_ret_t	src/events.h	/^} evt_ret_t;$/;"	t	typeref:enum:evt_ret_e
evt_run	src/events.c	/^evt_ret_t evt_run( evt_loop_t * const el )$/;"	f
evt_s	src/events.h	/^struct evt_s$/;"	s
evt_signal_callback	src/events.c	/^static void evt_signal_callback( struct ev_loop * loop,$/;"	f	file:
evt_start_event_handler	src/events.c	/^evt_ret_t evt_start_event_handler( evt_loop_t * const el,$/;"	f
evt_stop	src/events.c	/^evt_ret_t evt_stop( evt_loop_t * const el, int once )$/;"	f
evt_stop_event_handler	src/events.c	/^evt_ret_t evt_stop_event_handler( evt_loop_t * const el,$/;"	f
evt_t	src/events.h	/^typedef struct evt_s evt_t;$/;"	t	typeref:struct:evt_s
evt_type	src/events.h	/^	evt_type_t		evt_type;$/;"	m	struct:evt_s
evt_type_e	src/events.h	/^typedef enum evt_type_e$/;"	g
evt_type_t	src/events.h	/^} evt_type_t;$/;"	t	typeref:enum:evt_type_e
exit_fn	src/child.h	/^	int (*exit_fn)( child_process_t * const cp, int rpid, int rstatus, void * user_data );$/;"	m	struct:child_ops_s
exit_fn	tests/test_child.c	/^static int exit_fn( child_process_t * const cp, int rpid, int rstatus, void * user_data )$/;"	f	file:
exit_pid_fn	tests/test_child.c	/^static int exit_pid_fn( child_process_t * const cp, int rpid, int rstatus, void * user_data )$/;"	f	file:
exited	src/child.c	/^	int				exited;			\/* have we received the SIGCHLD signal? *\/$/;"	m	struct:child_process_s	file:
fail_alloc	tests/test_all.c	/^int fail_alloc = FALSE;$/;"	v
fail_alloc_bak	src/buffer.c	/^int fail_alloc_bak = FALSE;$/;"	v
fail_bitset_deinit	tests/test_all.c	/^int fail_bitset_deinit = FALSE;$/;"	v
fail_bitset_init	tests/test_all.c	/^int fail_bitset_init = FALSE;$/;"	v
fail_buffer_deinit	tests/test_all.c	/^int fail_buffer_deinit = FALSE;$/;"	v
fail_buffer_init	tests/test_all.c	/^int fail_buffer_init = FALSE;$/;"	v
fail_buffer_init_alloc	tests/test_all.c	/^int fail_buffer_init_alloc = FALSE;$/;"	v
fail_fork	src/child.c	/^static int fail_fork = FALSE;$/;"	v	file:
fail_list_deinit	tests/test_all.c	/^int fail_list_deinit = FALSE;$/;"	v
fail_list_grow	tests/test_all.c	/^int fail_list_grow = FALSE;$/;"	v
fail_list_init	tests/test_all.c	/^int fail_list_init = FALSE;$/;"	v
fail_socket_initialize	tests/test_all.c	/^int fail_socket_initialize = FALSE;$/;"	v
fake_accept	tests/test_all.c	/^int fake_accept = FALSE;$/;"	v
fake_accept_ret	tests/test_all.c	/^int fake_accept_ret = 0;$/;"	v
fake_aiofd_enable_read_evt	tests/test_all.c	/^int fake_aiofd_enable_read_evt = FALSE;$/;"	v
fake_aiofd_enable_read_evt_ret	tests/test_all.c	/^int fake_aiofd_enable_read_evt_ret = FALSE;$/;"	v
fake_aiofd_initialize	tests/test_all.c	/^int fake_aiofd_initialize = FALSE;$/;"	v
fake_aiofd_initialize_ret	tests/test_all.c	/^int fake_aiofd_initialize_ret = FALSE;$/;"	v
fake_aiofd_read	tests/test_all.c	/^int fake_aiofd_read = FALSE;$/;"	v
fake_aiofd_read_ret	tests/test_all.c	/^int fake_aiofd_read_ret = 0;$/;"	v
fake_aiofd_write	tests/test_all.c	/^int fake_aiofd_write = FALSE;$/;"	v
fake_aiofd_write_ret	tests/test_all.c	/^int fake_aiofd_write_ret = FALSE;$/;"	v
fake_aiofd_writev	tests/test_all.c	/^int fake_aiofd_writev = FALSE;$/;"	v
fake_aiofd_writev_ret	tests/test_all.c	/^int fake_aiofd_writev_ret = FALSE;$/;"	v
fake_bind	tests/test_all.c	/^int fake_bind = FALSE;$/;"	v
fake_bind_ret	tests/test_all.c	/^int fake_bind_ret = 0;$/;"	v
fake_connect	tests/test_all.c	/^int fake_connect = FALSE;$/;"	v
fake_connect_errno	tests/test_all.c	/^int fake_connect_errno = FALSE;$/;"	v
fake_connect_errno_value	tests/test_all.c	/^int fake_connect_errno_value = 0;$/;"	v
fake_connect_ret	tests/test_all.c	/^int fake_connect_ret = 0;$/;"	v
fake_fcntl	tests/test_all.c	/^int fake_fcntl = FALSE;$/;"	v
fake_fcntl_ret	tests/test_all.c	/^int fake_fcntl_ret = 0;$/;"	v
fake_listen	tests/test_all.c	/^int fake_listen = FALSE;$/;"	v
fake_listen_ret	tests/test_all.c	/^int fake_listen_ret = 0;$/;"	v
fake_setsockopt	tests/test_all.c	/^int fake_setsockopt = FALSE;$/;"	v
fake_setsockopt_ret	tests/test_all.c	/^int fake_setsockopt_ret = 0;$/;"	v
fake_socket	tests/test_all.c	/^int fake_socket = FALSE;$/;"	v
fake_socket_bind	tests/test_all.c	/^int fake_socket_bind = FALSE;$/;"	v
fake_socket_bind_ret	tests/test_all.c	/^int fake_socket_bind_ret = FALSE;$/;"	v
fake_socket_bound	tests/test_all.c	/^int fake_socket_bound = FALSE;$/;"	v
fake_socket_bound_ret	tests/test_all.c	/^int fake_socket_bound_ret = FALSE;$/;"	v
fake_socket_connect	tests/test_all.c	/^int fake_socket_connect = FALSE;$/;"	v
fake_socket_connect_ret	tests/test_all.c	/^int fake_socket_connect_ret = FALSE;$/;"	v
fake_socket_connected	tests/test_all.c	/^int fake_socket_connected = FALSE;$/;"	v
fake_socket_connected_ret	tests/test_all.c	/^int fake_socket_connected_ret = FALSE;$/;"	v
fake_socket_errval	tests/test_all.c	/^int fake_socket_errval = 0;$/;"	v
fake_socket_get_error_ret	tests/test_all.c	/^int fake_socket_get_error_ret = FALSE;$/;"	v
fake_socket_getsockopt	tests/test_all.c	/^int fake_socket_getsockopt = FALSE;$/;"	v
fake_socket_lookup_host	tests/test_all.c	/^int fake_socket_lookup_host = FALSE;$/;"	v
fake_socket_lookup_host_ret	tests/test_all.c	/^int fake_socket_lookup_host_ret = FALSE;$/;"	v
fake_socket_ret	tests/test_all.c	/^int fake_socket_ret = 0;$/;"	v
fd	src/events.h	/^		int fd;$/;"	m	struct:evt_params_u::__anon3
filelog_fns	src/log.c	/^static cookie_io_functions_t filelog_fns =$/;"	v	file:
filelog_writer	src/log.c	/^static ssize_t filelog_writer( void * cookie, char const * data, size_t leng )$/;"	f	file:
first	src/pair.c	/^	void * first;$/;"	m	struct:pair_s	file:
first	tests/test_pair.c	/^int8_t const * const first = "first";$/;"	v
free_head	src/list.h	/^	list_itr_t		free_head;				\/* head node of the free circular list *\/$/;"	m	struct:list_s
free_list	src/btree.c	/^	node_t*				free_list;	\/* list of free nodes *\/$/;"	m	struct:bt_s	file:
good_pipes	src/child.c	/^static int good_pipes = -1;$/;"	v	file:
hash_fn	tests/test_hashtable.c	/^static uint_t hash_fn( void const * const key )$/;"	f	file:
hashtable	tests/test_all.c	/^SUITE( hashtable );$/;"	v
hfn	src/hashtable.h	/^	ht_hash_fn			hfn;				\/* hash function *\/$/;"	m	struct:ht_s
host	src/socket.c	/^	int8_t*			host;			\/* host name *\/$/;"	m	struct:socket_s	file:
ht_clear	src/hashtable.c	/^int ht_clear( ht_t * const htable )$/;"	f
ht_count	src/hashtable.c	/^uint_t ht_count( ht_t * const htable )$/;"	f
ht_deinitialize	src/hashtable.c	/^int ht_deinitialize( ht_t * const htable )$/;"	f
ht_delete	src/hashtable.c	/^void ht_delete(void * ht)$/;"	f
ht_delete_fn	src/hashtable.h	/^typedef void (*ht_delete_fn)(void * value);$/;"	t
ht_find	src/hashtable.c	/^ht_itr_t ht_find( ht_t const * const htable, void * const data )$/;"	f
ht_get_new_size	src/hashtable.c	/^static uint_t ht_get_new_size( uint_t const count, float const limit )$/;"	f	file:
ht_grow	src/hashtable.c	/^static int ht_grow( ht_t * const htable )$/;"	f	file:
ht_hash_fn	src/hashtable.h	/^typedef uint_t (*ht_hash_fn)(void const * const key);$/;"	t
ht_initialize	src/hashtable.c	/^int ht_initialize( ht_t * const htable, uint_t const initial_capacity, $/;"	f
ht_insert	src/hashtable.c	/^int ht_insert( ht_t * const htable, void * const data )$/;"	f
ht_item_t	src/hashtable.h	/^typedef struct ht_item_s ht_item_t;$/;"	t	typeref:struct:ht_item_s
ht_itr_end_t	src/hashtable.c	/^ht_itr_t const ht_itr_end_t = { -1, -1 };$/;"	v
ht_itr_get	src/hashtable.c	/^void * ht_itr_get( ht_t const * const htable, ht_itr_t const itr )$/;"	f
ht_itr_s	src/hashtable.c	/^struct ht_itr_s$/;"	s	file:
ht_itr_t	src/hashtable.h	/^typedef struct ht_itr_s ht_itr_t;$/;"	t	typeref:struct:ht_itr_s
ht_match_fn	src/hashtable.h	/^typedef int (*ht_match_fn)(void const * const l, void const * const r);$/;"	t
ht_new	src/hashtable.c	/^ht_t* ht_new( uint_t const initial_capacity, ht_hash_fn hfn, $/;"	f
ht_remove	src/hashtable.c	/^int ht_remove( ht_t * const htable, ht_itr_t const itr )$/;"	f
ht_s	src/hashtable.h	/^typedef struct ht_s$/;"	s
ht_t	src/hashtable.h	/^} ht_t;$/;"	t	typeref:struct:ht_s
idx	src/hashtable.c	/^	int_t				idx;				\/* index of the current list *\/$/;"	m	struct:ht_itr_s	file:
init_aiofd_suite	tests/test_aiofd.c	/^static int init_aiofd_suite( void )$/;"	f	file:
init_bitset_suite	tests/test_bitset.c	/^static int init_bitset_suite( void )$/;"	f	file:
init_btree_suite	tests/test_btree.c	/^static int init_btree_suite( void )$/;"	f	file:
init_buffer_suite	tests/test_buffer.c	/^static int init_buffer_suite( void )$/;"	f	file:
init_child_suite	tests/test_child.c	/^static int init_child_suite( void )$/;"	f	file:
init_hashtable_suite	tests/test_hashtable.c	/^static int init_hashtable_suite( void )$/;"	f	file:
init_list_suite	tests/test_list.c	/^static int init_list_suite( void )$/;"	f	file:
init_pair_suite	tests/test_pair.c	/^static int init_pair_suite( void )$/;"	f	file:
init_privileges_suite	tests/test_privileges.c	/^static int init_privileges_suite( void )$/;"	f	file:
init_sanitize_suite	tests/test_sanitize.c	/^static int init_sanitize_suite( void )$/;"	f	file:
init_socket_suite	tests/test_socket.c	/^static int init_socket_suite( void )$/;"	f	file:
initial	src/hashtable.h	/^	uint_t				initial;			\/* initial capacity *\/$/;"	m	struct:ht_s
insert_item	src/list.c	/^static list_itr_t insert_item( list_item_t * const items, $/;"	f	file:
int_less	tests/test_btree.c	/^static int int_less( void * l, void * r )$/;"	f	file:
int_t	src/macros.h	/^typedef int32_t int_t;$/;"	t
int_t	src/macros.h	/^typedef int64_t int_t;$/;"	t
io	src/events.h	/^	struct ev_io		io;$/;"	m	union:ev_data_u	typeref:struct:ev_data_u::ev_io
io_params	src/events.h	/^	} io_params;$/;"	m	union:evt_params_u	typeref:struct:evt_params_u::__anon3
iov	src/aiofd.c	/^	int iov;$/;"	m	struct:aiofd_write_s	file:
items	src/list.h	/^	list_item_t*	items;					\/* array of list items *\/$/;"	m	struct:list_s
itr	src/hashtable.c	/^	list_itr_t			itr;				\/* list iterator *\/$/;"	m	struct:ht_itr_s	file:
itr_end	src/btree.c	/^static const bt_itr_t itr_end = NULL;$/;"	v	file:
kcfn	src/btree.c	/^	bt_key_cmp_fn		kcfn;		\/* key compare function *\/$/;"	m	struct:bt_s	file:
kdfn	src/btree.c	/^	bt_delete_fn		kdfn;		\/* key delete function *\/$/;"	m	struct:bt_s	file:
key	src/btree.c	/^	void * key;					\/* key *\/$/;"	m	struct:node_s	file:
left	src/btree.c	/^	struct node_s * left;		\/* left child *\/$/;"	m	struct:node_s	typeref:struct:node_s::node_s	file:
limit	src/hashtable.h	/^	float				limit;				\/* load limit that will trigger resize *\/$/;"	m	struct:ht_s
list	tests/test_all.c	/^SUITE( list );$/;"	v
list_clear	src/list.c	/^int list_clear( list_t * const list )$/;"	f
list_count	src/list.c	/^uint_t list_count( list_t const * const list )$/;"	f
list_deinitialize	src/list.c	/^int list_deinitialize( list_t * const list )$/;"	f
list_delete	src/list.c	/^void list_delete( void * l )$/;"	f
list_delete_fn	src/list.h	/^typedef void (*list_delete_fn)(void*);$/;"	t
list_get_head	src/list.h	87;"	d
list_get_tail	src/list.h	88;"	d
list_grow	src/list.c	/^static int list_grow( list_t * const list, uint_t amount )$/;"	f	file:
list_initialize	src/list.c	/^int list_initialize( list_t * const list, uint_t const initial_capacity, list_delete_fn dfn )$/;"	f
list_item_s	src/list.c	/^struct list_item_s$/;"	s	file:
list_item_t	src/list.h	/^typedef struct list_item_s list_item_t;$/;"	t	typeref:struct:list_item_s
list_itr_begin	src/list.c	/^list_itr_t list_itr_begin( list_t const * const list )$/;"	f
list_itr_end	src/list.c	/^list_itr_t list_itr_end( list_t const * const list )$/;"	f
list_itr_end_t	src/list.c	/^list_itr_t const list_itr_end_t = -1;$/;"	v
list_itr_get	src/list.c	/^void * list_itr_get( list_t const * const list, list_itr_t const itr )$/;"	f
list_itr_head	src/list.h	64;"	d
list_itr_next	src/list.c	/^list_itr_t list_itr_next( list_t const * const list, list_itr_t const itr )$/;"	f
list_itr_prev	src/list.h	72;"	d
list_itr_rbegin	src/list.h	66;"	d
list_itr_rend	src/list.h	67;"	d
list_itr_rnext	src/list.c	/^list_itr_t list_itr_rnext( list_t const * const list, list_itr_t const itr )$/;"	f
list_itr_rprev	src/list.h	73;"	d
list_itr_t	src/list.h	/^typedef int_t list_itr_t;$/;"	t
list_itr_tail	src/list.c	/^list_itr_t list_itr_tail( list_t const * const list )$/;"	f
list_new	src/list.c	/^list_t * list_new( uint_t const initial_capacity, list_delete_fn dfn )$/;"	f
list_pop	src/list.c	/^list_itr_t list_pop( list_t * const list, list_itr_t const itr )$/;"	f
list_pop_head	src/list.h	82;"	d
list_pop_tail	src/list.h	83;"	d
list_push	src/list.c	/^int list_push( list_t * const list, void * const data, list_itr_t const itr )$/;"	f
list_push_head	src/list.h	77;"	d
list_push_tail	src/list.h	78;"	d
list_reserve	src/list.c	/^int list_reserve( list_t * const list, uint const amount )$/;"	f
list_s	src/list.h	/^typedef struct list_s$/;"	s
list_size	src/btree.c	/^	uint_t				list_size;	\/* equal to initial capacity, size blocks in node_list *\/$/;"	m	struct:bt_s	file:
list_t	src/list.h	/^} list_t;$/;"	t	typeref:struct:list_s
listen	src/aiofd.h	/^	int			listen;			\/* is this a bound and listening socket fd? *\/$/;"	m	struct:aiofd_s
lists	src/hashtable.h	/^	list_t*				lists;				\/* pointer to list array *\/$/;"	m	struct:ht_s
lock	src/btree.c	/^	pthread_mutex_t		lock;		\/* btree lock *\/$/;"	m	struct:bt_s	file:
log_s	src/log.h	/^typedef struct log_s$/;"	s
log_t	src/log.h	/^} log_t;$/;"	t	typeref:struct:log_s
log_type_s	src/log.h	/^typedef enum log_type_s$/;"	g
log_type_t	src/log.h	/^} log_type_t;$/;"	t	typeref:enum:log_type_s
main	tests/test_all.c	/^int main()$/;"	f
match_fn	tests/test_hashtable.c	/^static int match_fn( void const * const l, void const * const r )$/;"	f	file:
max	src/btree.c	33;"	d	file:
mfn	src/hashtable.h	/^	ht_match_fn			mfn;				\/* match function *\/$/;"	m	struct:ht_s
min	src/btree.c	32;"	d	file:
next	src/btree.c	/^	struct node_s * next;		\/* traversal threading pointer\/free list pointer *\/$/;"	m	struct:node_s	typeref:struct:node_s::node_s	file:
next	src/list.c	/^	int_t	next;	\/* next node in the list *\/$/;"	m	struct:list_item_s	file:
nleft	src/aiofd.c	/^	size_t nleft;$/;"	m	struct:aiofd_write_s	file:
node_list	src/btree.c	/^	node_t**			node_list;	\/* memory for the nodes *\/$/;"	m	struct:bt_s	file:
node_s	src/btree.c	/^typedef struct node_s$/;"	s	file:
node_t	src/btree.c	/^} node_t;$/;"	t	typeref:struct:node_s	file:
noop	src/log.c	/^static int noop( void ) { return 0; }$/;"	f	file:
num_bits	src/bitset.h	/^	size_t num_bits;$/;"	m	struct:bitset_s
num_lists	src/btree.c	/^	uint_t				num_lists;	\/* number of blocks allocated *\/$/;"	m	struct:bt_s	file:
open_devnull	src/sanitize.c	/^static int open_devnull( int fd )$/;"	f	file:
ops	src/aiofd.h	/^	}			ops;$/;"	m	struct:aiofd_s	typeref:struct:aiofd_s::aiofd_ops_s
ops	src/child.c	/^	child_ops_t		ops;			\/* child proces callbacks *\/$/;"	m	struct:child_process_s	file:
ops	src/socket.c	/^	socket_ops_t	ops;			\/* socket callbacks *\/$/;"	m	struct:socket_s	file:
orig_gid	src/privileges.c	/^static gid_t orig_gid = -1;$/;"	v	file:
orig_groups	src/privileges.c	/^static gid_t orig_groups[NGROUPS_MAX];$/;"	v	file:
orig_ngroups	src/privileges.c	/^static int orig_ngroups = -1;$/;"	v	file:
orig_uid	src/privileges.c	/^static uid_t orig_uid = -1;$/;"	v	file:
pair	tests/test_all.c	/^SUITE( pair );$/;"	v
pair_delete	src/pair.c	/^void pair_delete( void * p )$/;"	f
pair_first	src/pair.c	/^void * pair_first( pair_t const * const pair )$/;"	f
pair_new	src/pair.c	/^pair_t * pair_new( void * first, void * second )$/;"	f
pair_s	src/pair.c	/^struct pair_s$/;"	s	file:
pair_second	src/pair.c	/^void * pair_second( pair_t const * const pair )$/;"	f
pair_t	src/pair.h	/^typedef struct pair_s pair_t;$/;"	t	typeref:struct:pair_s
parent	src/btree.c	/^	struct node_s * parent;		\/* parent pointer *\/$/;"	m	struct:node_s	typeref:struct:node_s::node_s	file:
pid	src/child.c	/^	pid_t			pid;			\/* the pid of the child process *\/$/;"	m	struct:child_process_s	file:
pid	src/daemon.c	/^pid_t pid, sid;$/;"	v
pid	src/events.h	/^		int pid;	\/* pid to watch *\/$/;"	m	struct:evt_params_u::__anon2
pint_less	tests/test_btree.c	/^static int pint_less( void * l, void * r )$/;"	f	file:
port	src/socket.c	/^	uint16_t		port;			\/* port number *\/$/;"	m	struct:socket_s	file:
preserve_environ	src/sanitize.c	/^static int8_t * preserve_environ[] =$/;"	v	file:
preserve_environ	tests/test_sanitize.c	/^static int8_t * preserve_environ[] =$/;"	v	file:
prev	src/btree.c	/^	struct node_s * prev;		\/* traversal threading pointer *\/$/;"	m	struct:node_s	typeref:struct:node_s::node_s	file:
prev	src/list.c	/^	int_t	prev;	\/* prev node in the list *\/$/;"	m	struct:list_item_s	file:
priov	src/log.c	/^static int8_t * const priov[] =$/;"	v	file:
privileges	tests/test_all.c	/^SUITE( privileges );$/;"	v
read_fn	src/aiofd.h	/^		int (*read_fn)( aiofd_t * const aiofd, size_t nread, void * user_data );$/;"	m	struct:aiofd_s::aiofd_ops_s
read_fn	src/child.h	/^	int32_t (*read_fn)( child_process_t * const cp, size_t nread, void * user_data );$/;"	m	struct:child_ops_s
read_fn	src/socket.h	/^	int32_t (*read_fn)( socket_t * const s, size_t nread, void * user_data );$/;"	m	struct:socket_ops_s
read_fn	tests/test_aiofd.c	/^static int read_fn( aiofd_t * const aiofd, size_t nread, void * user_data )$/;"	f	file:
read_fn	tests/test_child.c	/^static int32_t read_fn( child_process_t * const cp, size_t nread, void * user_data )$/;"	f	file:
read_fn	tests/test_socket.c	/^static int32_t read_fn( socket_t * const s, size_t nread, void * user_data )$/;"	f	file:
read_pid_fn	tests/test_child.c	/^static int32_t read_pid_fn( child_process_t * const cp, size_t nread, void * user_data )$/;"	f	file:
remove_item	src/list.c	/^static list_itr_t remove_item( list_item_t * const items, list_itr_t const itr )$/;"	f	file:
restore_privileges	src/privileges.c	/^void restore_privileges( void )$/;"	f
revt	src/aiofd.h	/^	evt_t		revt;			\/* read event *\/$/;"	m	struct:aiofd_s
rfd	src/aiofd.h	/^	int			rfd;			\/* read fd if two are given *\/$/;"	m	struct:aiofd_s
right	src/btree.c	/^	struct node_s * right;		\/* right child *\/$/;"	m	struct:node_s	typeref:struct:node_s::node_s	file:
rpid	src/events.h	/^		int rpid;	\/* pid of process causing change *\/$/;"	m	struct:evt_params_u::__anon2
rstatus	src/events.h	/^		int rstatus;\/* status word of process, use macros from sys\/wait.h, waitpid *\/$/;"	m	struct:evt_params_u::__anon2
safe_fork	src/child.c	/^static pid_t safe_fork( int keepfds[], int nfds )$/;"	f	file:
safe_pipe	src/child.c	/^static int safe_pipe( int pipefd[2] )$/;"	f	file:
sanitize	tests/test_all.c	/^SUITE( sanitize );$/;"	v
sanitize_files	src/sanitize.c	/^void sanitize_files( int keep[], int nfds )$/;"	f
second	src/pair.c	/^	void * second;$/;"	m	struct:pair_s	file:
second	tests/test_pair.c	/^int8_t const * const second = "second";$/;"	v
sid	src/daemon.c	/^pid_t pid, sid;$/;"	v
sig	src/events.h	/^	struct ev_signal	sig;$/;"	m	union:ev_data_u	typeref:struct:ev_data_u::ev_signal
sigchld	src/child.c	/^	evt_t			sigchld;		\/* the SIGCHILD signal event handler *\/$/;"	m	struct:child_process_s	file:
sigchld_cb	src/child.c	/^static evt_ret_t sigchld_cb( evt_loop_t * const el,$/;"	f	file:
signal_params	src/events.h	/^	} signal_params;$/;"	m	union:evt_params_u	typeref:struct:evt_params_u::__anon1
signum	src/events.h	/^		int signum;$/;"	m	struct:evt_params_u::__anon1
size	src/aiofd.c	/^	size_t size;$/;"	m	struct:aiofd_write_s	file:
size	src/btree.c	/^	uint_t				size;		\/* number of nodes in the tree *\/$/;"	m	struct:bt_s	file:
size	src/hashtable.h	/^	uint_t				size;;				\/* the size of the list array *\/$/;"	m	struct:ht_s
size	src/list.h	/^	uint_t			size;					\/* total number of allocated slots in list *\/$/;"	m	struct:list_s
size	tests/test_buffer.c	/^size_t const size = 5;$/;"	v
sock_state_s	tests/test_socket.c	/^typedef struct sock_state_s$/;"	s	file:
sock_state_t	tests/test_socket.c	/^} sock_state_t;$/;"	t	typeref:struct:sock_state_s	file:
socket	tests/test_all.c	/^SUITE( socket );$/;"	v
socket_accept	src/socket.c	/^socket_t * socket_accept( socket_t * const s,$/;"	f
socket_aiofd_error_fn	src/socket.c	/^static int socket_aiofd_error_fn( aiofd_t * const aiofd,$/;"	f	file:
socket_aiofd_read_fn	src/socket.c	/^static int socket_aiofd_read_fn( aiofd_t * const aiofd,$/;"	f	file:
socket_aiofd_write_fn	src/socket.c	/^static int socket_aiofd_write_fn( aiofd_t * const aiofd,$/;"	f	file:
socket_bind	src/socket.c	/^socket_ret_t socket_bind( socket_t * const s,$/;"	f
socket_connect	src/socket.c	/^socket_ret_t socket_connect( socket_t* const s, $/;"	f
socket_deinitialize	src/socket.c	/^static void socket_deinitialize( socket_t * const s )$/;"	f	file:
socket_delete	src/socket.c	/^void socket_delete( void * s )$/;"	f
socket_disconnect	src/socket.c	/^socket_ret_t socket_disconnect( socket_t* const s )$/;"	f
socket_do_tcp_bind	src/socket.c	/^static int socket_do_tcp_bind( socket_t * const s )$/;"	f	file:
socket_do_tcp_connect	src/socket.c	/^static int socket_do_tcp_connect( socket_t * const s )$/;"	f	file:
socket_do_unix_bind	src/socket.c	/^static int socket_do_unix_bind( socket_t * const s )$/;"	f	file:
socket_do_unix_connect	src/socket.c	/^static int socket_do_unix_connect( socket_t * const s )$/;"	f	file:
socket_flush	src/socket.c	/^socket_ret_t socket_flush( socket_t* const s )$/;"	f
socket_get_error	src/socket.c	/^static int socket_get_error( socket_t * const s, int * errval )$/;"	f	file:
socket_get_type	src/socket.c	/^socket_type_t socket_get_type( socket_t * const s )$/;"	f
socket_initialize	src/socket.c	/^static int socket_initialize( socket_t * const s,$/;"	f	file:
socket_is_bound	src/socket.c	/^int socket_is_bound( socket_t* const s )$/;"	f
socket_is_connected	src/socket.c	/^int socket_is_connected( socket_t* const s )$/;"	f
socket_listen	src/socket.c	/^socket_ret_t socket_listen( socket_t * const s, int const backlog )$/;"	f
socket_lookup_host	src/socket.c	/^static socket_ret_t socket_lookup_host( socket_t * const s, $/;"	f	file:
socket_new	src/socket.c	/^socket_t* socket_new( socket_type_t const type, $/;"	f
socket_ops_s	src/socket.h	/^typedef struct socket_ops_s $/;"	s
socket_ops_t	src/socket.h	/^} socket_ops_t;$/;"	t	typeref:struct:socket_ops_s
socket_read	src/socket.c	/^int32_t socket_read( socket_t* const s, $/;"	f
socket_ret_e	src/socket.h	/^typedef enum socket_ret_e$/;"	g
socket_ret_t	src/socket.h	/^} socket_ret_t;$/;"	t	typeref:enum:socket_ret_e
socket_s	src/socket.c	/^struct socket_s$/;"	s	file:
socket_t	src/socket.h	/^typedef struct socket_s socket_t;$/;"	t	typeref:struct:socket_s
socket_type_e	src/socket.h	/^typedef enum socket_type_e$/;"	g
socket_type_t	src/socket.h	/^} socket_type_t;$/;"	t	typeref:enum:socket_type_e
socket_write	src/socket.c	/^socket_ret_t socket_write( socket_t * const s,$/;"	f
socket_writev	src/socket.c	/^socket_ret_t socket_writev( socket_t * const s,$/;"	f
start_logging	src/log.c	/^log_t * start_logging( log_type_t type, int8_t const * const param, int append )$/;"	f
stop_logging	src/log.c	/^void stop_logging( log_t * log )$/;"	f
syslog_fns	src/log.c	/^static cookie_io_functions_t syslog_fns =$/;"	v	file:
syslog_writer	src/log.c	/^static ssize_t syslog_writer( void * cookie, char const * data, size_t leng )$/;"	f	file:
t_cdone	tests/test_socket.c	/^static int t_cdone = FALSE;$/;"	v	file:
t_client_connect_fn	tests/test_socket.c	/^static socket_ret_t t_client_connect_fn( socket_t * const s, void * user_data )$/;"	f	file:
t_client_disconnect_fn	tests/test_socket.c	/^static socket_ret_t t_client_disconnect_fn( socket_t * const s, void * user_data )$/;"	f	file:
t_client_error_fn	tests/test_socket.c	/^static socket_ret_t t_client_error_fn( socket_t * const s, int err, void * user_data )$/;"	f	file:
t_client_read_fn	tests/test_socket.c	/^static int32_t t_client_read_fn( socket_t * const s, size_t nread, void * user_data )$/;"	f	file:
t_client_write_fn	tests/test_socket.c	/^static int32_t t_client_write_fn( socket_t * const s, uint8_t const * const buffer, void * user_data )$/;"	f	file:
t_incoming_fn	tests/test_socket.c	/^static socket_ret_t t_incoming_fn( socket_t * const s, void * user_data )$/;"	f	file:
t_sclose	tests/test_socket.c	/^static int t_sclose = FALSE;$/;"	v	file:
t_sdone	tests/test_socket.c	/^static int t_sdone = FALSE;$/;"	v	file:
t_server_connect_fn	tests/test_socket.c	/^static socket_ret_t t_server_connect_fn( socket_t * const s, void * user_data )$/;"	f	file:
t_server_disconnect_fn	tests/test_socket.c	/^static socket_ret_t t_server_disconnect_fn( socket_t * const s, void * user_data )$/;"	f	file:
t_server_error_fn	tests/test_socket.c	/^static socket_ret_t t_server_error_fn( socket_t * const s, int err, void * user_data )$/;"	f	file:
t_server_read_fn	tests/test_socket.c	/^static int32_t t_server_read_fn( socket_t * const s, size_t nread, void * user_data )$/;"	f	file:
t_server_write_fn	tests/test_socket.c	/^static int32_t t_server_write_fn( socket_t * const s, uint8_t const * const buffer, void * user_data )$/;"	f	file:
test_aiofd_newdel	tests/test_aiofd.c	/^static void test_aiofd_newdel( void )$/;"	f	file:
test_bitset_clear_prereqs	tests/test_bitset.c	/^void test_bitset_clear_prereqs( void )$/;"	f
test_bitset_clearall	tests/test_bitset.c	/^void test_bitset_clearall( void )$/;"	f
test_bitset_clearall_prereqs	tests/test_bitset.c	/^void test_bitset_clearall_prereqs( void )$/;"	f
test_bitset_deinit_null	tests/test_bitset.c	/^void test_bitset_deinit_null( void )$/;"	f
test_bitset_deinit_prereqs	tests/test_bitset.c	/^void test_bitset_deinit_prereqs( void )$/;"	f
test_bitset_delete_null	tests/test_bitset.c	/^void test_bitset_delete_null( void )$/;"	f
test_bitset_fail_alloc	tests/test_bitset.c	/^void test_bitset_fail_alloc( void )$/;"	f
test_bitset_init_fail_alloc	tests/test_bitset.c	/^void test_bitset_init_fail_alloc( void )$/;"	f
test_bitset_init_null	tests/test_bitset.c	/^void test_bitset_init_null( void )$/;"	f
test_bitset_initdeinit	tests/test_bitset.c	/^void test_bitset_initdeinit( void )$/;"	f
test_bitset_maxsize	tests/test_bitset.c	/^void test_bitset_maxsize( void )$/;"	f
test_bitset_new_fail_init	tests/test_bitset.c	/^void test_bitset_new_fail_init( void )$/;"	f
test_bitset_newdel	tests/test_bitset.c	/^void test_bitset_newdel( void )$/;"	f
test_bitset_patternbitclears	tests/test_bitset.c	/^void test_bitset_patternbitclears( void )$/;"	f
test_bitset_patternbitflips	tests/test_bitset.c	/^void test_bitset_patternbitflips( void )$/;"	f
test_bitset_randombitflips	tests/test_bitset.c	/^void test_bitset_randombitflips( void )$/;"	f
test_bitset_set_prereqs	tests/test_bitset.c	/^void test_bitset_set_prereqs( void )$/;"	f
test_bitset_setall	tests/test_bitset.c	/^void test_bitset_setall( void )$/;"	f
test_bitset_setall_prereqs	tests/test_bitset.c	/^void test_bitset_setall_prereqs( void )$/;"	f
test_bitset_test_prereqs	tests/test_bitset.c	/^void test_bitset_test_prereqs( void )$/;"	f
test_bitset_zerosize	tests/test_bitset.c	/^void test_bitset_zerosize( void )$/;"	f
test_btree_iterator	tests/test_btree.c	/^void test_btree_iterator( void )$/;"	f
test_btree_newdel	tests/test_btree.c	/^void test_btree_newdel( void )$/;"	f
test_btree_random	tests/test_btree.c	/^void test_btree_random( void )$/;"	f
test_btree_random_default	tests/test_btree.c	/^void test_btree_random_default( void )$/;"	f
test_btree_random_duplicate	tests/test_btree.c	/^void test_btree_random_duplicate( void )$/;"	f
test_btree_random_dynamic	tests/test_btree.c	/^void test_btree_random_dynamic( void )$/;"	f
test_buffer_append	tests/test_buffer.c	/^static void test_buffer_append( void )$/;"	f	file:
test_buffer_append_prereqs	tests/test_buffer.c	/^static void test_buffer_append_prereqs( void )$/;"	f	file:
test_buffer_append_pwned	tests/test_buffer.c	/^static void test_buffer_append_pwned( void )$/;"	f	file:
test_buffer_deinit_fail	tests/test_buffer.c	/^static void test_buffer_deinit_fail( void )$/;"	f	file:
test_buffer_deinit_null	tests/test_buffer.c	/^static void test_buffer_deinit_null( void )$/;"	f	file:
test_buffer_delete_null	tests/test_buffer.c	/^static void test_buffer_delete_null( void )$/;"	f	file:
test_buffer_init_fail_alloc	tests/test_buffer.c	/^static void test_buffer_init_fail_alloc( void )$/;"	f	file:
test_buffer_init_null	tests/test_buffer.c	/^static void test_buffer_init_null( void )$/;"	f	file:
test_buffer_initdeinit	tests/test_buffer.c	/^static void test_buffer_initdeinit( void )$/;"	f	file:
test_buffer_initdeinit_pwned	tests/test_buffer.c	/^static void test_buffer_initdeinit_pwned( void )$/;"	f	file:
test_buffer_new_fail_alloc	tests/test_buffer.c	/^static void test_buffer_new_fail_alloc( void )$/;"	f	file:
test_buffer_new_fail_init	tests/test_buffer.c	/^static void test_buffer_new_fail_init( void )$/;"	f	file:
test_buffer_newdel	tests/test_buffer.c	/^static void test_buffer_newdel( void )$/;"	f	file:
test_buffer_newdel_pwned	tests/test_buffer.c	/^static void test_buffer_newdel_pwned( void )$/;"	f	file:
test_child_newdel	tests/test_child.c	/^static void test_child_newdel( void )$/;"	f	file:
test_child_newdel_fail_first_pipe	tests/test_child.c	/^static void test_child_newdel_fail_first_pipe( void )$/;"	f	file:
test_child_newdel_fail_fork	tests/test_child.c	/^static void test_child_newdel_fail_fork( void )$/;"	f	file:
test_child_newdel_fail_second_pipe	tests/test_child.c	/^static void test_child_newdel_fail_second_pipe( void )$/;"	f	file:
test_child_read	tests/test_child.c	/^static void test_child_read( void )$/;"	f	file:
test_child_wait	tests/test_child.c	/^static void test_child_wait( void )$/;"	f	file:
test_connect_fn	src/socket.c	/^static socket_ret_t test_connect_fn( socket_t * const s, void * user_data )$/;"	f	file:
test_connect_fn_ret	src/socket.c	/^socket_ret_t test_connect_fn_ret = SOCKET_OK;$/;"	v
test_error_fn	src/socket.c	/^static socket_ret_t test_error_fn( socket_t * const s, int err, void * user_data )$/;"	f	file:
test_error_fn_ret	src/socket.c	/^socket_ret_t test_error_fn_ret = SOCKET_OK;$/;"	v
test_hashtable_newdel	tests/test_hashtable.c	/^static void test_hashtable_newdel( void )$/;"	f	file:
test_hashtable_private_functions	src/hashtable.c	/^void test_hashtable_private_functions( void )$/;"	f
test_list_begin_null	tests/test_list.c	/^static void test_list_begin_null( void )$/;"	f	file:
test_list_clear	tests/test_list.c	/^static void test_list_clear( void )$/;"	f	file:
test_list_clear_dep_fails	tests/test_list.c	/^static void test_list_clear_dep_fails( void )$/;"	f	file:
test_list_clear_empty	tests/test_list.c	/^static void test_list_clear_empty( void )$/;"	f	file:
test_list_clear_null	tests/test_list.c	/^static void test_list_clear_null( void )$/;"	f	file:
test_list_deinit_null	tests/test_list.c	/^static void test_list_deinit_null( void )$/;"	f	file:
test_list_delete_null	tests/test_list.c	/^static void test_list_delete_null( void )$/;"	f	file:
test_list_dynamic_grow	tests/test_list.c	/^static void test_list_dynamic_grow( void )$/;"	f	file:
test_list_empty_iterator	tests/test_list.c	/^static void test_list_empty_iterator( void )$/;"	f	file:
test_list_end_null	tests/test_list.c	/^static void test_list_end_null( void )$/;"	f	file:
test_list_get_middle	tests/test_list.c	/^static void test_list_get_middle( void )$/;"	f	file:
test_list_get_prereqs	tests/test_list.c	/^static void test_list_get_prereqs( void )$/;"	f	file:
test_list_init_alloc_fail	tests/test_list.c	/^static void test_list_init_alloc_fail( void )$/;"	f	file:
test_list_init_grow_fail	tests/test_list.c	/^static void test_list_init_grow_fail( void )$/;"	f	file:
test_list_init_null	tests/test_list.c	/^static void test_list_init_null( void )$/;"	f	file:
test_list_initdeinit	tests/test_list.c	/^static void test_list_initdeinit( void )$/;"	f	file:
test_list_new_alloc_fail	tests/test_list.c	/^static void test_list_new_alloc_fail( void )$/;"	f	file:
test_list_new_grow_fail	tests/test_list.c	/^static void test_list_new_grow_fail( void )$/;"	f	file:
test_list_newdel	tests/test_list.c	/^static void test_list_newdel( void )$/;"	f	file:
test_list_next_null	tests/test_list.c	/^static void test_list_next_null( void )$/;"	f	file:
test_list_pop_head_static	tests/test_list.c	/^static void test_list_pop_head_static( void )$/;"	f	file:
test_list_pop_middle	tests/test_list.c	/^static void test_list_pop_middle( void )$/;"	f	file:
test_list_pop_prereqs	tests/test_list.c	/^static void test_list_pop_prereqs( void )$/;"	f	file:
test_list_pop_tail_static	tests/test_list.c	/^static void test_list_pop_tail_static( void )$/;"	f	file:
test_list_private_functions	src/list.c	/^void test_list_private_functions( void )$/;"	f
test_list_push_dynamic	tests/test_list.c	/^static void test_list_push_dynamic( void )$/;"	f	file:
test_list_push_fail	tests/test_list.c	/^static void test_list_push_fail( void )$/;"	f	file:
test_list_push_head	tests/test_list.c	/^static void test_list_push_head( void )$/;"	f	file:
test_list_push_head_1	tests/test_list.c	/^static void test_list_push_head_1( void )$/;"	f	file:
test_list_push_middle	tests/test_list.c	/^static void test_list_push_middle( void )$/;"	f	file:
test_list_push_null	tests/test_list.c	/^static void test_list_push_null( void )$/;"	f	file:
test_list_push_tail	tests/test_list.c	/^static void test_list_push_tail( void )$/;"	f	file:
test_list_push_tail_1	tests/test_list.c	/^static void test_list_push_tail_1( void )$/;"	f	file:
test_list_push_tail_small	tests/test_list.c	/^static void test_list_push_tail_small( void )$/;"	f	file:
test_list_push_zero_initial_size	tests/test_list.c	/^static void test_list_push_zero_initial_size( void )$/;"	f	file:
test_list_reserve_null	tests/test_list.c	/^static void test_list_reserve_null( void )$/;"	f	file:
test_list_rnext_null	tests/test_list.c	/^static void test_list_rnext_null( void )$/;"	f	file:
test_list_static_grow	tests/test_list.c	/^static void test_list_static_grow( void )$/;"	f	file:
test_list_tail_null	tests/test_list.c	/^static void test_list_tail_null( void )$/;"	f	file:
test_pair_accessor_prereqs	tests/test_pair.c	/^void test_pair_accessor_prereqs( void )$/;"	f
test_pair_delete_null	tests/test_pair.c	/^void test_pair_delete_null( void )$/;"	f
test_pair_fail_alloc	tests/test_pair.c	/^void test_pair_fail_alloc( void )$/;"	f
test_pair_newdel	tests/test_pair.c	/^void test_pair_newdel( void )$/;"	f
test_pair_nulls	tests/test_pair.c	/^void test_pair_nulls( void )$/;"	f
test_privileges_permanent_drop	tests/test_privileges.c	/^static void test_privileges_permanent_drop( void )$/;"	f	file:
test_privileges_temp_drop	tests/test_privileges.c	/^static void test_privileges_temp_drop( void )$/;"	f	file:
test_sanitize_closed_std_descriptors	tests/test_sanitize.c	/^static void test_sanitize_closed_std_descriptors( void )$/;"	f	file:
test_sanitize_environment	tests/test_sanitize.c	/^static void test_sanitize_environment( void )$/;"	f	file:
test_sanitize_environment_add	tests/test_sanitize.c	/^static void test_sanitize_environment_add( void )$/;"	f	file:
test_sanitize_environment_preserve	tests/test_sanitize.c	/^static void test_sanitize_environment_preserve( void )$/;"	f	file:
test_sanitize_open_files	tests/test_sanitize.c	/^static void test_sanitize_open_files( void )$/;"	f	file:
test_socket_bad_hostname	tests/test_socket.c	/^static void test_socket_bad_hostname( void )$/;"	f	file:
test_socket_delete_null	tests/test_socket.c	/^static void test_socket_delete_null( void )$/;"	f	file:
test_socket_disconnect	tests/test_socket.c	/^static void test_socket_disconnect( void )$/;"	f	file:
test_socket_flush	tests/test_socket.c	/^static void test_socket_flush( void )$/;"	f	file:
test_socket_get_type	tests/test_socket.c	/^static void test_socket_get_type( void )$/;"	f	file:
test_socket_new_fail_alloc	tests/test_socket.c	/^static void test_socket_new_fail_alloc( void )$/;"	f	file:
test_socket_new_fail_init	tests/test_socket.c	/^static void test_socket_new_fail_init( void )$/;"	f	file:
test_socket_newdel	tests/test_socket.c	/^static void test_socket_newdel( void )$/;"	f	file:
test_socket_private_functions	src/socket.c	/^void test_socket_private_functions( void )$/;"	f
test_socket_write	tests/test_socket.c	/^static void test_socket_write( void )$/;"	f	file:
test_socket_writev	tests/test_socket.c	/^static void test_socket_writev( void )$/;"	f	file:
test_tcp_socket	tests/test_socket.c	/^static void test_tcp_socket( void )$/;"	f	file:
test_tcp_socket_failed_connection	tests/test_socket.c	/^static void test_tcp_socket_failed_connection( void )$/;"	f	file:
test_unix_socket	tests/test_socket.c	/^static void test_unix_socket( void )$/;"	f	file:
trace	src/events.h	/^		int trace;	\/* 0 == only signal upon termination, 1 == also signal when stopped\/continued *\/$/;"	m	struct:evt_params_u::__anon2
tree	src/btree.c	/^	node_t*				tree;		\/* pointer to btree root *\/$/;"	m	struct:bt_s	file:
type	src/log.h	/^	log_type_t type;$/;"	m	struct:log_s
type	src/socket.c	/^	socket_type_t	type;			\/* type of socket *\/$/;"	m	struct:socket_s	file:
types	src/events.h	/^		evt_io_type_t types;$/;"	m	struct:evt_params_u::__anon3
uint_t	src/macros.h	/^typedef uint32_t uint_t;$/;"	t
uint_t	src/macros.h	/^typedef uint64_t uint_t;$/;"	t
used	src/list.c	/^	int_t	used;	\/* bool to mark used nodes *\/$/;"	m	struct:list_item_s	file:
used_head	src/list.h	/^	list_itr_t		used_head;				\/* head node of the used circular list *\/$/;"	m	struct:list_s
user_data	src/aiofd.h	/^	void *		user_data;		\/* context to pass to callbacks *\/$/;"	m	struct:aiofd_s
user_data	src/child.c	/^	void *			user_data;		\/* passed to ops callbacks *\/$/;"	m	struct:child_process_s	file:
user_data	src/events.h	/^	void *			user_data;$/;"	m	struct:evt_s
user_data	src/socket.c	/^	void *			user_data;		\/* passed to ops callbacks *\/$/;"	m	struct:socket_s	file:
val	src/btree.c	/^	void * val;					\/* value *\/$/;"	m	struct:node_s	file:
vdfn	src/btree.c	/^	bt_delete_fn		vdfn;		\/* value delete function *\/$/;"	m	struct:bt_s	file:
wbuf	src/aiofd.h	/^	list_t		wbuf;			\/* array of buffers waiting to be written *\/$/;"	m	struct:aiofd_s
wevt	src/aiofd.h	/^	evt_t		wevt;			\/* write event *\/$/;"	m	struct:aiofd_s
wfd	src/aiofd.h	/^	int			wfd;			\/* read\/write fd, if only one given, write-only otherwise *\/$/;"	m	struct:aiofd_s
write_fn	src/aiofd.h	/^		int (*write_fn)( aiofd_t * const aiofd, uint8_t const * const buffer, void * user_data );$/;"	m	struct:aiofd_s::aiofd_ops_s
write_fn	src/child.h	/^	int32_t (*write_fn)( child_process_t * const cp, uint8_t const * const buffer, void * user_data );$/;"	m	struct:child_ops_s
write_fn	src/socket.h	/^	int32_t (*write_fn)( socket_t * const s, uint8_t const * const buffer, void * user_data );$/;"	m	struct:socket_ops_s
write_fn	tests/test_aiofd.c	/^static int write_fn( aiofd_t * const aiofd, uint8_t const * const buffer, void * user_data )$/;"	f	file:
write_fn	tests/test_child.c	/^static int32_t write_fn( child_process_t * const cp, uint8_t const * const buffer, void * user_data )$/;"	f	file:
write_fn	tests/test_socket.c	/^static int32_t write_fn( socket_t * const s, uint8_t const * const buffer, void * user_data )$/;"	f	file:
write_pid_fn	tests/test_child.c	/^static int32_t write_pid_fn( child_process_t * const cp, uint8_t const * const buffer, void * user_data )$/;"	f	file:
writefn	src/log.c	/^typedef int (*writefn)(void *, const char *, int);$/;"	t	file:
x_cdone	tests/test_socket.c	/^static int x_cdone = FALSE;$/;"	v	file:
x_client_connect_fn	tests/test_socket.c	/^static socket_ret_t x_client_connect_fn( socket_t * const s, void * user_data )$/;"	f	file:
x_client_disconnect_fn	tests/test_socket.c	/^static socket_ret_t x_client_disconnect_fn( socket_t * const s, void * user_data )$/;"	f	file:
x_client_error_fn	tests/test_socket.c	/^static socket_ret_t x_client_error_fn( socket_t * const s, int err, void * user_data )$/;"	f	file:
x_client_read_fn	tests/test_socket.c	/^static int32_t x_client_read_fn( socket_t * const s, size_t nread, void * user_data )$/;"	f	file:
x_client_write_fn	tests/test_socket.c	/^static int32_t x_client_write_fn( socket_t * const s, uint8_t const * const buffer, void * user_data )$/;"	f	file:
x_incoming_fn	tests/test_socket.c	/^static socket_ret_t x_incoming_fn( socket_t * const s, void * user_data )$/;"	f	file:
x_sclose	tests/test_socket.c	/^static int x_sclose = FALSE;$/;"	v	file:
x_sdone	tests/test_socket.c	/^static int x_sdone = FALSE;$/;"	v	file:
x_server_connect_fn	tests/test_socket.c	/^static socket_ret_t x_server_connect_fn( socket_t * const s, void * user_data )$/;"	f	file:
x_server_disconnect_fn	tests/test_socket.c	/^static socket_ret_t x_server_disconnect_fn( socket_t * const s, void * user_data )$/;"	f	file:
x_server_error_fn	tests/test_socket.c	/^static socket_ret_t x_server_error_fn( socket_t * const s, int err, void * user_data )$/;"	f	file:
x_server_read_fn	tests/test_socket.c	/^static int32_t x_server_read_fn( socket_t * const s, size_t nread, void * user_data )$/;"	f	file:
x_server_write_fn	tests/test_socket.c	/^static int32_t x_server_write_fn( socket_t * const s, uint8_t const * const buffer, void * user_data )$/;"	f	file:
