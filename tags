!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
1	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/bitset.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/btree.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/buffer.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/child.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/events.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/list.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/pair.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/privileges.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/sanitize.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1	coverage/cutil/src/socket.c.gcov.html	/^<a name="1"><span class="lineNum">       1 <\/span>                :            : \/*<\/a>$/;"	a
1002	coverage/cutil/src/btree.c.gcov.html	/^<a name="1002"><span class="lineNum">    1002 <\/span>                :            : }<\/a>$/;"	a
1004	coverage/cutil/src/socket.c.gcov.html	/^<a name="1004"><span class="lineNum">    1004 <\/span>                :            : <\/a>$/;"	a
1014	coverage/cutil/src/socket.c.gcov.html	/^<a name="1014"><span class="lineNum">    1014 <\/span>                :            : <\/a>$/;"	a
1018	coverage/cutil/src/btree.c.gcov.html	/^<a name="1018"><span class="lineNum">    1018 <\/span>                :            : }<\/a>$/;"	a
102	coverage/cutil/src/sanitize.c.gcov.html	/^<a name="102"><span class="lineNum">     102 <\/span>                :            : }<\/a>$/;"	a
102	coverage/cutil/src/socket.c.gcov.html	/^<a name="102"><span class="lineNum">     102 <\/span>                :            :                                      void * per_write_data );<\/a>$/;"	a
1029	coverage/cutil/src/btree.c.gcov.html	/^<a name="1029"><span class="lineNum">    1029 <\/span>                :            : static const bt_itr_t itr_end = NULL;<\/a>$/;"	a
103	coverage/cutil/src/bitset.c.gcov.html	/^<a name="103"><span class="lineNum">     103 <\/span>                :            : }<\/a>$/;"	a
1037	coverage/cutil/src/btree.c.gcov.html	/^<a name="1037"><span class="lineNum">    1037 <\/span>                :            : <\/a>$/;"	a
1048	coverage/cutil/src/btree.c.gcov.html	/^<a name="1048"><span class="lineNum">    1048 <\/span>                :            : <\/a>$/;"	a
1054	coverage/cutil/src/btree.c.gcov.html	/^<a name="1054"><span class="lineNum">    1054 <\/span>                :            : <\/a>$/;"	a
1062	coverage/cutil/src/btree.c.gcov.html	/^<a name="1062"><span class="lineNum">    1062 <\/span>                :            : <\/a>$/;"	a
1073	coverage/cutil/src/btree.c.gcov.html	/^<a name="1073"><span class="lineNum">    1073 <\/span>                :            : <\/a>$/;"	a
1079	coverage/cutil/src/btree.c.gcov.html	/^<a name="1079"><span class="lineNum">    1079 <\/span>                :            : <\/a>$/;"	a
1088	coverage/cutil/src/btree.c.gcov.html	/^<a name="1088"><span class="lineNum">    1088 <\/span>                :            : }<\/a>$/;"	a
109	coverage/cutil/src/btree.c.gcov.html	/^<a name="109"><span class="lineNum">     109 <\/span>                :            : }<\/a>$/;"	a
109	coverage/cutil/src/buffer.c.gcov.html	/^<a name="109"><span class="lineNum">     109 <\/span>                :            : }<\/a>$/;"	a
1093	coverage/cutil/src/socket.c.gcov.html	/^<a name="1093"><span class="lineNum">    1093 <\/span>                :            : }<\/a>$/;"	a
1101	coverage/cutil/src/btree.c.gcov.html	/^<a name="1101"><span class="lineNum">    1101 <\/span>                :            : #include &lt;CUnit\/Basic.h&gt;<\/a>$/;"	a
1123	coverage/cutil/src/socket.c.gcov.html	/^<a name="1123"><span class="lineNum">    1123 <\/span>                :            : }<\/a>$/;"	a
1129	coverage/cutil/src/socket.c.gcov.html	/^<a name="1129"><span class="lineNum">    1129 <\/span>                :            : }<\/a>$/;"	a
116	coverage/cutil/src/bitset.c.gcov.html	/^<a name="116"><span class="lineNum">     116 <\/span>                :            : }<\/a>$/;"	a
116	coverage/cutil/src/events.c.gcov.html	/^<a name="116"><span class="lineNum">     116 <\/span>                :            : }<\/a>$/;"	a
119	coverage/cutil/src/btree.c.gcov.html	/^<a name="119"><span class="lineNum">     119 <\/span>                :            : }<\/a>$/;"	a
121	coverage/cutil/src/child.c.gcov.html	/^<a name="121"><span class="lineNum">     121 <\/span>                :            : <\/a>$/;"	a
122	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="122"><span class="lineNum">     122 <\/span>                :            : <\/a>$/;"	a
123	coverage/cutil/src/privileges.c.gcov.html	/^<a name="123"><span class="lineNum">     123 <\/span>                :            : #include &lt;CUnit\/Basic.h&gt;<\/a>$/;"	a
1241	coverage/cutil/src/socket.c.gcov.html	/^<a name="1241"><span class="lineNum">    1241 <\/span>                :            : }<\/a>$/;"	a
1272	coverage/cutil/src/socket.c.gcov.html	/^<a name="1272"><span class="lineNum">    1272 <\/span>                :            : }<\/a>$/;"	a
1278	coverage/cutil/src/socket.c.gcov.html	/^<a name="1278"><span class="lineNum">    1278 <\/span>                :            : }<\/a>$/;"	a
1293	coverage/cutil/src/socket.c.gcov.html	/^<a name="1293"><span class="lineNum">    1293 <\/span>                :            : }<\/a>$/;"	a
1308	coverage/cutil/src/socket.c.gcov.html	/^<a name="1308"><span class="lineNum">    1308 <\/span>                :            : }<\/a>$/;"	a
132	coverage/cutil/src/list.c.gcov.html	/^<a name="132"><span class="lineNum">     132 <\/span>                :            : }<\/a>$/;"	a
1325	coverage/cutil/src/socket.c.gcov.html	/^<a name="1325"><span class="lineNum">    1325 <\/span>                :            : }<\/a>$/;"	a
133	coverage/cutil/src/bitset.c.gcov.html	/^<a name="133"><span class="lineNum">     133 <\/span>                :            : #include &lt;CUnit\/Basic.h&gt;<\/a>$/;"	a
134	coverage/cutil/src/btree.c.gcov.html	/^<a name="134"><span class="lineNum">     134 <\/span>                :            : <\/a>$/;"	a
1342	coverage/cutil/src/socket.c.gcov.html	/^<a name="1342"><span class="lineNum">    1342 <\/span>                :            : }<\/a>$/;"	a
1355	coverage/cutil/src/socket.c.gcov.html	/^<a name="1355"><span class="lineNum">    1355 <\/span>                :            : }<\/a>$/;"	a
1368	coverage/cutil/src/socket.c.gcov.html	/^<a name="1368"><span class="lineNum">    1368 <\/span>                :            : }<\/a>$/;"	a
138	coverage/cutil/src/sanitize.c.gcov.html	/^<a name="138"><span class="lineNum">     138 <\/span>                :            : };<\/a>$/;"	a
139	coverage/cutil/src/child.c.gcov.html	/^<a name="139"><span class="lineNum">     139 <\/span>                :            : <\/a>$/;"	a
139	coverage/cutil/src/events.c.gcov.html	/^<a name="139"><span class="lineNum">     139 <\/span>                :            : }<\/a>$/;"	a
1392	coverage/cutil/src/socket.c.gcov.html	/^<a name="1392"><span class="lineNum">    1392 <\/span>                :            : }<\/a>$/;"	a
140	coverage/cutil/src/list.c.gcov.html	/^<a name="140"><span class="lineNum">     140 <\/span>                :            : }<\/a>$/;"	a
1417	coverage/cutil/src/socket.c.gcov.html	/^<a name="1417"><span class="lineNum">    1417 <\/span>                :            : <\/a>$/;"	a
142	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="142"><span class="lineNum">     142 <\/span>                :            : }<\/a>$/;"	a
1430	coverage/cutil/src/socket.c.gcov.html	/^<a name="1430"><span class="lineNum">    1430 <\/span>                :            : socket_ret_t test_connect_fn_ret = SOCKET_OK;<\/a>$/;"	a
1436	coverage/cutil/src/socket.c.gcov.html	/^<a name="1436"><span class="lineNum">    1436 <\/span>                :            : }<\/a>$/;"	a
1442	coverage/cutil/src/socket.c.gcov.html	/^<a name="1442"><span class="lineNum">    1442 <\/span>                :            : }<\/a>$/;"	a
145	coverage/cutil/src/buffer.c.gcov.html	/^<a name="145"><span class="lineNum">     145 <\/span>                :            : #include &lt;CUnit\/Basic.h&gt;<\/a>$/;"	a
148	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="148"><span class="lineNum">     148 <\/span>                :            : }<\/a>$/;"	a
152	coverage/cutil/src/list.c.gcov.html	/^<a name="152"><span class="lineNum">     152 <\/span>                :            : }<\/a>$/;"	a
153	coverage/cutil/src/events.c.gcov.html	/^<a name="153"><span class="lineNum">     153 <\/span>                :            : }<\/a>$/;"	a
154	coverage/cutil/src/socket.c.gcov.html	/^<a name="154"><span class="lineNum">     154 <\/span>                :            : }<\/a>$/;"	a
162	coverage/cutil/src/child.c.gcov.html	/^<a name="162"><span class="lineNum">     162 <\/span>                :            : <\/a>$/;"	a
164	coverage/cutil/src/events.c.gcov.html	/^<a name="164"><span class="lineNum">     164 <\/span>                :            : <\/a>$/;"	a
167	coverage/cutil/src/list.c.gcov.html	/^<a name="167"><span class="lineNum">     167 <\/span>                :            : }<\/a>$/;"	a
169	coverage/cutil/src/socket.c.gcov.html	/^<a name="169"><span class="lineNum">     169 <\/span>                :            : }<\/a>$/;"	a
173	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="173"><span class="lineNum">     173 <\/span>                :            : }<\/a>$/;"	a
174	coverage/cutil/src/list.c.gcov.html	/^<a name="174"><span class="lineNum">     174 <\/span>                :            : }<\/a>$/;"	a
177	coverage/cutil/src/btree.c.gcov.html	/^<a name="177"><span class="lineNum">     177 <\/span>                :            : \/* NOTE: If NULL is passed in for the bt_key_cmp_fn function, the default<\/a>$/;"	a
179	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="179"><span class="lineNum">     179 <\/span>                :            : <\/a>$/;"	a
179	coverage/cutil/src/list.c.gcov.html	/^<a name="179"><span class="lineNum">     179 <\/span>                :            : }<\/a>$/;"	a
182	coverage/cutil/src/socket.c.gcov.html	/^<a name="182"><span class="lineNum">     182 <\/span>                :            : }<\/a>$/;"	a
188	coverage/cutil/src/list.c.gcov.html	/^<a name="188"><span class="lineNum">     188 <\/span>                :            : }<\/a>$/;"	a
189	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="189"><span class="lineNum">     189 <\/span>                :            : }<\/a>$/;"	a
200	coverage/cutil/src/btree.c.gcov.html	/^<a name="200"><span class="lineNum">     200 <\/span>                :            : <\/a>$/;"	a
200	coverage/cutil/src/list.c.gcov.html	/^<a name="200"><span class="lineNum">     200 <\/span>                :            : }<\/a>$/;"	a
212	coverage/cutil/src/list.c.gcov.html	/^<a name="212"><span class="lineNum">     212 <\/span>                :            : }<\/a>$/;"	a
216	coverage/cutil/src/child.c.gcov.html	/^<a name="216"><span class="lineNum">     216 <\/span>                :            : #define PIPE_WRITE_IDX   (1)<\/a>$/;"	a
217	coverage/cutil/src/socket.c.gcov.html	/^<a name="217"><span class="lineNum">     217 <\/span>                :            : }<\/a>$/;"	a
218	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="218"><span class="lineNum">     218 <\/span>                :            : }<\/a>$/;"	a
226	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="226"><span class="lineNum">     226 <\/span>                :            : <\/a>$/;"	a
234	coverage/cutil/src/socket.c.gcov.html	/^<a name="234"><span class="lineNum">     234 <\/span>                :            : }<\/a>$/;"	a
235	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="235"><span class="lineNum">     235 <\/span>                :            : }<\/a>$/;"	a
236	coverage/cutil/src/btree.c.gcov.html	/^<a name="236"><span class="lineNum">     236 <\/span>                :            : <\/a>$/;"	a
243	coverage/cutil/src/events.c.gcov.html	/^<a name="243"><span class="lineNum">     243 <\/span>                :            : <\/a>$/;"	a
244	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="244"><span class="lineNum">     244 <\/span>                :            : }<\/a>$/;"	a
248	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="248"><span class="lineNum">     248 <\/span>                :            : }<\/a>$/;"	a
250	coverage/cutil/src/btree.c.gcov.html	/^<a name="250"><span class="lineNum">     250 <\/span>                :            : <\/a>$/;"	a
253	coverage/cutil/src/sanitize.c.gcov.html	/^<a name="253"><span class="lineNum">     253 <\/span>                :            : #include &lt;CUnit\/Basic.h&gt;<\/a>$/;"	a
257	coverage/cutil/src/btree.c.gcov.html	/^<a name="257"><span class="lineNum">     257 <\/span>                :            : }<\/a>$/;"	a
257	coverage/cutil/src/sanitize.c.gcov.html	/^<a name="257"><span class="lineNum">     257 <\/span>                :<span class="lineCov">          1 : }<\/span><\/a>$/;"	a
258	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="258"><span class="lineNum">     258 <\/span>                :            : }<\/a>$/;"	a
262	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="262"><span class="lineNum">     262 <\/span>                :            : }<\/a>$/;"	a
263	coverage/cutil/src/events.c.gcov.html	/^<a name="263"><span class="lineNum">     263 <\/span>                :            : }<\/a>$/;"	a
267	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="267"><span class="lineNum">     267 <\/span>                :            : }<\/a>$/;"	a
268	coverage/cutil/src/btree.c.gcov.html	/^<a name="268"><span class="lineNum">     268 <\/span>                :            : }<\/a>$/;"	a
27	coverage/cutil/src/bitset.c.gcov.html	/^<a name="27"><span class="lineNum">      27 <\/span>                :            : #define BIT(x) ((uint32_t)(1 &lt;&lt; (x &amp; 0x1f)))<\/a>$/;"	a
288	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="288"><span class="lineNum">     288 <\/span>                :            : }<\/a>$/;"	a
29	coverage/cutil/src/pair.c.gcov.html	/^<a name="29"><span class="lineNum">      29 <\/span>                :            : };<\/a>$/;"	a
304	coverage/cutil/src/list.c.gcov.html	/^<a name="304"><span class="lineNum">     304 <\/span>                :            : }<\/a>$/;"	a
31	coverage/cutil/src/buffer.c.gcov.html	/^<a name="31"><span class="lineNum">      31 <\/span>                :            :  *\/<\/a>$/;"	a
314	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="314"><span class="lineNum">     314 <\/span>                :            : }<\/a>$/;"	a
319	coverage/cutil/src/events.c.gcov.html	/^<a name="319"><span class="lineNum">     319 <\/span>                :<span class="lineCov">        840 : }<\/span><\/a>$/;"	a
329	coverage/cutil/src/socket.c.gcov.html	/^<a name="329"><span class="lineNum">     329 <\/span>                :            : }<\/a>$/;"	a
33	coverage/cutil/src/events.c.gcov.html	/^<a name="33"><span class="lineNum">      33 <\/span>                :            : <\/a>$/;"	a
330	coverage/cutil/src/events.c.gcov.html	/^<a name="330"><span class="lineNum">     330 <\/span>                :            : };<\/a>$/;"	a
336	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="336"><span class="lineNum">     336 <\/span>                :            : }<\/a>$/;"	a
336	coverage/cutil/src/btree.c.gcov.html	/^<a name="336"><span class="lineNum">     336 <\/span>                :            : }<\/a>$/;"	a
34	coverage/cutil/src/privileges.c.gcov.html	/^<a name="34"><span class="lineNum">      34 <\/span>                :            :  *\/<\/a>$/;"	a
343	coverage/cutil/src/list.c.gcov.html	/^<a name="343"><span class="lineNum">     343 <\/span>                :            : }<\/a>$/;"	a
344	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="344"><span class="lineNum">     344 <\/span>                :            : \/********** PRIVATE **********\/<\/a>$/;"	a
345	coverage/cutil/src/child.c.gcov.html	/^<a name="345"><span class="lineNum">     345 <\/span>                :            : }<\/a>$/;"	a
348	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="348"><span class="lineNum">     348 <\/span>                :<span class="lineCov">        416 : }<\/span><\/a>$/;"	a
360	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="360"><span class="lineNum">     360 <\/span>                :            : }<\/a>$/;"	a
361	coverage/cutil/src/list.c.gcov.html	/^<a name="361"><span class="lineNum">     361 <\/span>                :            : \/* removes the item at index &quot;itr&quot; and returns the iterator of the<\/a>$/;"	a
363	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="363"><span class="lineNum">     363 <\/span>                :            : }<\/a>$/;"	a
370	coverage/cutil/src/events.c.gcov.html	/^<a name="370"><span class="lineNum">     370 <\/span>                :            : }<\/a>$/;"	a
375	coverage/cutil/src/child.c.gcov.html	/^<a name="375"><span class="lineNum">     375 <\/span>                :            : }<\/a>$/;"	a
382	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="382"><span class="lineNum">     382 <\/span>                :            : }<\/a>$/;"	a
385	coverage/cutil/src/list.c.gcov.html	/^<a name="385"><span class="lineNum">     385 <\/span>                :            : \/* inserts the item at index &quot;item&quot; before the item at &quot;itr&quot; and returns<\/a>$/;"	a
39	coverage/cutil/src/pair.c.gcov.html	/^<a name="39"><span class="lineNum">      39 <\/span>                :            : }<\/a>$/;"	a
398	coverage/cutil/src/child.c.gcov.html	/^<a name="398"><span class="lineNum">     398 <\/span>                :            : }<\/a>$/;"	a
405	coverage/cutil/src/btree.c.gcov.html	/^<a name="405"><span class="lineNum">     405 <\/span>                :            : }<\/a>$/;"	a
409	coverage/cutil/src/child.c.gcov.html	/^<a name="409"><span class="lineNum">     409 <\/span>                :            : }<\/a>$/;"	a
409	coverage/cutil/src/events.c.gcov.html	/^<a name="409"><span class="lineNum">     409 <\/span>                :            : <\/a>$/;"	a
409	coverage/cutil/src/list.c.gcov.html	/^<a name="409"><span class="lineNum">     409 <\/span>                :            : }<\/a>$/;"	a
415	coverage/cutil/src/child.c.gcov.html	/^<a name="415"><span class="lineNum">     415 <\/span>                :            : }<\/a>$/;"	a
418	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="418"><span class="lineNum">     418 <\/span>                :            : }<\/a>$/;"	a
419	coverage/cutil/src/events.c.gcov.html	/^<a name="419"><span class="lineNum">     419 <\/span>                :            : }<\/a>$/;"	a
42	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="42"><span class="lineNum">      42 <\/span>                :            : } aiofd_write_t;<\/a>$/;"	a
42	coverage/cutil/src/sanitize.c.gcov.html	/^<a name="42"><span class="lineNum">      42 <\/span>                :            : #endif<\/a>$/;"	a
425	coverage/cutil/src/child.c.gcov.html	/^<a name="425"><span class="lineNum">     425 <\/span>                :            : }<\/a>$/;"	a
425	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="425"><span class="lineNum">     425 <\/span>                :            : #include &lt;CUnit\/Basic.h&gt;<\/a>$/;"	a
425	coverage/cutil/src/socket.c.gcov.html	/^<a name="425"><span class="lineNum">     425 <\/span>                :            : }<\/a>$/;"	a
432	coverage/cutil/src/events.c.gcov.html	/^<a name="432"><span class="lineNum">     432 <\/span>                :            : }<\/a>$/;"	a
433	coverage/cutil/src/child.c.gcov.html	/^<a name="433"><span class="lineNum">     433 <\/span>                :            : }<\/a>$/;"	a
44	coverage/cutil/src/bitset.c.gcov.html	/^<a name="44"><span class="lineNum">      44 <\/span>                :            : }<\/a>$/;"	a
443	coverage/cutil/src/child.c.gcov.html	/^<a name="443"><span class="lineNum">     443 <\/span>                :            : }<\/a>$/;"	a
451	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="451"><span class="lineNum">     451 <\/span>                :            : <\/a>$/;"	a
453	coverage/cutil/src/child.c.gcov.html	/^<a name="453"><span class="lineNum">     453 <\/span>                :            : }<\/a>$/;"	a
453	coverage/cutil/src/events.c.gcov.html	/^<a name="453"><span class="lineNum">     453 <\/span>                :            : }<\/a>$/;"	a
465	coverage/cutil/src/child.c.gcov.html	/^<a name="465"><span class="lineNum">     465 <\/span>                :            : static int_t test_flag = FALSE;<\/a>$/;"	a
47	coverage/cutil/src/pair.c.gcov.html	/^<a name="47"><span class="lineNum">      47 <\/span>                :            : }<\/a>$/;"	a
471	coverage/cutil/src/child.c.gcov.html	/^<a name="471"><span class="lineNum">     471 <\/span>                :            : }<\/a>$/;"	a
477	coverage/cutil/src/child.c.gcov.html	/^<a name="477"><span class="lineNum">     477 <\/span>                :            : }<\/a>$/;"	a
48	coverage/cutil/src/buffer.c.gcov.html	/^<a name="48"><span class="lineNum">      48 <\/span>                :            : }<\/a>$/;"	a
480	coverage/cutil/src/events.c.gcov.html	/^<a name="480"><span class="lineNum">     480 <\/span>                :            : static int_t test_flag = FALSE;<\/a>$/;"	a
483	coverage/cutil/src/child.c.gcov.html	/^<a name="483"><span class="lineNum">     483 <\/span>                :            : }<\/a>$/;"	a
483	coverage/cutil/src/list.c.gcov.html	/^<a name="483"><span class="lineNum">     483 <\/span>                :            : #include &lt;CUnit\/Basic.h&gt;<\/a>$/;"	a
485	coverage/cutil/src/events.c.gcov.html	/^<a name="485"><span class="lineNum">     485 <\/span>                :<span class="lineCov">          3 : }<\/span><\/a>$/;"	a
490	coverage/cutil/src/child.c.gcov.html	/^<a name="490"><span class="lineNum">     490 <\/span>                :            : <\/a>$/;"	a
490	coverage/cutil/src/socket.c.gcov.html	/^<a name="490"><span class="lineNum">     490 <\/span>                :            : }<\/a>$/;"	a
50	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="50"><span class="lineNum">      50 <\/span>                :            : }<\/a>$/;"	a
501	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="501"><span class="lineNum">     501 <\/span>                :            : }<\/a>$/;"	a
506	coverage/cutil/src/events.c.gcov.html	/^<a name="506"><span class="lineNum">     506 <\/span>                :<span class="lineCov">          1 : }<\/span><\/a>$/;"	a
510	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="510"><span class="lineNum">     510 <\/span>                :            : }<\/a>$/;"	a
513	coverage/cutil/src/socket.c.gcov.html	/^<a name="513"><span class="lineNum">     513 <\/span>                :            : <\/a>$/;"	a
515	coverage/cutil/src/child.c.gcov.html	/^<a name="515"><span class="lineNum">     515 <\/span>                :<span class="lineCov">          1 : }<\/span><\/a>$/;"	a
519	coverage/cutil/src/btree.c.gcov.html	/^<a name="519"><span class="lineNum">     519 <\/span>                :            : }<\/a>$/;"	a
52	coverage/cutil/src/bitset.c.gcov.html	/^<a name="52"><span class="lineNum">      52 <\/span>                :            : }<\/a>$/;"	a
527	coverage/cutil/src/events.c.gcov.html	/^<a name="527"><span class="lineNum">     527 <\/span>                :<span class="lineCov">          1 : }<\/span><\/a>$/;"	a
529	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="529"><span class="lineNum">     529 <\/span>                :            : }<\/a>$/;"	a
53	coverage/cutil/src/list.c.gcov.html	/^<a name="53"><span class="lineNum">      53 <\/span>                :            : \/********** PUBLIC **********\/<\/a>$/;"	a
53	coverage/cutil/src/pair.c.gcov.html	/^<a name="53"><span class="lineNum">      53 <\/span>                :            : }<\/a>$/;"	a
541	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="541"><span class="lineNum">     541 <\/span>                :            : }<\/a>$/;"	a
543	coverage/cutil/src/child.c.gcov.html	/^<a name="543"><span class="lineNum">     543 <\/span>                :<span class="lineCov">          1 : }<\/span><\/a>$/;"	a
548	coverage/cutil/src/events.c.gcov.html	/^<a name="548"><span class="lineNum">     548 <\/span>                :<span class="lineCov">          1 : }<\/span><\/a>$/;"	a
55	coverage/cutil/src/child.c.gcov.html	/^<a name="55"><span class="lineNum">      55 <\/span>                :            : <\/a>$/;"	a
550	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="550"><span class="lineNum">     550 <\/span>                :            : }<\/a>$/;"	a
554	coverage/cutil/src/events.c.gcov.html	/^<a name="554"><span class="lineNum">     554 <\/span>                :            : <\/a>$/;"	a
556	coverage/cutil/src/child.c.gcov.html	/^<a name="556"><span class="lineNum">     556 <\/span>                :<span class="lineCov">          1 : }<\/span><\/a>$/;"	a
56	coverage/cutil/src/buffer.c.gcov.html	/^<a name="56"><span class="lineNum">      56 <\/span>                :            : }<\/a>$/;"	a
570	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="570"><span class="lineNum">     570 <\/span>                :            : static int_t error_callback_ret = TRUE;<\/a>$/;"	a
571	coverage/cutil/src/socket.c.gcov.html	/^<a name="571"><span class="lineNum">     571 <\/span>                :            : }<\/a>$/;"	a
576	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="576"><span class="lineNum">     576 <\/span>                :            : }<\/a>$/;"	a
576	coverage/cutil/src/child.c.gcov.html	/^<a name="576"><span class="lineNum">     576 <\/span>                :<span class="lineCov">          1 : }<\/span><\/a>$/;"	a
58	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="58"><span class="lineNum">      58 <\/span>                :            : }<\/a>$/;"	a
582	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="582"><span class="lineNum">     582 <\/span>                :            : }<\/a>$/;"	a
588	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="588"><span class="lineNum">     588 <\/span>                :            : }<\/a>$/;"	a
60	coverage/cutil/src/events.c.gcov.html	/^<a name="60"><span class="lineNum">      60 <\/span>                :            : <\/a>$/;"	a
61	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="61"><span class="lineNum">      61 <\/span>                :            : <\/a>$/;"	a
63	coverage/cutil/src/pair.c.gcov.html	/^<a name="63"><span class="lineNum">      63 <\/span>                :            : #include &lt;CUnit\/Basic.h&gt;<\/a>$/;"	a
634	coverage/cutil/src/btree.c.gcov.html	/^<a name="634"><span class="lineNum">     634 <\/span>                :            : <\/a>$/;"	a
64	coverage/cutil/src/sanitize.c.gcov.html	/^<a name="64"><span class="lineNum">      64 <\/span>                :            : }<\/a>$/;"	a
65	coverage/cutil/src/list.c.gcov.html	/^<a name="65"><span class="lineNum">      65 <\/span>                :            : }<\/a>$/;"	a
67	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="67"><span class="lineNum">      67 <\/span>                :            : }<\/a>$/;"	a
67	coverage/cutil/src/bitset.c.gcov.html	/^<a name="67"><span class="lineNum">      67 <\/span>                :            : }<\/a>$/;"	a
68	coverage/cutil/src/btree.c.gcov.html	/^<a name="68"><span class="lineNum">      68 <\/span>                :            : <\/a>$/;"	a
703	coverage/cutil/src/socket.c.gcov.html	/^<a name="703"><span class="lineNum">     703 <\/span>                :            : }<\/a>$/;"	a
716	coverage/cutil/src/btree.c.gcov.html	/^<a name="716"><span class="lineNum">     716 <\/span>                :            : <\/a>$/;"	a
72	coverage/cutil/src/list.c.gcov.html	/^<a name="72"><span class="lineNum">      72 <\/span>                :            : }<\/a>$/;"	a
720	coverage/cutil/src/socket.c.gcov.html	/^<a name="720"><span class="lineNum">     720 <\/span>                :            : }<\/a>$/;"	a
737	coverage/cutil/src/socket.c.gcov.html	/^<a name="737"><span class="lineNum">     737 <\/span>                :            : }<\/a>$/;"	a
77	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="77"><span class="lineNum">      77 <\/span>                :            : <\/a>$/;"	a
77	coverage/cutil/src/btree.c.gcov.html	/^<a name="77"><span class="lineNum">      77 <\/span>                :            : }<\/a>$/;"	a
774	coverage/cutil/src/socket.c.gcov.html	/^<a name="774"><span class="lineNum">     774 <\/span>                :            : }<\/a>$/;"	a
791	coverage/cutil/src/socket.c.gcov.html	/^<a name="791"><span class="lineNum">     791 <\/span>                :            : }<\/a>$/;"	a
793	coverage/cutil/src/btree.c.gcov.html	/^<a name="793"><span class="lineNum">     793 <\/span>                :            : \/* NOTE: if the number of values stored in the table will exceed a load <\/a>$/;"	a
80	coverage/cutil/src/bitset.c.gcov.html	/^<a name="80"><span class="lineNum">      80 <\/span>                :            : }<\/a>$/;"	a
807	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="807"><span class="lineNum">     807 <\/span>                :<span class="lineCov">          1 : }<\/span><\/a>$/;"	a
814	coverage/cutil/src/btree.c.gcov.html	/^<a name="814"><span class="lineNum">     814 <\/span>                :            : <\/a>$/;"	a
82	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="82"><span class="lineNum">      82 <\/span>                :            : <\/a>$/;"	a
821	coverage/cutil/src/socket.c.gcov.html	/^<a name="821"><span class="lineNum">     821 <\/span>                :            : }<\/a>$/;"	a
83	coverage/cutil/src/child.c.gcov.html	/^<a name="83"><span class="lineNum">      83 <\/span>                :            : <\/a>$/;"	a
840	coverage/cutil/src/btree.c.gcov.html	/^<a name="840"><span class="lineNum">     840 <\/span>                :            : }<\/a>$/;"	a
852	coverage/cutil/src/btree.c.gcov.html	/^<a name="852"><span class="lineNum">     852 <\/span>                :            : }<\/a>$/;"	a
862	coverage/cutil/src/socket.c.gcov.html	/^<a name="862"><span class="lineNum">     862 <\/span>                :            : }<\/a>$/;"	a
865	coverage/cutil/src/btree.c.gcov.html	/^<a name="865"><span class="lineNum">     865 <\/span>                :            : <\/a>$/;"	a
878	coverage/cutil/src/btree.c.gcov.html	/^<a name="878"><span class="lineNum">     878 <\/span>                :            : }<\/a>$/;"	a
88	coverage/cutil/src/bitset.c.gcov.html	/^<a name="88"><span class="lineNum">      88 <\/span>                :            : }<\/a>$/;"	a
885	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="885"><span class="lineNum">     885 <\/span>                :<span class="lineCov">          1 : }<\/span><\/a>$/;"	a
89	coverage/cutil/src/events.c.gcov.html	/^<a name="89"><span class="lineNum">      89 <\/span>                :            : <\/a>$/;"	a
892	coverage/cutil/src/socket.c.gcov.html	/^<a name="892"><span class="lineNum">     892 <\/span>                :            : }<\/a>$/;"	a
907	coverage/cutil/src/socket.c.gcov.html	/^<a name="907"><span class="lineNum">     907 <\/span>                :<span class="lineCov">        149 : }<\/span><\/a>$/;"	a
916	coverage/cutil/src/aiofd.c.gcov.html	/^<a name="916"><span class="lineNum">     916 <\/span>                :<span class="lineCov">          1 : }<\/span><\/a>$/;"	a
917	coverage/cutil/src/socket.c.gcov.html	/^<a name="917"><span class="lineNum">     917 <\/span>                :            : }<\/a>$/;"	a
93	coverage/cutil/src/list.c.gcov.html	/^<a name="93"><span class="lineNum">      93 <\/span>                :            : }<\/a>$/;"	a
939	coverage/cutil/src/btree.c.gcov.html	/^<a name="939"><span class="lineNum">     939 <\/span>                :            : <\/a>$/;"	a
95	coverage/cutil/src/hashtable.c.gcov.html	/^<a name="95"><span class="lineNum">      95 <\/span>                :            : <\/a>$/;"	a
952	coverage/cutil/src/socket.c.gcov.html	/^<a name="952"><span class="lineNum">     952 <\/span>                :            : }<\/a>$/;"	a
96	coverage/cutil/src/bitset.c.gcov.html	/^<a name="96"><span class="lineNum">      96 <\/span>                :            : }<\/a>$/;"	a
96	coverage/cutil/src/privileges.c.gcov.html	/^<a name="96"><span class="lineNum">      96 <\/span>                :            : }<\/a>$/;"	a
967	coverage/cutil/src/socket.c.gcov.html	/^<a name="967"><span class="lineNum">     967 <\/span>                :            : <\/a>$/;"	a
976	coverage/cutil/src/socket.c.gcov.html	/^<a name="976"><span class="lineNum">     976 <\/span>                :            : }<\/a>$/;"	a
98	coverage/cutil/src/buffer.c.gcov.html	/^<a name="98"><span class="lineNum">      98 <\/span>                :            : }<\/a>$/;"	a
ACCEPT	src/macros.h	131;"	d
ACCEPT	src/macros.h	300;"	d
ADD_SUITE	tests/test_macros.h	21;"	d
ADD_TEST	tests/test_macros.h	22;"	d
ARRAY_SIZE	src/macros.h	61;"	d
ASSERT	src/macros.h	92;"	d
BIND	src/macros.h	135;"	d
BIND	src/macros.h	304;"	d
BIT	src/bitset.c	27;"	d	file:
BUILDDIRS	Makefile	/^BUILDDIRS = $(DIRS:%=build-%)$/;"	m
C	src/macros.h	37;"	d
CALLOC	src/macros.h	122;"	d
CALLOC	src/macros.h	308;"	d
CFLAGS	src/Makefile	/^CFLAGS=-O3 -I$(EXTRA_LIBS_ROOT)\/include$/;"	m
CFLAGS	src/Makefile	/^coverage: CFLAGS=-fprofile-arcs -ftest-coverage -O0 -gstabs+ -DUNIT_TESTING -I$(EXTRA_LIBS_ROOT)\/include -I..\/tests$/;"	m
CFLAGS	src/Makefile	/^debug: CFLAGS=-O0 -gstabs+ -I$(EXTRA_LIBS_ROOT)\/include$/;"	m
CFLAGS	src/Makefile	/^test: CFLAGS=-O0 -gstabs+ -DUNIT_TESTING -I$(EXTRA_LIBS_ROOT)\/include -I..\/tests$/;"	m
CFLAGS	src/Makefile	/^testnr: CFLAGS=-O0 -gstabs+ -DUNIT_TESTING -I$(EXTRA_LIBS_ROOT)\/include -I..\/tests$/;"	m
CFLAGS	tests/Makefile	/^CFLAGS=-O0 -gstabs+ -DUNIT_TESTING -I$(CUTIL_ROOT)\/include -I$(EXTRA_LIBS_ROOT)\/include$/;"	m
CHECK	src/macros.h	103;"	d
CHECK_ERR_STR	src/macros.h	100;"	d
CHECK_GOTO	src/macros.h	107;"	d
CHECK_MSG	src/macros.h	104;"	d
CHECK_PTR	src/macros.h	108;"	d
CHECK_PTR_GOTO	src/macros.h	112;"	d
CHECK_PTR_MSG	src/macros.h	109;"	d
CHECK_PTR_RET	src/macros.h	110;"	d
CHECK_PTR_RET_MSG	src/macros.h	111;"	d
CHECK_RET	src/macros.h	105;"	d
CHECK_RET_MSG	src/macros.h	106;"	d
CLEANDIRS	Makefile	/^CLEANDIRS = $(DIRS:%=clean-%)$/;"	m
CONNECT	src/macros.h	139;"	d
CONNECT	src/macros.h	312;"	d
COVERAGE	Makefile	/^COVERAGE?=.\/coverage$/;"	m
COVERAGE	src/Makefile	/^COVERAGE?=..\/coverage$/;"	m
CUTIL_ROOT	tests/Makefile	/^CUTIL_ROOT=..\/src$/;"	m
DEBUG	src/debug.h	17;"	d
DEBUG	src/debug.h	20;"	d
DEBUG	src/debug.h	22;"	d
DEBUGDIRS	Makefile	/^DEBUGDIRS = $(SRCDIR:%=debug-%)$/;"	m
DEBUG_ON	src/debug.h	25;"	d
DEFAULT_INITIAL_CAPACITY	src/btree.c	32;"	d	file:
DIRS	Makefile	/^DIRS = $(SRCDIR) $(TESTDIR)$/;"	m
DWORDS_NEEDED	src/bitset.c	25;"	d	file:
DWORD_INDEX	src/bitset.c	26;"	d	file:
EMPTY_ENV	src/child.h	24;"	d
ERRNO	src/macros.h	143;"	d
ERRNO	src/macros.h	316;"	d
EVT_BADPARAM	src/events.h	/^    EVT_BADPARAM = -3$/;"	e	enum:evt_ret_e
EVT_BADPTR	src/events.h	/^    EVT_BADPTR = -1,$/;"	e	enum:evt_ret_e
EVT_CHILD	src/events.h	/^    EVT_CHILD,$/;"	e	enum:evt_type_e
EVT_ERROR	src/events.h	/^    EVT_ERROR = -2,$/;"	e	enum:evt_ret_e
EVT_IO	src/events.h	/^    EVT_IO,$/;"	e	enum:evt_type_e
EVT_IO_READ	src/events.h	/^    EVT_IO_READ =  EV_READ,$/;"	e	enum:evt_io_type_e
EVT_IO_WRITE	src/events.h	/^    EVT_IO_WRITE = EV_WRITE$/;"	e	enum:evt_io_type_e
EVT_OK	src/events.h	/^    EVT_OK = 1,$/;"	e	enum:evt_ret_e
EVT_SIGNAL	src/events.h	/^    EVT_SIGNAL,$/;"	e	enum:evt_type_e
EVT_TYPE_COUNT	src/events.h	/^    EVT_TYPE_COUNT = EVT_TYPE_LAST - EVT_TYPE_FIRST$/;"	e	enum:evt_type_e
EVT_TYPE_FIRST	src/events.h	/^    EVT_TYPE_FIRST = EVT_SIGNAL,$/;"	e	enum:evt_type_e
EVT_TYPE_LAST	src/events.h	/^    EVT_TYPE_LAST,$/;"	e	enum:evt_type_e
EV_DEFAULT_LOOP	src/macros.h	292;"	d
EV_DEFAULT_LOOP	src/macros.h	483;"	d
EV_MULTIPLICITY	src/events.c	18;"	d	file:
EV_NSIG	src/macros.h	67;"	d
EV_NSIG	src/macros.h	69;"	d
EV_NSIG	src/macros.h	71;"	d
EV_NSIG	src/macros.h	73;"	d
EV_NSIG	src/macros.h	75;"	d
EV_NSIG	src/macros.h	77;"	d
EV_NSIG	src/macros.h	79;"	d
EV_NSIG	src/macros.h	81;"	d
EV_NSIG	src/macros.h	83;"	d
EV_NSIG	src/macros.h	88;"	d
EV_STANDALONE	src/events.c	17;"	d	file:
EXTRA_LIBS_ROOT	src/Makefile	/^EXTRA_LIBS_ROOT?=\/usr\/local$/;"	m
EXTRA_LIBS_ROOT	tests/Makefile	/^EXTRA_LIBS_ROOT?=\/usr\/local$/;"	m
FAIL	src/macros.h	96;"	d
FALSE	src/macros.h	51;"	d
FCNTL	src/macros.h	147;"	d
FCNTL	src/macros.h	320;"	d
FORK	src/macros.h	151;"	d
FORK	src/macros.h	324;"	d
FREE	src/macros.h	124;"	d
FREE	src/macros.h	328;"	d
FSTAT	src/macros.h	155;"	d
FSTAT	src/macros.h	332;"	d
FSYNC	src/macros.h	159;"	d
FSYNC	src/macros.h	336;"	d
GCDA	src/Makefile	/^GCDA=$(SRC:.c=.gcda)$/;"	m
GCDA	tests/Makefile	/^GCDA=$(SRC:.c=.gcda)$/;"	m
GCNO	src/Makefile	/^GCNO=$(SRC:.c=.gcno)$/;"	m
GCNO	tests/Makefile	/^GCNO=$(SRC:.c=.gcno)$/;"	m
GCOV	src/Makefile	/^GCOV=$(SRC:.c=.c.gcov)$/;"	m
GCOV	tests/Makefile	/^GCOV=$(SRC:.c=.c.gcov)$/;"	m
GCOVDIRS	Makefile	/^GCOVDIRS = $(DIRS:%=gcov-%)$/;"	m
GETADDRINFO	src/macros.h	163;"	d
GETADDRINFO	src/macros.h	340;"	d
GETDTABLESIZE	src/macros.h	167;"	d
GETDTABLESIZE	src/macros.h	344;"	d
GETEGID	src/macros.h	171;"	d
GETEGID	src/macros.h	348;"	d
GETEUID	src/macros.h	175;"	d
GETEUID	src/macros.h	352;"	d
GETGID	src/macros.h	179;"	d
GETGID	src/macros.h	356;"	d
GETGROUPS	src/macros.h	183;"	d
GETGROUPS	src/macros.h	360;"	d
GETUID	src/macros.h	187;"	d
GETUID	src/macros.h	364;"	d
HDR	src/Makefile	/^HDR=aiofd.h bitset.h btree.h buffer.h child.h daemon.h debug.h events.h hashtable.h list.h log.h macros.h pair.h privileges.h sanitize.h socket.h$/;"	m
HOSTNAME_BUFFER_LEN	src/socket.h	62;"	d
INSTALL	Makefile	/^INSTALL=\/usr\/bin\/install$/;"	m
INSTALL	src/Makefile	/^INSTALL=\/usr\/bin\/install$/;"	m
INSTALLDIRS	Makefile	/^INSTALLDIRS = $(DIRS:%=install-%)$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA=$(INSTALL) -m 644$/;"	m
INSTALL_DATA	src/Makefile	/^INSTALL_DATA=$(INSTALL) -m 644$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM=$(INSTALL)$/;"	m
INSTALL_PROGRAM	src/Makefile	/^INSTALL_PROGRAM=$(INSTALL)$/;"	m
IOCTL	src/macros.h	191;"	d
IOCTL	src/macros.h	368;"	d
ITEM_AT	src/hashtable.c	34;"	d	file:
ITEM_AT	src/list.c	40;"	d	file:
ITR_EQ	src/hashtable.h	31;"	d
LDFLAGS	tests/Makefile	/^LDFLAGS=-O0 -gstabs+ -L$(CUTIL_ROOT)\/lib -L$(EXTRA_LIBS_ROOT)\/lib$/;"	m
LDFLAGS	tests/Makefile	/^coverage: LDFLAGS=-fprofile-arcs -O0 -gstabs+ -L$(CUTIL_ROOT)\/lib -L$(EXTRA_LIBS_ROOT)\/lib$/;"	m
LEAVE_UNCHANGED	src/privileges.h	25;"	d
LIBS	tests/Makefile	/^LIBS=-lcutil -lcunit -lev -lm -lpthread$/;"	m
LISTEN	src/macros.h	195;"	d
LISTEN	src/macros.h	372;"	d
LIST_AT	src/hashtable.c	33;"	d	file:
LOG	src/macros.h	95;"	d
LOG_TYPE_FILE	src/log.h	/^    LOG_TYPE_FILE,$/;"	e	enum:log_type_s
LOG_TYPE_LIST	src/log.h	/^    LOG_TYPE_LIST$/;"	e	enum:log_type_s
LOG_TYPE_STDERR	src/log.h	/^    LOG_TYPE_STDERR,$/;"	e	enum:log_type_s
LOG_TYPE_SYSLOG	src/log.h	/^    LOG_TYPE_SYSLOG,$/;"	e	enum:log_type_s
MALLOC	src/macros.h	121;"	d
MALLOC	src/macros.h	376;"	d
MEMCMP	src/macros.h	126;"	d
MEMCMP	src/macros.h	380;"	d
MEMCPY	src/macros.h	127;"	d
MEMCPY	src/macros.h	384;"	d
MEMSET	src/macros.h	125;"	d
MEMSET	src/macros.h	388;"	d
MISSING_64BIT_ENDIAN	src/macros.h	57;"	d
MISSING_STRNLEN	src/macros.h	56;"	d
MULTIPLE	tests/test_aiofd.c	36;"	d	file:
MULTIPLE	tests/test_child.c	36;"	d	file:
MULTIPLE	tests/test_events.c	37;"	d	file:
MULTIPLE	tests/test_hashtable.c	36;"	d	file:
MULTIPLE	tests/test_list.c	36;"	d	file:
MULTIPLE	tests/test_privileges.c	35;"	d	file:
MULTIPLE	tests/test_socket.c	39;"	d	file:
NAME	src/Makefile	/^NAME=cutil$/;"	m
NOTICE	src/macros.h	94;"	d
NO_ARGS	src/child.h	23;"	d
NUM_PRIMES	src/hashtable.c	/^uint_t const NUM_PRIMES = 30;$/;"	v
OBJ	src/Makefile	/^OBJ=$(SRC:.c=.o)$/;"	m
OBJ	tests/Makefile	/^OBJ=$(SRC:.c=.o)$/;"	m
OPEN_MAX	src/sanitize.c	41;"	d	file:
OUT	src/Makefile	/^OUT=lib$(NAME).a$/;"	m
OUT	tests/Makefile	/^OUT=test_all$/;"	m
PIPE	src/macros.h	199;"	d
PIPE	src/macros.h	392;"	d
PIPE_READ_IDX	src/child.c	215;"	d	file:
PIPE_WRITE_IDX	src/child.c	216;"	d	file:
PORTABLE_32_BIT	src/macros.h	45;"	d
PORTABLE_64_BIT	src/macros.h	41;"	d
PORT_BUFFER_LEN	src/socket.h	63;"	d
PREFIX	src/Makefile	/^PREFIX?=\/usr\/local$/;"	m
PRIMES	src/hashtable.c	/^uint_t const PRIMES[] =$/;"	v
READ	src/macros.h	203;"	d
READ	src/macros.h	396;"	d
READV	src/macros.h	207;"	d
REALLOC	src/macros.h	123;"	d
REALLOC	src/macros.h	400;"	d
RECV	src/macros.h	211;"	d
RECV	src/macros.h	404;"	d
RECVFROM	src/macros.h	215;"	d
RECVFROM	src/macros.h	408;"	d
RECVMSG	src/macros.h	219;"	d
RECVMSG	src/macros.h	412;"	d
REPEAT	tests/test_aiofd.c	34;"	d	file:
REPEAT	tests/test_child.c	34;"	d	file:
REPEAT	tests/test_events.c	35;"	d	file:
REPEAT	tests/test_hashtable.c	34;"	d	file:
REPEAT	tests/test_list.c	34;"	d	file:
REPEAT	tests/test_privileges.c	33;"	d	file:
REPEAT	tests/test_socket.c	37;"	d	file:
REPORTDIRS	Makefile	/^REPORTDIRS = $(DIRS:%=report-%)$/;"	m
ROOT_UID	src/privileges.h	24;"	d
SEND	src/macros.h	223;"	d
SEND	src/macros.h	416;"	d
SENDMSG	src/macros.h	227;"	d
SENDMSG	src/macros.h	420;"	d
SENDTO	src/macros.h	231;"	d
SENDTO	src/macros.h	424;"	d
SETEGID	src/macros.h	235;"	d
SETEGID	src/macros.h	428;"	d
SETEUID	src/macros.h	239;"	d
SETEUID	src/macros.h	432;"	d
SETGROUPS	src/macros.h	243;"	d
SETGROUPS	src/macros.h	436;"	d
SETREGID	src/macros.h	247;"	d
SETREGID	src/macros.h	440;"	d
SETREUID	src/macros.h	251;"	d
SETREUID	src/macros.h	444;"	d
SETSOCKOPT	src/macros.h	255;"	d
SETSOCKOPT	src/macros.h	448;"	d
SHELL	Makefile	/^SHELL=\/bin\/sh$/;"	m
SHELL	src/Makefile	/^SHELL=\/bin\/sh$/;"	m
SHELL	tests/Makefile	/^SHELL=\/bin\/sh$/;"	m
SIZEMAX	tests/test_aiofd.c	35;"	d	file:
SIZEMAX	tests/test_child.c	35;"	d	file:
SIZEMAX	tests/test_events.c	36;"	d	file:
SIZEMAX	tests/test_hashtable.c	35;"	d	file:
SIZEMAX	tests/test_list.c	35;"	d	file:
SIZEMAX	tests/test_privileges.c	34;"	d	file:
SIZEMAX	tests/test_socket.c	38;"	d	file:
SOCKET	src/macros.h	259;"	d
SOCKET	src/macros.h	452;"	d
SOCKET_BADHOSTNAME	src/socket.h	/^    SOCKET_BADHOSTNAME  = -3,$/;"	e	enum:socket_ret_e
SOCKET_BADPARAM	src/socket.h	/^    SOCKET_BADPARAM     = -2,$/;"	e	enum:socket_ret_e
SOCKET_BIND_FAIL	src/socket.h	/^    SOCKET_BIND_FAIL    = -11,$/;"	e	enum:socket_ret_e
SOCKET_BOUND	src/socket.h	/^    SOCKET_BOUND        = -8,$/;"	e	enum:socket_ret_e
SOCKET_CONNECTED	src/socket.h	/^    SOCKET_CONNECTED    = -7,$/;"	e	enum:socket_ret_e
SOCKET_CONNECT_FAIL	src/socket.h	/^    SOCKET_CONNECT_FAIL = -10,$/;"	e	enum:socket_ret_e
SOCKET_COUNT	src/socket.h	/^    SOCKET_COUNT = (SOCKET_LAST - SOCKET_FIRST),$/;"	e	enum:socket_type_e
SOCKET_ERROR	src/socket.h	/^    SOCKET_ERROR        = -1,$/;"	e	enum:socket_ret_e
SOCKET_FIRST	src/socket.h	/^    SOCKET_FIRST = SOCKET_TCP,$/;"	e	enum:socket_type_e
SOCKET_INPUT	src/socket.h	/^    SOCKET_INPUT        = 2,$/;"	e	enum:socket_ret_e
SOCKET_INVALIDPORT	src/socket.h	/^    SOCKET_INVALIDPORT  = -4,$/;"	e	enum:socket_ret_e
SOCKET_LAST	src/socket.h	/^    SOCKET_LAST,$/;"	e	enum:socket_type_e
SOCKET_OK	src/socket.h	/^    SOCKET_OK           = 1,$/;"	e	enum:socket_ret_e
SOCKET_OPENED	src/socket.h	/^    SOCKET_OPENED       = -12$/;"	e	enum:socket_ret_e
SOCKET_OPEN_FAIL	src/socket.h	/^    SOCKET_OPEN_FAIL    = -9,$/;"	e	enum:socket_ret_e
SOCKET_OUTPUT	src/socket.h	/^    SOCKET_OUTPUT       = 3,$/;"	e	enum:socket_ret_e
SOCKET_POLLERR	src/socket.h	/^    SOCKET_POLLERR      = -6,$/;"	e	enum:socket_ret_e
SOCKET_TCP	src/socket.h	/^    SOCKET_TCP,$/;"	e	enum:socket_type_e
SOCKET_TIMEOUT	src/socket.h	/^    SOCKET_TIMEOUT      = -5,$/;"	e	enum:socket_ret_e
SOCKET_UDP	src/socket.h	/^    SOCKET_UDP,$/;"	e	enum:socket_type_e
SOCKET_UNIX	src/socket.h	/^    SOCKET_UNIX,$/;"	e	enum:socket_type_e
SOCKET_UNKNOWN	src/socket.h	/^    SOCKET_UNKNOWN = -1$/;"	e	enum:socket_type_e
SRC	src/Makefile	/^SRC=aiofd.c bitset.c btree.c buffer.c child.c daemon.c events.c hashtable.c list.c log.c pair.c privileges.c sanitize.c socket.c$/;"	m
SRC	tests/Makefile	/^SRC=test_all.c test_aiofd.c test_bitset.c test_btree.c test_buffer.c test_child.c test_events.c test_flags.c test_hashtable.c test_list.c test_pair.c test_privileges.c test_sanitize.c test_socket.c$/;"	m
SRCDIR	Makefile	/^SRCDIR = src$/;"	m
STAT	src/macros.h	263;"	d
STAT	src/macros.h	456;"	d
STRCMP	src/macros.h	267;"	d
STRCMP	src/macros.h	460;"	d
STRDUP	src/macros.h	271;"	d
STRDUP	src/macros.h	464;"	d
STRTOL	src/macros.h	275;"	d
STRTOL	src/macros.h	468;"	d
SUITE	tests/test_macros.h	20;"	d
T	src/macros.h	35;"	d
TESTDIR	Makefile	/^TESTDIR = tests$/;"	m
TESTDIRS	Makefile	/^TESTDIRS = $(DIRS:%=test-%)$/;"	m
TESTNRDIRS	Makefile	/^TESTNRDIRS = $(DIRS:%=testnr-%)$/;"	m
TRUE	src/macros.h	52;"	d
UNINSTALLDIRS	Makefile	/^UNINSTALLDIRS = $(DIRS:%=uninstall-%)$/;"	m
UNIT_TEST_FAIL	src/macros.h	117;"	d
UNIT_TEST_FAIL	src/macros.h	487;"	d
UNIT_TEST_RET	src/macros.h	116;"	d
UNIT_TEST_RET	src/macros.h	486;"	d
UNLINK	src/macros.h	279;"	d
UNLINK	src/macros.h	472;"	d
UT	src/macros.h	36;"	d
VALID_EVENT_TYPE	src/events.h	46;"	d
VALID_SOCKET_TYPE	src/socket.h	61;"	d
WARN	src/macros.h	93;"	d
WRITE	src/macros.h	283;"	d
WRITE	src/macros.h	476;"	d
WRITEV	src/macros.h	287;"	d
WRITEV	src/macros.h	480;"	d
_GNU_SOURCE	src/log.c	17;"	d	file:
__AIOFD_H__	src/aiofd.h	18;"	d
__BITSET_H__	src/bitset.h	18;"	d
__BTREE_H__	src/btree.h	18;"	d
__BUFFER_H__	src/buffer.h	18;"	d
__CHILD_H__	src/child.h	18;"	d
__DAEMON_H__	src/daemon.h	18;"	d
__EVENTS_H__	src/events.h	18;"	d
__HASHTABLE_H__	src/hashtable.h	18;"	d
__LIST_H__	src/list.h	18;"	d
__LOG_H__	src/log.h	18;"	d
__MACROS_H__	src/macros.h	18;"	d
__PAIR_H__	src/pair.h	18;"	d
__PRIVILEGES_H__	src/privileges.h	18;"	d
__SANITIZE_H__	src/sanitize.h	18;"	d
__SOCKET_H__	src/socket.h	18;"	d
__TEST_MACROS_H__	tests/test_macros.h	18;"	d
add_aiofd_test_suite	tests/test_aiofd.c	/^CU_pSuite add_aiofd_test_suite()$/;"	f
add_aiofd_tests	tests/test_aiofd.c	/^static CU_pSuite add_aiofd_tests( CU_pSuite pSuite )$/;"	f	file:
add_bitset_test_suite	tests/test_bitset.c	/^CU_pSuite add_bitset_test_suite()$/;"	f
add_bitset_tests	tests/test_bitset.c	/^static CU_pSuite add_bitset_tests( CU_pSuite pSuite )$/;"	f	file:
add_btree_test_suite	tests/test_btree.c	/^CU_pSuite add_btree_test_suite()$/;"	f
add_btree_tests	tests/test_btree.c	/^static CU_pSuite add_btree_tests( CU_pSuite pSuite )$/;"	f	file:
add_buffer_test_suite	tests/test_buffer.c	/^CU_pSuite add_buffer_test_suite()$/;"	f
add_buffer_tests	tests/test_buffer.c	/^static CU_pSuite add_buffer_tests( CU_pSuite pSuite )$/;"	f	file:
add_child_test_suite	tests/test_child.c	/^CU_pSuite add_child_test_suite()$/;"	f
add_child_tests	tests/test_child.c	/^static CU_pSuite add_child_tests( CU_pSuite pSuite )$/;"	f	file:
add_environ	tests/test_sanitize.c	/^static uint8_t * add_environ[] =$/;"	v	file:
add_events_test_suite	tests/test_events.c	/^CU_pSuite add_events_test_suite()$/;"	f
add_events_tests	tests/test_events.c	/^static CU_pSuite add_events_tests( CU_pSuite pSuite )$/;"	f	file:
add_hashtable_test_suite	tests/test_hashtable.c	/^CU_pSuite add_hashtable_test_suite()$/;"	f
add_hashtable_tests	tests/test_hashtable.c	/^static CU_pSuite add_hashtable_tests( CU_pSuite pSuite )$/;"	f	file:
add_list_test_suite	tests/test_list.c	/^CU_pSuite add_list_test_suite()$/;"	f
add_list_tests	tests/test_list.c	/^static CU_pSuite add_list_tests( CU_pSuite pSuite )$/;"	f	file:
add_pair_test_suite	tests/test_pair.c	/^CU_pSuite add_pair_test_suite()$/;"	f
add_pair_tests	tests/test_pair.c	/^static CU_pSuite add_pair_tests( CU_pSuite pSuite )$/;"	f	file:
add_privileges_test_suite	tests/test_privileges.c	/^CU_pSuite add_privileges_test_suite()$/;"	f
add_privileges_tests	tests/test_privileges.c	/^static CU_pSuite add_privileges_tests( CU_pSuite pSuite )$/;"	f	file:
add_sanitize_test_suite	tests/test_sanitize.c	/^CU_pSuite add_sanitize_test_suite()$/;"	f
add_sanitize_tests	tests/test_sanitize.c	/^static CU_pSuite add_sanitize_tests( CU_pSuite pSuite )$/;"	f	file:
add_socket_test_suite	tests/test_socket.c	/^CU_pSuite add_socket_test_suite()$/;"	f
add_socket_tests	tests/test_socket.c	/^static CU_pSuite add_socket_tests( CU_pSuite pSuite )$/;"	f	file:
added_tz	tests/test_sanitize.c	/^static int added_tz = FALSE;$/;"	v	file:
addr	src/socket.c	/^    sockaddr_t      addr;           \/* place to stash the sockaddr_storage data *\/$/;"	m	struct:socket_s	file:
addr	src/socket.c	/^    sockaddr_t addr;$/;"	m	struct:write_dst_s	file:
addrinfo_t	src/socket.c	/^typedef struct addrinfo addrinfo_t;$/;"	t	typeref:struct:addrinfo	file:
addrlen	src/socket.c	/^    socklen_t       addrlen;        \/* length of addr *\/$/;"	m	struct:socket_s	file:
addrlen	src/socket.c	/^    socklen_t addrlen;$/;"	m	struct:write_dst_s	file:
aiofd	src/child.c	/^    aiofd_t         aiofd;          \/* the fd management state *\/$/;"	m	struct:child_process_s	file:
aiofd	src/socket.c	/^    aiofd_t         aiofd;          \/* the fd management state *\/$/;"	m	struct:socket_s	file:
aiofd	tests/test_all.c	/^SUITE( aiofd );$/;"	v
aiofd_deinitialize	src/aiofd.c	/^void aiofd_deinitialize( aiofd_t * const aiofd )$/;"	f
aiofd_delete	src/aiofd.c	/^void aiofd_delete( void * aio )$/;"	f
aiofd_do_read	src/aiofd.c	/^static ssize_t aiofd_do_read( int fd, $/;"	f	file:
aiofd_do_readv	src/aiofd.c	/^static ssize_t aiofd_do_readv( int fd, $/;"	f	file:
aiofd_do_write	src/aiofd.c	/^static ssize_t aiofd_do_write( int fd, $/;"	f	file:
aiofd_do_writev	src/aiofd.c	/^static ssize_t aiofd_do_writev( int fd, $/;"	f	file:
aiofd_enable_read_evt	src/aiofd.c	/^int_t aiofd_enable_read_evt( aiofd_t * const aiofd, int_t enable )$/;"	f
aiofd_enable_write_evt	src/aiofd.c	/^int_t aiofd_enable_write_evt( aiofd_t * const aiofd, int_t enable )$/;"	f
aiofd_flush	src/aiofd.c	/^int_t aiofd_flush( aiofd_t * const aiofd )$/;"	f
aiofd_get_listen	src/aiofd.c	/^int_t aiofd_get_listen( aiofd_t const * const aiofd )$/;"	f
aiofd_initialize	src/aiofd.c	/^int_t aiofd_initialize( aiofd_t * const aiofd, $/;"	f
aiofd_new	src/aiofd.c	/^aiofd_t * aiofd_new( int const write_fd,$/;"	f
aiofd_ops_s	src/aiofd.h	/^    struct aiofd_ops_s$/;"	s	struct:aiofd_s
aiofd_ops_t	src/aiofd.h	/^typedef struct aiofd_ops_s aiofd_ops_t;$/;"	t	typeref:struct:aiofd_ops_s
aiofd_read	src/aiofd.c	/^ssize_t aiofd_read( aiofd_t * const aiofd,$/;"	f
aiofd_read_fn	src/aiofd.c	/^static evt_ret_t aiofd_read_fn( evt_loop_t * const el,$/;"	f	file:
aiofd_readv	src/aiofd.c	/^ssize_t aiofd_readv( aiofd_t * const aiofd,$/;"	f
aiofd_s	src/aiofd.h	/^struct aiofd_s$/;"	s
aiofd_set_listen	src/aiofd.c	/^int_t aiofd_set_listen( aiofd_t * const aiofd, int_t listen )$/;"	f
aiofd_t	src/aiofd.h	/^typedef struct aiofd_s aiofd_t;$/;"	t	typeref:struct:aiofd_s
aiofd_write	src/aiofd.c	/^int_t aiofd_write( aiofd_t * const aiofd, $/;"	f
aiofd_write_common	src/aiofd.c	/^static int_t aiofd_write_common( aiofd_t* const aiofd, $/;"	f	file:
aiofd_write_fn	src/aiofd.c	/^static evt_ret_t aiofd_write_fn( evt_loop_t * const el,$/;"	f	file:
aiofd_write_s	src/aiofd.c	/^typedef struct aiofd_write_s$/;"	s	file:
aiofd_write_t	src/aiofd.c	/^} aiofd_write_t;$/;"	t	typeref:struct:aiofd_write_s	file:
aiofd_writev	src/aiofd.c	/^int_t aiofd_writev( aiofd_t * const aiofd,$/;"	f
balance	src/btree.c	/^    int32_t balance;            \/* balance factor *\/$/;"	m	struct:node_s	file:
bits	src/bitset.h	/^    uint32_t * bits;$/;"	m	struct:bitset_s
bitset	tests/test_all.c	/^SUITE( bitset );$/;"	v
bitset_s	src/bitset.h	/^typedef struct bitset_s$/;"	s
bitset_t	src/bitset.h	/^} bitset_t;$/;"	t	typeref:struct:bitset_s
bound	src/socket.c	/^    int_t           bound;          \/* is the socket bound? *\/$/;"	m	struct:socket_s	file:
bset_clear	src/bitset.c	/^int_t bset_clear( bitset_t * const bset, size_t const bit )$/;"	f
bset_clear_all	src/bitset.c	/^int_t bset_clear_all( bitset_t * const bset )$/;"	f
bset_deinitialize	src/bitset.c	/^int_t bset_deinitialize( bitset_t * const bset )$/;"	f
bset_delete	src/bitset.c	/^void bset_delete( void * bset )$/;"	f
bset_initialize	src/bitset.c	/^int_t bset_initialize( bitset_t * const bset, size_t const num_bits )$/;"	f
bset_new	src/bitset.c	/^bitset_t * bset_new( size_t const num_bits )$/;"	f
bset_set	src/bitset.c	/^int_t bset_set( bitset_t * const bset, size_t const bit )$/;"	f
bset_set_all	src/bitset.c	/^int_t bset_set_all( bitset_t * const bset )$/;"	f
bset_test	src/bitset.c	/^int_t bset_test( bitset_t const * const bset, size_t const bit )$/;"	f
bt_add	src/btree.c	/^int bt_add( bt_t * const btree, $/;"	f
bt_add_more_nodes	src/btree.c	/^static void bt_add_more_nodes( bt_t * const btree )$/;"	f	file:
bt_balance_tree	src/btree.c	/^static node_t * bt_balance_tree( bt_t * const btree, node_t * n )$/;"	f	file:
bt_deinitialize	src/btree.c	/^static void bt_deinitialize(bt_t * const btree)$/;"	f	file:
bt_delete	src/btree.c	/^void bt_delete(void * bt)$/;"	f
bt_delete_fn	src/btree.h	/^typedef void (*bt_delete_fn)(void * value);$/;"	t
bt_find	src/btree.c	/^void * bt_find(bt_t * const btree, void * const key )$/;"	f
bt_find_node	src/btree.c	/^static node_t * bt_find_node( bt_t * const btree, void * const key )$/;"	f	file:
bt_find_tree_max	src/btree.c	/^static node_t * bt_find_tree_max( node_t * p )$/;"	f	file:
bt_find_tree_min	src/btree.c	/^static node_t * bt_find_tree_min( node_t * p )$/;"	f	file:
bt_get_node	src/btree.c	/^static node_t * bt_get_node( node_t ** const nlist )$/;"	f	file:
bt_initialize	src/btree.c	/^static void bt_initialize$/;"	f	file:
bt_insert_node	src/btree.c	/^static int bt_insert_node( bt_t * const btree,$/;"	f	file:
bt_is_left_child	src/btree.c	/^static int bt_is_left_child( node_t * p, node_t * n )$/;"	f	file:
bt_itr_begin	src/btree.c	/^bt_itr_t bt_itr_begin(bt_t const * const btree)$/;"	f
bt_itr_end	src/btree.c	/^bt_itr_t bt_itr_end(bt_t const * const btree)$/;"	f
bt_itr_get	src/btree.c	/^void* bt_itr_get(bt_t const * const btree, bt_itr_t const itr)$/;"	f
bt_itr_get_key	src/btree.c	/^void* bt_itr_get_key(bt_t const * const btree, bt_itr_t const itr)$/;"	f
bt_itr_next	src/btree.c	/^bt_itr_t bt_itr_next(bt_t const * const btree, bt_itr_t const itr)$/;"	f
bt_itr_rbegin	src/btree.c	/^bt_itr_t bt_itr_rbegin(bt_t const * const btree)$/;"	f
bt_itr_rend	src/btree.c	/^bt_itr_t bt_itr_rend(bt_t const * const btree)$/;"	f
bt_itr_rnext	src/btree.c	/^bt_itr_t bt_itr_rnext(bt_t const * const btree, bt_itr_t const itr)$/;"	f
bt_itr_t	src/btree.h	/^typedef void * bt_itr_t;$/;"	t
bt_key_cmp_fn	src/btree.h	/^typedef int (*bt_key_cmp_fn)( void * l, void * r);$/;"	t
bt_new	src/btree.c	/^bt_t* bt_new$/;"	f
bt_print	src/btree.c	/^void bt_print( bt_t * const btree )$/;"	f
bt_print_node	src/btree.c	/^static void bt_print_node( node_t * const p, int const indent )$/;"	f	file:
bt_put_node	src/btree.c	/^static void bt_put_node( node_t ** const nlist, node_t * const node )$/;"	f	file:
bt_remove	src/btree.c	/^void * bt_remove(bt_t * const btree, void * const key )$/;"	f
bt_replace_node	src/btree.c	/^static node_t * bt_replace_node( node_t * p, node_t * s )$/;"	f	file:
bt_rotate_left	src/btree.c	/^static node_t * bt_rotate_left( node_t * const p )$/;"	f	file:
bt_rotate_left_right	src/btree.c	/^static node_t * bt_rotate_left_right( node_t * const p )$/;"	f	file:
bt_rotate_right	src/btree.c	/^static node_t * bt_rotate_right( node_t * const p )$/;"	f	file:
bt_rotate_right_left	src/btree.c	/^static node_t * bt_rotate_right_left( node_t * const p )$/;"	f	file:
bt_s	src/btree.c	/^struct bt_s$/;"	s	file:
bt_size	src/btree.c	/^uint_t bt_size(bt_t * const btree)$/;"	f
bt_t	src/btree.h	/^typedef struct bt_s bt_t;$/;"	t	typeref:struct:bt_s
btree	tests/test_all.c	/^SUITE( btree );$/;"	v
buf	tests/test_buffer.c	/^int8_t const * const buf = "blah";$/;"	v
buf	tests/test_child.c	/^static buf[16];$/;"	v	file:
buffer	tests/test_all.c	/^SUITE( buffer );$/;"	v
buffer_append	src/buffer.c	/^void* buffer_append( buffer_t * const b, void const * const p, size_t len )$/;"	f
buffer_deinitialize	src/buffer.c	/^int_t buffer_deinitialize( buffer_t * const b )$/;"	f
buffer_delete	src/buffer.c	/^void buffer_delete( void * b )$/;"	f
buffer_initialize	src/buffer.c	/^int_t buffer_initialize( buffer_t * const b, void * p, size_t len )$/;"	f
buffer_new	src/buffer.c	/^buffer_t * buffer_new( void * p, size_t len )$/;"	f
buffer_t	src/buffer.h	/^typedef struct iovec buffer_t;$/;"	t	typeref:struct:iovec
build_clean_environ	src/sanitize.c	/^uint8_t ** build_clean_environ( int preservec, uint8_t ** preservev, int addc, uint8_t ** addv )$/;"	f
callback	src/events.h	/^    evt_fn          callback;$/;"	m	struct:evt_s
cb_count_s	src/aiofd.c	/^typedef struct cb_count_s$/;"	s	file:
cb_count_t	src/aiofd.c	/^} cb_count_t;$/;"	t	typeref:struct:cb_count_s	file:
cb_counts	src/aiofd.c	/^static cb_count_t cb_counts;$/;"	v	file:
check_err_str_	src/macros.h	/^uint8_t * check_err_str_;$/;"	v
child	src/events.h	/^    struct ev_child     child;$/;"	m	union:ev_data_u	typeref:struct:ev_data_u::ev_child
child	tests/test_all.c	/^SUITE( child );$/;"	v
child_aiofd_error_evt_fn	src/child.c	/^static int_t child_aiofd_error_evt_fn( aiofd_t * const aiofd,$/;"	f	file:
child_aiofd_read_evt_fn	src/child.c	/^static int_t child_aiofd_read_evt_fn( aiofd_t * const aiofd,$/;"	f	file:
child_aiofd_write_evt_fn	src/child.c	/^static int_t child_aiofd_write_evt_fn( aiofd_t * const aiofd,$/;"	f	file:
child_ops_s	src/child.h	/^typedef struct child_ops_s $/;"	s
child_ops_t	src/child.h	/^} child_ops_t;$/;"	t	typeref:struct:child_ops_s
child_params	src/events.h	/^    } child_params;$/;"	m	union:evt_params_u	typeref:struct:evt_params_u::__anon2
child_pid	tests/test_child.c	/^static pid_t child_pid = -1;$/;"	v	file:
child_process_deinitialize	src/child.c	/^static void child_process_deinitialize( child_process_t * const child, int wait )$/;"	f	file:
child_process_delete	src/child.c	/^void child_process_delete( void * cp, int wait )$/;"	f
child_process_flush	src/child.c	/^int_t child_process_flush( child_process_t * const cp )$/;"	f
child_process_get_pid	src/child.c	/^pid_t child_process_get_pid( child_process_t * const cp )$/;"	f
child_process_initialize	src/child.c	/^static int child_process_initialize( child_process_t * const child,$/;"	f	file:
child_process_new	src/child.c	/^child_process_t * child_process_new( uint8_t const * const path,$/;"	f
child_process_read	src/child.c	/^ssize_t child_process_read( child_process_t * const cp, $/;"	f
child_process_readv	src/child.c	/^ssize_t child_process_readv( child_process_t * const cp,$/;"	f
child_process_s	src/child.c	/^struct child_process_s$/;"	s	file:
child_process_t	src/child.h	/^typedef struct child_process_s child_process_t;$/;"	t	typeref:struct:child_process_s
child_process_write	src/child.c	/^int_t child_process_write( child_process_t * const cp, $/;"	f
child_process_writev	src/child.c	/^int_t child_process_writev( child_process_t * const cp,$/;"	f
clean_environ	src/sanitize.c	/^static uint8_t * clean_environ[] =$/;"	v	file:
connect_fn	src/socket.h	/^    socket_ret_t (*connect_fn)( socket_t * const s, void * user_data );$/;"	m	struct:socket_ops_s
connect_fn	tests/test_socket.c	/^static socket_ret_t connect_fn( socket_t * const s, void * user_data )$/;"	f	file:
connect_tests_connect_fn	tests/test_socket.c	/^static socket_ret_t connect_tests_connect_fn( socket_t * const s, void * user_data )$/;"	f	file:
connect_tests_error_fn	tests/test_socket.c	/^static socket_ret_t connect_tests_error_fn( socket_t * const s, int err, void * user_data )$/;"	f	file:
connected	src/socket.c	/^    int_t           connected;      \/* is the socket connected? *\/$/;"	m	struct:socket_s	file:
connected	tests/test_socket.c	/^    int_t connected;$/;"	m	struct:sock_state_s	file:
cookie	src/log.h	/^    void * cookie;$/;"	m	struct:log_s
count	src/hashtable.h	/^    uint_t              count;              \/* number of items in the hashtable *\/$/;"	m	struct:ht_s
count	src/list.h	/^    uint_t          count;                  \/* number of items in the list *\/$/;"	m	struct:list_s
create_pid_file	src/daemon.c	/^int create_pid_file( int8_t const * const fpath )$/;"	f
create_start_file	src/daemon.c	/^int create_start_file( int8_t const * const fpath )$/;"	f
daemonize	src/daemon.c	/^void daemonize( int8_t const * const root_dir )$/;"	f
data	src/aiofd.c	/^    void * data;$/;"	m	struct:aiofd_write_s	file:
data	src/list.c	/^    void *  data;   \/* pointer to the data *\/$/;"	m	struct:list_item_s	file:
debug_signals_dump	src/events.c	/^void debug_signals_dump(uint8_t const * const prefix)$/;"	f
default_key_cmp	src/btree.c	/^static int default_key_cmp( void * l, void * r )$/;"	f	file:
default_load_limit	src/hashtable.c	/^float const default_load_limit = 3.0f;$/;"	v
deinit_aiofd_suite	tests/test_aiofd.c	/^static int deinit_aiofd_suite( void )$/;"	f	file:
deinit_bitset_suite	tests/test_bitset.c	/^static int deinit_bitset_suite( void )$/;"	f	file:
deinit_btree_suite	tests/test_btree.c	/^static int deinit_btree_suite( void )$/;"	f	file:
deinit_buffer_suite	tests/test_buffer.c	/^static int deinit_buffer_suite( void )$/;"	f	file:
deinit_child_suite	tests/test_child.c	/^static int deinit_child_suite( void )$/;"	f	file:
deinit_events_suite	tests/test_events.c	/^static int deinit_events_suite( void )$/;"	f	file:
deinit_hashtable_suite	tests/test_hashtable.c	/^static int deinit_hashtable_suite( void )$/;"	f	file:
deinit_list_suite	tests/test_list.c	/^static int deinit_list_suite( void )$/;"	f	file:
deinit_pair_suite	tests/test_pair.c	/^static int deinit_pair_suite( void )$/;"	f	file:
deinit_privileges_suite	tests/test_privileges.c	/^static int deinit_privileges_suite( void )$/;"	f	file:
deinit_sanitize_suite	tests/test_sanitize.c	/^static int deinit_sanitize_suite( void )$/;"	f	file:
deinit_socket_suite	tests/test_socket.c	/^static int deinit_socket_suite( void )$/;"	f	file:
dfn	src/hashtable.h	/^    ht_delete_fn        dfn;                \/* key delete function *\/$/;"	m	struct:ht_s
dfn	src/list.h	/^    list_delete_fn  dfn;                    \/* destruction function for each node *\/$/;"	m	struct:list_s
disconnect_fn	src/socket.h	/^    socket_ret_t (*disconnect_fn)( socket_t * const s, void * user_data );$/;"	m	struct:socket_ops_s
disconnect_fn	tests/test_socket.c	/^static socket_ret_t disconnect_fn( socket_t * const s, void * user_data )$/;"	f	file:
drop_privileges	src/privileges.c	/^int_t drop_privileges( int_t permanent, priv_state_t * const orig )$/;"	f
e	src/aiofd.c	/^    int r, w, e;$/;"	m	struct:cb_count_s	file:
el	src/aiofd.h	/^    evt_loop_t* el;             \/* event loop we registered out evt with *\/$/;"	m	struct:aiofd_s
el	src/events.h	/^    evt_loop_t *    el;         \/* the event loop associated wtih *\/$/;"	m	struct:evt_s
el	tests/test_all.c	/^evt_loop_t * el = NULL;$/;"	v
error	tests/test_socket.c	/^    int_t error;$/;"	m	struct:sock_state_s	file:
error_callback_fn	src/aiofd.c	/^static int_t error_callback_fn( aiofd_t * const aiofd, int err, void * user_data )$/;"	f	file:
error_callback_ret	src/aiofd.c	/^static int_t error_callback_ret = TRUE;$/;"	v	file:
error_evt_fn	src/aiofd.h	/^        int_t (*error_evt_fn)( aiofd_t * const aiofd, int err, void * user_data );$/;"	m	struct:aiofd_s::aiofd_ops_s
error_evt_fn	src/child.h	/^    int_t (*error_evt_fn)( child_process_t * const cp, int err, void * user_data );$/;"	m	struct:child_ops_s
error_evt_fn	tests/test_aiofd.c	/^static int_t error_evt_fn( aiofd_t * const aiofd, int err, void * user_data )$/;"	f	file:
error_evt_fn	tests/test_child.c	/^static int_t error_evt_fn( child_process_t * const cp, int err, void * user_data )$/;"	f	file:
error_fn	src/socket.h	/^    socket_ret_t (*error_fn)( socket_t * const s, int err, void * user_data );$/;"	m	struct:socket_ops_s
error_fn	tests/test_socket.c	/^static socket_ret_t error_fn( socket_t * const s, int err, void * user_data )$/;"	f	file:
error_pid_evt_fn	tests/test_child.c	/^static int_t error_pid_evt_fn( child_process_t * const cp, int err, void * user_data )$/;"	f	file:
ev	src/events.h	/^    ev_data_t       ev;         \/* MUST BE FIRST *\/$/;"	m	struct:evt_s
ev_data_t	src/events.h	/^} ev_data_t;$/;"	t	typeref:union:ev_data_u
ev_data_u	src/events.h	/^typedef union ev_data_u$/;"	u
events	tests/test_all.c	/^SUITE( events );$/;"	v
evt_child_callback	src/events.c	/^static void evt_child_callback( struct ev_loop * loop,$/;"	f	file:
evt_deinitialize_event_handler	src/events.c	/^void evt_deinitialize_event_handler( evt_t * const evt )$/;"	f
evt_delete	src/events.c	/^void evt_delete(void * e)$/;"	f
evt_delete_event_handler	src/events.c	/^void evt_delete_event_handler( void * e )$/;"	f
evt_fn	src/events.h	/^typedef evt_ret_t (*evt_fn)( evt_loop_t * const el,$/;"	t
evt_initialize_event_handler	src/events.c	/^int_t evt_initialize_event_handler( evt_t * const evt,$/;"	f
evt_io_callback	src/events.c	/^static void evt_io_callback( struct ev_loop * loop,$/;"	f	file:
evt_io_type_e	src/events.h	/^typedef enum evt_io_type_e$/;"	g
evt_io_type_t	src/events.h	/^} evt_io_type_t;$/;"	t	typeref:enum:evt_io_type_e
evt_log_backend	src/events.c	/^static void evt_log_backend( evt_loop_t * const el )$/;"	f	file:
evt_loop_t	src/events.h	/^typedef struct ev_loop evt_loop_t;$/;"	t	typeref:struct:ev_loop
evt_new	src/events.c	/^evt_loop_t* evt_new( void )$/;"	f
evt_new_event_handler	src/events.c	/^evt_t * evt_new_event_handler( evt_type_t const t,$/;"	f
evt_params	src/events.h	/^    evt_params_t    evt_params;$/;"	m	struct:evt_s
evt_params_t	src/events.h	/^} evt_params_t;$/;"	t	typeref:union:evt_params_u
evt_params_u	src/events.h	/^typedef union evt_params_u$/;"	u
evt_ret_e	src/events.h	/^typedef enum evt_ret_e$/;"	g
evt_ret_t	src/events.h	/^} evt_ret_t;$/;"	t	typeref:enum:evt_ret_e
evt_run	src/events.c	/^evt_ret_t evt_run( evt_loop_t * const el )$/;"	f
evt_s	src/events.h	/^struct evt_s$/;"	s
evt_signal_callback	src/events.c	/^static void evt_signal_callback( struct ev_loop * loop,$/;"	f	file:
evt_start_event_handler	src/events.c	/^evt_ret_t evt_start_event_handler( evt_loop_t * const el,$/;"	f
evt_stop	src/events.c	/^evt_ret_t evt_stop( evt_loop_t * const el, int_t once )$/;"	f
evt_stop_event_handler	src/events.c	/^evt_ret_t evt_stop_event_handler( evt_loop_t * const el,$/;"	f
evt_t	src/events.h	/^typedef struct evt_s evt_t;$/;"	t	typeref:struct:evt_s
evt_type	src/events.h	/^    evt_type_t      evt_type;$/;"	m	struct:evt_s
evt_type_e	src/events.h	/^typedef enum evt_type_e$/;"	g
evt_type_t	src/events.h	/^} evt_type_t;$/;"	t	typeref:enum:evt_type_e
exit_evt_fn	src/child.h	/^    int_t (*exit_evt_fn)( child_process_t * const cp, int rpid, int rstatus, void * user_data );$/;"	m	struct:child_ops_s
exit_evt_fn	tests/test_child.c	/^static int_t exit_evt_fn( child_process_t * const cp, int rpid, int rstatus, void * user_data )$/;"	f	file:
exit_pid_evt_fn	tests/test_child.c	/^static int_t exit_pid_evt_fn( child_process_t * const cp, int rpid, int rstatus, void * user_data )$/;"	f	file:
exited	src/child.c	/^    int_t           exited;         \/* have we received the SIGCHLD signal? *\/$/;"	m	struct:child_process_s	file:
fail_alloc	tests/test_flags.c	/^int_t fail_alloc = FALSE;$/;"	v
fail_alloc_bak	src/buffer.c	/^int_t fail_alloc_bak = FALSE;$/;"	v
fail_bitset_deinit	tests/test_flags.c	/^int_t fail_bitset_deinit = FALSE;$/;"	v
fail_bitset_init	tests/test_flags.c	/^int_t fail_bitset_init = FALSE;$/;"	v
fail_buffer_deinit	tests/test_flags.c	/^int_t fail_buffer_deinit = FALSE;$/;"	v
fail_buffer_init	tests/test_flags.c	/^int_t fail_buffer_init = FALSE;$/;"	v
fail_buffer_init_alloc	tests/test_flags.c	/^int_t fail_buffer_init_alloc = FALSE;$/;"	v
fail_socket_initialize	tests/test_flags.c	/^int_t fail_socket_initialize = FALSE;$/;"	v
fake_accept	tests/test_flags.c	/^int_t fake_accept = FALSE;$/;"	v
fake_accept_ret	tests/test_flags.c	/^int fake_accept_ret = -1;$/;"	v
fake_aiofd_enable_read_evt	tests/test_flags.c	/^int_t fake_aiofd_enable_read_evt = FALSE;$/;"	v
fake_aiofd_enable_read_evt_ret	tests/test_flags.c	/^int_t fake_aiofd_enable_read_evt_ret = FALSE;$/;"	v
fake_aiofd_flush	tests/test_flags.c	/^int_t fake_aiofd_flush = FALSE;$/;"	v
fake_aiofd_flush_ret	tests/test_flags.c	/^int_t fake_aiofd_flush_ret = FALSE;$/;"	v
fake_aiofd_initialize	tests/test_flags.c	/^int_t fake_aiofd_initialize = FALSE;$/;"	v
fake_aiofd_initialize_ret	tests/test_flags.c	/^int_t fake_aiofd_initialize_ret = FALSE;$/;"	v
fake_aiofd_read	tests/test_flags.c	/^int_t fake_aiofd_read = FALSE;$/;"	v
fake_aiofd_read_ret	tests/test_flags.c	/^ssize_t fake_aiofd_read_ret = -1;$/;"	v
fake_aiofd_readv	tests/test_flags.c	/^int_t fake_aiofd_readv = FALSE;$/;"	v
fake_aiofd_readv_ret	tests/test_flags.c	/^ssize_t fake_aiofd_readv_ret = -1;$/;"	v
fake_aiofd_write	tests/test_flags.c	/^int_t fake_aiofd_write = FALSE;$/;"	v
fake_aiofd_write_common	tests/test_flags.c	/^int_t fake_aiofd_write_common = FALSE;$/;"	v
fake_aiofd_write_common_ret	tests/test_flags.c	/^int_t fake_aiofd_write_common_ret = FALSE;$/;"	v
fake_aiofd_write_ret	tests/test_flags.c	/^int_t fake_aiofd_write_ret = FALSE;$/;"	v
fake_aiofd_writev	tests/test_flags.c	/^int_t fake_aiofd_writev = FALSE;$/;"	v
fake_aiofd_writev_ret	tests/test_flags.c	/^int_t fake_aiofd_writev_ret = FALSE;$/;"	v
fake_bind	tests/test_flags.c	/^int_t fake_bind = FALSE;$/;"	v
fake_bind_ret	tests/test_flags.c	/^int fake_bind_ret = -1;$/;"	v
fake_connect	tests/test_flags.c	/^int_t fake_connect = FALSE;$/;"	v
fake_connect_ret	tests/test_flags.c	/^int fake_connect_ret = -1;$/;"	v
fake_errno	tests/test_flags.c	/^int_t fake_errno = FALSE;$/;"	v
fake_errno_value	tests/test_flags.c	/^int fake_errno_value = 0;$/;"	v
fake_ev_default_loop	tests/test_flags.c	/^int_t fake_ev_default_loop = FALSE;$/;"	v
fake_ev_default_loop_ret	tests/test_flags.c	/^void* fake_ev_default_loop_ret = NULL;$/;"	v
fake_event_handler_init	tests/test_flags.c	/^int_t fake_event_handler_init = FALSE;$/;"	v
fake_event_handler_init_count	tests/test_flags.c	/^int fake_event_handler_init_count = 0;$/;"	v
fake_event_handler_init_ret	tests/test_flags.c	/^int_t fake_event_handler_init_ret = FALSE;$/;"	v
fake_event_start_handler	tests/test_flags.c	/^int_t fake_event_start_handler = FALSE;$/;"	v
fake_event_start_handler_ret	tests/test_flags.c	/^int_t fake_event_start_handler_ret = FALSE;$/;"	v
fake_event_stop_handler	tests/test_flags.c	/^int_t fake_event_stop_handler = FALSE;$/;"	v
fake_event_stop_handler_ret	tests/test_flags.c	/^int_t fake_event_stop_handler_ret = FALSE;$/;"	v
fake_fcntl	tests/test_flags.c	/^int_t fake_fcntl = FALSE;$/;"	v
fake_fcntl_ret	tests/test_flags.c	/^int fake_fcntl_ret = -1;$/;"	v
fake_fork	tests/test_flags.c	/^int_t fake_fork = FALSE;$/;"	v
fake_fork_ret	tests/test_flags.c	/^int fake_fork_ret = -1;$/;"	v
fake_fstat	tests/test_flags.c	/^int_t fake_fstat = FALSE;$/;"	v
fake_fstat_ret	tests/test_flags.c	/^int fake_fstat_ret = -1;$/;"	v
fake_fsync	tests/test_flags.c	/^int_t fake_fsync = FALSE;$/;"	v
fake_fsync_ret	tests/test_flags.c	/^int fake_fsync_ret = -1;$/;"	v
fake_getaddrinfo	tests/test_flags.c	/^int_t fake_getaddrinfo = FALSE;$/;"	v
fake_getaddrinfo_ret	tests/test_flags.c	/^int fake_getaddrinfo_ret = -1;$/;"	v
fake_getdtablesize	tests/test_flags.c	/^int_t fake_getdtablesize = FALSE;$/;"	v
fake_getdtablesize_ret	tests/test_flags.c	/^int fake_getdtablesize_ret = -1;$/;"	v
fake_getegid	tests/test_flags.c	/^int_t fake_getegid = FALSE;$/;"	v
fake_getegid_ret	tests/test_flags.c	/^int fake_getegid_ret = -1;$/;"	v
fake_geteuid	tests/test_flags.c	/^int_t fake_geteuid = FALSE;$/;"	v
fake_geteuid_ret	tests/test_flags.c	/^int fake_geteuid_ret = -1;$/;"	v
fake_getgid	tests/test_flags.c	/^int_t fake_getgid = FALSE;$/;"	v
fake_getgid_ret	tests/test_flags.c	/^int fake_getgid_ret = -1;$/;"	v
fake_getgroups	tests/test_flags.c	/^int_t fake_getgroups = FALSE;$/;"	v
fake_getgroups_ret	tests/test_flags.c	/^int fake_getgroups_ret = -1;$/;"	v
fake_getuid	tests/test_flags.c	/^int_t fake_getuid = FALSE;$/;"	v
fake_getuid_ret	tests/test_flags.c	/^int fake_getuid_ret = -1;$/;"	v
fake_ht_deinit	tests/test_flags.c	/^int_t fake_ht_deinit = FALSE;$/;"	v
fake_ht_deinit_ret	tests/test_flags.c	/^int_t fake_ht_deinit_ret = FALSE;$/;"	v
fake_ht_find	tests/test_flags.c	/^int_t fake_ht_find = FALSE;$/;"	v
fake_ht_find_ret	src/hashtable.c	/^ht_itr_t fake_ht_find_ret;$/;"	v
fake_ht_grow	tests/test_flags.c	/^int_t fake_ht_grow = FALSE;$/;"	v
fake_ht_grow_ret	tests/test_flags.c	/^int_t fake_ht_grow_ret = FALSE;$/;"	v
fake_ht_init	tests/test_flags.c	/^int_t fake_ht_init = FALSE;$/;"	v
fake_ht_init_ret	tests/test_flags.c	/^int_t fake_ht_init_ret = FALSE;$/;"	v
fake_ioctl	tests/test_flags.c	/^int_t fake_ioctl = FALSE;$/;"	v
fake_ioctl_ret	tests/test_flags.c	/^int fake_ioctl_ret = -1;$/;"	v
fake_list_count	tests/test_flags.c	/^int_t fake_list_count = FALSE;$/;"	v
fake_list_count_ret	tests/test_flags.c	/^int fake_list_count_ret = 0;$/;"	v
fake_list_deinit	tests/test_flags.c	/^int_t fake_list_deinit = FALSE;$/;"	v
fake_list_deinit_ret	tests/test_flags.c	/^int_t fake_list_deinit_ret = FALSE;$/;"	v
fake_list_get	tests/test_flags.c	/^int_t fake_list_get = FALSE;$/;"	v
fake_list_get_ret	tests/test_flags.c	/^void* fake_list_get_ret = NULL;$/;"	v
fake_list_grow	tests/test_flags.c	/^int_t fake_list_grow = FALSE;$/;"	v
fake_list_grow_ret	tests/test_flags.c	/^int_t fake_list_grow_ret = FALSE;$/;"	v
fake_list_init	tests/test_flags.c	/^int_t fake_list_init = FALSE;$/;"	v
fake_list_init_ret	tests/test_flags.c	/^int_t fake_list_init_ret = FALSE;$/;"	v
fake_list_push	tests/test_flags.c	/^int_t fake_list_push = FALSE;$/;"	v
fake_list_push_ret	tests/test_flags.c	/^int_t fake_list_push_ret = FALSE;$/;"	v
fake_listen	tests/test_flags.c	/^int_t fake_listen = FALSE;$/;"	v
fake_listen_ret	tests/test_flags.c	/^int fake_listen_ret = -1;$/;"	v
fake_open_devnull	tests/test_flags.c	/^int_t fake_open_devnull = FALSE;$/;"	v
fake_open_devnull_ret	tests/test_flags.c	/^int_t fake_open_devnull_ret = FALSE;$/;"	v
fake_pipe	tests/test_flags.c	/^int_t fake_pipe = FALSE;$/;"	v
fake_pipe_ret	tests/test_flags.c	/^int fake_pipe_ret = -1;$/;"	v
fake_read	tests/test_flags.c	/^int_t fake_read = FALSE;$/;"	v
fake_read_ret	tests/test_flags.c	/^ssize_t fake_read_ret = -1;$/;"	v
fake_readv	tests/test_flags.c	/^int_t fake_readv = FALSE;$/;"	v
fake_readv_ret	tests/test_flags.c	/^ssize_t fake_readv_ret = -1;$/;"	v
fake_recv	tests/test_flags.c	/^int_t fake_recv = FALSE;$/;"	v
fake_recv_ret	tests/test_flags.c	/^ssize_t fake_recv_ret = -1;$/;"	v
fake_recvfrom	tests/test_flags.c	/^int_t fake_recvfrom = FALSE;$/;"	v
fake_recvfrom_ret	tests/test_flags.c	/^ssize_t fake_recvfrom_ret = -1;$/;"	v
fake_recvmsg	tests/test_flags.c	/^int_t fake_recvmsg = FALSE;$/;"	v
fake_recvmsg_ret	tests/test_flags.c	/^ssize_t fake_recvmsg_ret = -1;$/;"	v
fake_send	tests/test_flags.c	/^int_t fake_send = FALSE;$/;"	v
fake_send_ret	tests/test_flags.c	/^ssize_t fake_send_ret = -1;$/;"	v
fake_sendmsg	tests/test_flags.c	/^int_t fake_sendmsg = FALSE;$/;"	v
fake_sendmsg_ret	tests/test_flags.c	/^ssize_t fake_sendmsg_ret = -1;$/;"	v
fake_sendto	tests/test_flags.c	/^int_t fake_sendto = FALSE;$/;"	v
fake_sendto_ret	tests/test_flags.c	/^ssize_t fake_sendto_ret = -1;$/;"	v
fake_setegid	tests/test_flags.c	/^int_t fake_setegid = FALSE;$/;"	v
fake_setegid_ret	tests/test_flags.c	/^int fake_setegid_ret = -1;$/;"	v
fake_seteuid	tests/test_flags.c	/^int_t fake_seteuid = FALSE;$/;"	v
fake_seteuid_ret	tests/test_flags.c	/^int fake_seteuid_ret = -1;$/;"	v
fake_setgroups	tests/test_flags.c	/^int_t fake_setgroups = FALSE;$/;"	v
fake_setgroups_ret	tests/test_flags.c	/^int fake_setgroups_ret = -1;$/;"	v
fake_setregid	tests/test_flags.c	/^int_t fake_setregid = FALSE;$/;"	v
fake_setregid_ret	tests/test_flags.c	/^int fake_setregid_ret = -1;$/;"	v
fake_setreuid	tests/test_flags.c	/^int_t fake_setreuid = FALSE;$/;"	v
fake_setreuid_ret	tests/test_flags.c	/^int fake_setreuid_ret = -1;$/;"	v
fake_setsockopt	tests/test_flags.c	/^int_t fake_setsockopt = FALSE;$/;"	v
fake_setsockopt_ret	tests/test_flags.c	/^int fake_setsockopt_ret = -1;$/;"	v
fake_socket	tests/test_flags.c	/^int_t fake_socket = FALSE;$/;"	v
fake_socket_bind	tests/test_flags.c	/^int_t fake_socket_bind = FALSE;$/;"	v
fake_socket_bind_ret	tests/test_flags.c	/^int_t fake_socket_bind_ret = FALSE;$/;"	v
fake_socket_bound	tests/test_flags.c	/^int_t fake_socket_bound = FALSE;$/;"	v
fake_socket_bound_ret	tests/test_flags.c	/^int_t fake_socket_bound_ret = FALSE;$/;"	v
fake_socket_connect	tests/test_flags.c	/^int_t fake_socket_connect = FALSE;$/;"	v
fake_socket_connect_ret	tests/test_flags.c	/^int_t fake_socket_connect_ret = FALSE;$/;"	v
fake_socket_connected	tests/test_flags.c	/^int_t fake_socket_connected = FALSE;$/;"	v
fake_socket_connected_ret	tests/test_flags.c	/^int_t fake_socket_connected_ret = FALSE;$/;"	v
fake_socket_create_tcp_socket	tests/test_flags.c	/^int_t fake_socket_create_tcp_socket = FALSE;$/;"	v
fake_socket_create_tcp_socket_ret	tests/test_flags.c	/^int_t fake_socket_create_tcp_socket_ret = FALSE;$/;"	v
fake_socket_create_udp_socket	tests/test_flags.c	/^int_t fake_socket_create_udp_socket = FALSE;$/;"	v
fake_socket_create_udp_socket_ret	tests/test_flags.c	/^int_t fake_socket_create_udp_socket_ret = FALSE;$/;"	v
fake_socket_create_unix_socket	tests/test_flags.c	/^int_t fake_socket_create_unix_socket = FALSE;$/;"	v
fake_socket_create_unix_socket_ret	tests/test_flags.c	/^int_t fake_socket_create_unix_socket_ret = FALSE;$/;"	v
fake_socket_errval	tests/test_flags.c	/^int fake_socket_errval = 0;$/;"	v
fake_socket_get_error_ret	tests/test_flags.c	/^int_t fake_socket_get_error_ret = FALSE;$/;"	v
fake_socket_getsockopt	tests/test_flags.c	/^int_t fake_socket_getsockopt = FALSE;$/;"	v
fake_socket_lookup_host	tests/test_flags.c	/^int_t fake_socket_lookup_host = FALSE;$/;"	v
fake_socket_lookup_host_ret	tests/test_flags.c	/^int_t fake_socket_lookup_host_ret = FALSE;$/;"	v
fake_socket_ret	tests/test_flags.c	/^int fake_socket_ret = -1;$/;"	v
fake_stat	tests/test_flags.c	/^int_t fake_stat = FALSE;$/;"	v
fake_stat_ret	tests/test_flags.c	/^int fake_stat_ret = -1;$/;"	v
fake_strcmp	tests/test_flags.c	/^int_t fake_strcmp = FALSE;$/;"	v
fake_strcmp_ret	tests/test_flags.c	/^int fake_strcmp_ret = 0;$/;"	v
fake_strdup	tests/test_flags.c	/^int_t fake_strdup = FALSE;$/;"	v
fake_strdup_ret	tests/test_flags.c	/^char* fake_strdup_ret = NULL;$/;"	v
fake_strtol	tests/test_flags.c	/^int_t fake_strtol = FALSE;$/;"	v
fake_strtol_ret	tests/test_flags.c	/^uint_t fake_strtol_ret = LONG_MIN;$/;"	v
fake_unlink	tests/test_flags.c	/^int_t fake_unlink = FALSE;$/;"	v
fake_unlink_ret	tests/test_flags.c	/^int fake_unlink_ret = -1;$/;"	v
fake_write	tests/test_flags.c	/^int_t fake_write = FALSE;$/;"	v
fake_write_ret	tests/test_flags.c	/^ssize_t fake_write_ret = -1;$/;"	v
fake_writev	tests/test_flags.c	/^int_t fake_writev = FALSE;$/;"	v
fake_writev_ret	tests/test_flags.c	/^ssize_t fake_writev_ret = -1;$/;"	v
fd	src/events.h	/^        int fd;$/;"	m	struct:evt_params_u::__anon3
filelog_fns	src/log.c	/^static cookie_io_functions_t filelog_fns =$/;"	v	file:
filelog_writer	src/log.c	/^static ssize_t filelog_writer( void * cookie, char const * data, size_t leng )$/;"	f	file:
first	src/pair.c	/^    void * first;$/;"	m	struct:pair_s	file:
first	tests/test_pair.c	/^int8_t const * const first = "first";$/;"	v
free_head	src/list.h	/^    list_itr_t      free_head;              \/* head node of the free circular list *\/$/;"	m	struct:list_s
free_list	src/btree.c	/^    node_t*             free_list;  \/* list of free nodes *\/$/;"	m	struct:bt_s	file:
get_signals_debug_string	src/events.c	/^size_t get_signals_debug_string( sigset_t const * const sigs, uint8_t ** out )$/;"	f
gid	src/privileges.h	/^    gid_t   gid;$/;"	m	struct:priv_state_s
groups	src/privileges.h	/^    gid_t   groups[NGROUPS_MAX];$/;"	m	struct:priv_state_s
hash_fn	tests/test_hashtable.c	/^static uint_t hash_fn( void const * const key )$/;"	f	file:
hashtable	tests/test_all.c	/^SUITE( hashtable );$/;"	v
hfn	src/hashtable.h	/^    ht_hash_fn          hfn;                \/* hash function *\/$/;"	m	struct:ht_s
host	src/socket.c	/^    uint8_t *       host;           \/* host name *\/$/;"	m	struct:socket_s	file:
ht_clear	src/hashtable.c	/^int_t ht_clear( ht_t * const htable )$/;"	f
ht_count	src/hashtable.c	/^uint_t ht_count( ht_t * const htable )$/;"	f
ht_deinitialize	src/hashtable.c	/^int_t ht_deinitialize( ht_t * const htable )$/;"	f
ht_delete	src/hashtable.c	/^void ht_delete(void * ht)$/;"	f
ht_delete_fn	src/hashtable.h	/^typedef void (*ht_delete_fn)(void * value);$/;"	t
ht_find	src/hashtable.c	/^ht_itr_t ht_find( ht_t const * const htable, void * const data )$/;"	f
ht_get	src/hashtable.c	/^void * ht_get( ht_t const * const htable, ht_itr_t const itr )$/;"	f
ht_get_new_size	src/hashtable.c	/^static uint_t ht_get_new_size( uint_t const count, float const limit )$/;"	f	file:
ht_grow	src/hashtable.c	/^static int_t ht_grow( ht_t * const htable )$/;"	f	file:
ht_hash_fn	src/hashtable.h	/^typedef uint_t (*ht_hash_fn)(void const * const key);$/;"	t
ht_initialize	src/hashtable.c	/^int_t ht_initialize( ht_t * const htable, uint_t const initial_capacity, $/;"	f
ht_insert	src/hashtable.c	/^int_t ht_insert( ht_t * const htable, void * const data )$/;"	f
ht_itr_begin	src/hashtable.c	/^ht_itr_t ht_itr_begin( ht_t const * const htable )$/;"	f
ht_itr_end	src/hashtable.c	/^ht_itr_t ht_itr_end( ht_t const * const htable )$/;"	f
ht_itr_end_t	src/hashtable.c	/^ht_itr_t const ht_itr_end_t = { -1, -1 };$/;"	v
ht_itr_next	src/hashtable.c	/^ht_itr_t ht_itr_next( ht_t const * const htable, ht_itr_t const itr )$/;"	f
ht_itr_prev	src/hashtable.h	91;"	d
ht_itr_rbegin	src/hashtable.c	/^ht_itr_t ht_itr_rbegin( ht_t const * const htable )$/;"	f
ht_itr_rend	src/hashtable.h	88;"	d
ht_itr_rnext	src/hashtable.c	/^ht_itr_t ht_itr_rnext( ht_t const * const htable, ht_itr_t const itr )$/;"	f
ht_itr_rprev	src/hashtable.h	92;"	d
ht_itr_s	src/hashtable.h	/^typedef struct ht_itr_s$/;"	s
ht_itr_t	src/hashtable.h	/^} ht_itr_t;$/;"	t	typeref:struct:ht_itr_s
ht_match_fn	src/hashtable.h	/^typedef int_t (*ht_match_fn)(void const * const l, void const * const r);$/;"	t
ht_new	src/hashtable.c	/^ht_t* ht_new( uint_t const initial_capacity, ht_hash_fn hfn, $/;"	f
ht_remove	src/hashtable.c	/^int_t ht_remove( ht_t * const htable, ht_itr_t const itr )$/;"	f
ht_s	src/hashtable.h	/^typedef struct ht_s$/;"	s
ht_t	src/hashtable.h	/^} ht_t;$/;"	t	typeref:struct:ht_s
idx	src/hashtable.h	/^    int_t               idx;                \/* index of the list *\/$/;"	m	struct:ht_itr_s
init_aiofd_suite	tests/test_aiofd.c	/^static int init_aiofd_suite( void )$/;"	f	file:
init_bitset_suite	tests/test_bitset.c	/^static int init_bitset_suite( void )$/;"	f	file:
init_btree_suite	tests/test_btree.c	/^static int init_btree_suite( void )$/;"	f	file:
init_buffer_suite	tests/test_buffer.c	/^static int init_buffer_suite( void )$/;"	f	file:
init_child_suite	tests/test_child.c	/^static int init_child_suite( void )$/;"	f	file:
init_events_suite	tests/test_events.c	/^static int init_events_suite( void )$/;"	f	file:
init_hashtable_suite	tests/test_hashtable.c	/^static int init_hashtable_suite( void )$/;"	f	file:
init_list_suite	tests/test_list.c	/^static int init_list_suite( void )$/;"	f	file:
init_pair_suite	tests/test_pair.c	/^static int init_pair_suite( void )$/;"	f	file:
init_privileges_suite	tests/test_privileges.c	/^static int init_privileges_suite( void )$/;"	f	file:
init_sanitize_suite	tests/test_sanitize.c	/^static int init_sanitize_suite( void )$/;"	f	file:
init_socket_suite	tests/test_socket.c	/^static int init_socket_suite( void )$/;"	f	file:
initial	src/hashtable.h	/^    uint_t              initial;            \/* initial capacity *\/$/;"	m	struct:ht_s
insert_item	src/list.c	/^static list_itr_t insert_item( list_item_t * const items, $/;"	f	file:
int_less	tests/test_btree.c	/^static int int_less( void * l, void * r )$/;"	f	file:
int_t	src/macros.h	/^typedef int32_t int_t;$/;"	t
int_t	src/macros.h	/^typedef int64_t int_t;$/;"	t
io	src/events.h	/^    struct ev_io        io;$/;"	m	union:ev_data_u	typeref:struct:ev_data_u::ev_io
io_params	src/events.h	/^    } io_params;$/;"	m	union:evt_params_u	typeref:struct:evt_params_u::__anon3
iov	src/aiofd.c	/^    int_t iov;$/;"	m	struct:aiofd_write_s	file:
items	src/list.h	/^    list_item_t*    items;                  \/* array of list items *\/$/;"	m	struct:list_s
itr	src/hashtable.h	/^    list_itr_t          itr;                \/* list iterator *\/$/;"	m	struct:ht_itr_s
itr_end	src/btree.c	/^static const bt_itr_t itr_end = NULL;$/;"	v	file:
kcfn	src/btree.c	/^    bt_key_cmp_fn       kcfn;       \/* key compare function *\/$/;"	m	struct:bt_s	file:
kdfn	src/btree.c	/^    bt_delete_fn        kdfn;       \/* key delete function *\/$/;"	m	struct:bt_s	file:
key	src/btree.c	/^    void * key;                 \/* key *\/$/;"	m	struct:node_s	file:
left	src/btree.c	/^    struct node_s * left;       \/* left child *\/$/;"	m	struct:node_s	typeref:struct:node_s::node_s	file:
limit	src/hashtable.h	/^    float               limit;              \/* load limit that will trigger resize *\/$/;"	m	struct:ht_s
list	tests/test_all.c	/^SUITE( list );$/;"	v
list_clear	src/list.c	/^int_t list_clear( list_t * const list )$/;"	f
list_count	src/list.c	/^uint_t list_count( list_t const * const list )$/;"	f
list_deinitialize	src/list.c	/^int_t list_deinitialize( list_t * const list )$/;"	f
list_delete	src/list.c	/^void list_delete( void * l )$/;"	f
list_delete_fn	src/list.h	/^typedef void (*list_delete_fn)(void*);$/;"	t
list_get	src/list.c	/^void * list_get( list_t const * const list, list_itr_t const itr )$/;"	f
list_get_head	src/list.h	87;"	d
list_get_tail	src/list.h	88;"	d
list_grow	src/list.c	/^static int_t list_grow( list_t * const list, uint_t amount )$/;"	f	file:
list_initialize	src/list.c	/^int_t list_initialize( list_t * const list, uint_t const initial_capacity, list_delete_fn dfn )$/;"	f
list_item_s	src/list.c	/^struct list_item_s$/;"	s	file:
list_item_t	src/list.h	/^typedef struct list_item_s list_item_t;$/;"	t	typeref:struct:list_item_s
list_itr_begin	src/list.c	/^list_itr_t list_itr_begin( list_t const * const list )$/;"	f
list_itr_end	src/list.c	/^list_itr_t list_itr_end( list_t const * const list )$/;"	f
list_itr_end_t	src/list.c	/^list_itr_t const list_itr_end_t = -1;$/;"	v
list_itr_head	src/list.h	64;"	d
list_itr_next	src/list.c	/^list_itr_t list_itr_next( list_t const * const list, list_itr_t const itr )$/;"	f
list_itr_prev	src/list.h	72;"	d
list_itr_rbegin	src/list.h	66;"	d
list_itr_rend	src/list.h	67;"	d
list_itr_rnext	src/list.c	/^list_itr_t list_itr_rnext( list_t const * const list, list_itr_t const itr )$/;"	f
list_itr_rprev	src/list.h	73;"	d
list_itr_t	src/list.h	/^typedef int_t list_itr_t;$/;"	t
list_itr_tail	src/list.c	/^list_itr_t list_itr_tail( list_t const * const list )$/;"	f
list_new	src/list.c	/^list_t * list_new( uint_t const initial_capacity, list_delete_fn dfn )$/;"	f
list_pop	src/list.c	/^list_itr_t list_pop( list_t * const list, list_itr_t const itr )$/;"	f
list_pop_head	src/list.h	82;"	d
list_pop_tail	src/list.h	83;"	d
list_push	src/list.c	/^int_t list_push( list_t * const list, void * const data, list_itr_t const itr )$/;"	f
list_push_head	src/list.h	77;"	d
list_push_tail	src/list.h	78;"	d
list_reserve	src/list.c	/^int_t list_reserve( list_t * const list, uint const amount )$/;"	f
list_s	src/list.h	/^typedef struct list_s$/;"	s
list_size	src/btree.c	/^    uint_t              list_size;  \/* equal to initial capacity, size blocks in node_list *\/$/;"	m	struct:bt_s	file:
list_t	src/list.h	/^} list_t;$/;"	t	typeref:struct:list_s
listen	src/aiofd.h	/^    int         listen;         \/* is this a bound and listening socket fd? *\/$/;"	m	struct:aiofd_s
listlog_fns	src/log.c	/^static cookie_io_functions_t listlog_fns =$/;"	v	file:
listlog_writer	src/log.c	/^static ssize_t listlog_writer( void * cookie, char const * data, size_t leng )$/;"	f	file:
lists	src/hashtable.h	/^    list_t*             lists;              \/* pointer to list array *\/$/;"	m	struct:ht_s
log_s	src/log.h	/^typedef struct log_s$/;"	s
log_t	src/log.h	/^} log_t;$/;"	t	typeref:struct:log_s
log_type_s	src/log.h	/^typedef enum log_type_s$/;"	g
log_type_t	src/log.h	/^} log_type_t;$/;"	t	typeref:enum:log_type_s
main	tests/test_all.c	/^int main()$/;"	f
match_fn	tests/test_hashtable.c	/^static int_t match_fn( void const * const l, void const * const r )$/;"	f	file:
max	src/btree.c	34;"	d	file:
mfn	src/hashtable.h	/^    ht_match_fn         mfn;                \/* match function *\/$/;"	m	struct:ht_s
min	src/btree.c	33;"	d	file:
next	src/btree.c	/^    struct node_s * next;       \/* traversal threading pointer\/free list pointer *\/$/;"	m	struct:node_s	typeref:struct:node_s::node_s	file:
next	src/list.c	/^    int_t   next;   \/* next node in the list *\/$/;"	m	struct:list_item_s	file:
ngroups	src/privileges.h	/^    int     ngroups;$/;"	m	struct:priv_state_s
nleft	src/aiofd.c	/^    size_t nleft;$/;"	m	struct:aiofd_write_s	file:
node_list	src/btree.c	/^    node_t**            node_list;  \/* memory for the nodes *\/$/;"	m	struct:bt_s	file:
node_s	src/btree.c	/^typedef struct node_s$/;"	s	file:
node_t	src/btree.c	/^} node_t;$/;"	t	typeref:struct:node_s	file:
noop	src/log.c	/^static int noop( void ) { return 0; }$/;"	f	file:
num_bits	src/bitset.h	/^    size_t num_bits;$/;"	m	struct:bitset_s
num_lists	src/btree.c	/^    uint_t              num_lists;  \/* number of blocks allocated *\/$/;"	m	struct:bt_s	file:
oldact	src/events.h	/^        struct sigaction oldact;\/* old action value for specified signal *\/$/;"	m	struct:evt_params_u::__anon1	typeref:struct:evt_params_u::__anon1::sigaction
oldact	src/events.h	/^        struct sigaction oldact;\/* old action value for specified signal *\/$/;"	m	struct:evt_params_u::__anon2	typeref:struct:evt_params_u::__anon2::sigaction
oldset	src/events.h	/^        sigset_t oldset;        \/* old mask value for specified signal *\/$/;"	m	struct:evt_params_u::__anon1
oldset	src/events.h	/^        sigset_t oldset;        \/* old mask value for specified signal *\/$/;"	m	struct:evt_params_u::__anon2
open_devnull	src/sanitize.c	/^static int_t open_devnull( int fd )$/;"	f	file:
ops	src/aiofd.h	/^    }           ops;$/;"	m	struct:aiofd_s	typeref:struct:aiofd_s::aiofd_ops_s
ops	src/child.c	/^    child_ops_t     ops;            \/* child proces callbacks *\/$/;"	m	struct:child_process_s	file:
ops	src/socket.c	/^    socket_ops_t    ops;            \/* socket callbacks *\/$/;"	m	struct:socket_s	file:
pair	tests/test_all.c	/^SUITE( pair );$/;"	v
pair_delete	src/pair.c	/^void pair_delete( void * p )$/;"	f
pair_first	src/pair.c	/^void * pair_first( pair_t const * const pair )$/;"	f
pair_new	src/pair.c	/^pair_t * pair_new( void * first, void * second )$/;"	f
pair_s	src/pair.c	/^struct pair_s$/;"	s	file:
pair_second	src/pair.c	/^void * pair_second( pair_t const * const pair )$/;"	f
pair_t	src/pair.h	/^typedef struct pair_s pair_t;$/;"	t	typeref:struct:pair_s
parent	src/btree.c	/^    struct node_s * parent;     \/* parent pointer *\/$/;"	m	struct:node_s	typeref:struct:node_s::node_s	file:
per_write_data	src/aiofd.c	/^    void * per_write_data;$/;"	m	struct:aiofd_write_s	file:
pid	src/child.c	/^    pid_t           pid;            \/* the pid of the child process *\/$/;"	m	struct:child_process_s	file:
pid	src/daemon.c	/^pid_t pid, sid;$/;"	v
pid	src/events.h	/^        int pid;    \/* pid to watch *\/$/;"	m	struct:evt_params_u::__anon2
pint_less	tests/test_btree.c	/^static int pint_less( void * l, void * r )$/;"	f	file:
port	src/socket.c	/^    uint8_t *       port;           \/* port number as string *\/$/;"	m	struct:socket_s	file:
preserve_environ	src/sanitize.c	/^static uint8_t * preserve_environ[] =$/;"	v	file:
preserve_environ	tests/test_sanitize.c	/^static uint8_t * preserve_environ[] =$/;"	v	file:
prev	src/btree.c	/^    struct node_s * prev;       \/* traversal threading pointer *\/$/;"	m	struct:node_s	typeref:struct:node_s::node_s	file:
prev	src/list.c	/^    int_t   prev;   \/* prev node in the list *\/$/;"	m	struct:list_item_s	file:
priov	src/log.c	/^static int8_t * const priov[] =$/;"	v	file:
priv_state_s	src/privileges.h	/^typedef struct priv_state_s$/;"	s
priv_state_t	src/privileges.h	/^} priv_state_t;$/;"	t	typeref:struct:priv_state_s
privileges	tests/test_all.c	/^SUITE( privileges );$/;"	v
r	src/aiofd.c	/^    int r, w, e;$/;"	m	struct:cb_count_s	file:
read_callback_fn	src/aiofd.c	/^static int_t read_callback_fn( aiofd_t * const aiofd, size_t nread, void * user_data )$/;"	f	file:
read_callback_ret	src/aiofd.c	/^static int_t read_callback_ret = TRUE;$/;"	v	file:
read_evt_fn	src/aiofd.h	/^        int_t (*read_evt_fn)( aiofd_t * const aiofd, size_t nread, void * user_data );$/;"	m	struct:aiofd_s::aiofd_ops_s
read_evt_fn	src/child.h	/^    int_t (*read_evt_fn)( child_process_t * const cp, size_t nread, void * user_data );$/;"	m	struct:child_ops_s
read_evt_fn	tests/test_aiofd.c	/^static int_t read_evt_fn( aiofd_t * const aiofd, size_t nread, void * user_data )$/;"	f	file:
read_evt_fn	tests/test_child.c	/^static int_t read_evt_fn( child_process_t * const cp, size_t nread, void * user_data )$/;"	f	file:
read_fn	src/aiofd.h	/^        ssize_t (*read_fn)(int fd, void * const buf, size_t const count, void * user_data);$/;"	m	struct:aiofd_s::aiofd_ops_s
read_fn	src/socket.h	/^    ssize_t (*read_fn)( socket_t * const s, size_t const nread, void * user_data );$/;"	m	struct:socket_ops_s
read_fn	tests/test_aiofd.c	/^static ssize_t read_fn(int fd, void *buf, size_t count, void * user_data)$/;"	f	file:
read_fn	tests/test_socket.c	/^static ssize_t read_fn( socket_t * const s, size_t const nread, void * user_data )$/;"	f	file:
read_pid_evt_fn	tests/test_child.c	/^static int_t read_pid_evt_fn( child_process_t * const cp, size_t nread, void * user_data )$/;"	f	file:
readaddr	src/socket.c	/^    sockaddr_t *    readaddr;       \/* place to put addr for UDP read *\/$/;"	m	struct:socket_s	file:
readaddrlen	src/socket.c	/^    socklen_t *     readaddrlen;    \/* place to put addr len for UDP read *\/$/;"	m	struct:socket_s	file:
readv_fn	src/aiofd.h	/^        ssize_t (*readv_fn)(int fd, struct iovec * const iov, size_t const iovcnt, void * user_data);$/;"	m	struct:aiofd_s::aiofd_ops_s
readv_fn	tests/test_aiofd.c	/^static ssize_t readv_fn(int fd, struct iovec *iov, int iovcnt, void * user_data)$/;"	f	file:
remove_item	src/list.c	/^static list_itr_t remove_item( list_item_t * const items, list_itr_t const itr )$/;"	f	file:
reset_signals_to_default	src/sanitize.c	/^int_t reset_signals_to_default( sigset_t const * const sigs )$/;"	f
reset_test_flags	tests/test_flags.c	/^void reset_test_flags( void )$/;"	f
restore_privileges	src/privileges.c	/^int_t restore_privileges( priv_state_t const * const orig )$/;"	f
revt	src/aiofd.h	/^    evt_t       revt;           \/* read event *\/$/;"	m	struct:aiofd_s
rfd	src/aiofd.h	/^    int         rfd;            \/* read fd if two are given *\/$/;"	m	struct:aiofd_s
right	src/btree.c	/^    struct node_s * right;      \/* right child *\/$/;"	m	struct:node_s	typeref:struct:node_s::node_s	file:
rpid	src/events.h	/^        int rpid;   \/* pid of process causing change *\/$/;"	m	struct:evt_params_u::__anon2
rstatus	src/events.h	/^        int rstatus;\/* status word of process, use macros from sys\/wait.h, waitpid *\/$/;"	m	struct:evt_params_u::__anon2
safe_fork	src/child.c	/^static pid_t safe_fork( int keepfds[], int nfds, int drop )$/;"	f	file:
sanitize	tests/test_all.c	/^SUITE( sanitize );$/;"	v
sanitize_files	src/sanitize.c	/^int_t sanitize_files( int keep[], int nfds )$/;"	f
second	src/pair.c	/^    void * second;$/;"	m	struct:pair_s	file:
second	tests/test_pair.c	/^int8_t const * const second = "second";$/;"	v
sid	src/daemon.c	/^pid_t pid, sid;$/;"	v
sig	src/events.h	/^    struct ev_signal    sig;$/;"	m	union:ev_data_u	typeref:struct:ev_data_u::ev_signal
sigchld	src/child.c	/^    evt_t           sigchld;        \/* the SIGCHILD signal event handler *\/$/;"	m	struct:child_process_s	file:
sigchld_cb	src/child.c	/^static evt_ret_t sigchld_cb( evt_loop_t * const el,$/;"	f	file:
signal_params	src/events.h	/^    } signal_params;$/;"	m	union:evt_params_u	typeref:struct:evt_params_u::__anon1
signum	src/events.h	/^        int signum;$/;"	m	struct:evt_params_u::__anon1
size	src/aiofd.c	/^    size_t size;$/;"	m	struct:aiofd_write_s	file:
size	src/btree.c	/^    uint_t              size;       \/* number of nodes in the tree *\/$/;"	m	struct:bt_s	file:
size	src/hashtable.h	/^    uint_t              size;               \/* the size of the list array *\/$/;"	m	struct:ht_s
size	src/list.h	/^    uint_t          size;                   \/* total number of allocated slots in list *\/$/;"	m	struct:list_s
size	tests/test_buffer.c	/^size_t const size = 5;$/;"	v
sock_state_s	tests/test_socket.c	/^typedef struct sock_state_s$/;"	s	file:
sock_state_t	tests/test_socket.c	/^} sock_state_t;$/;"	t	typeref:struct:sock_state_s	file:
sockaddr_t	src/socket.h	/^typedef struct sockaddr_storage sockaddr_t;$/;"	t	typeref:struct:sockaddr_storage
socket	tests/test_all.c	/^SUITE( socket );$/;"	v
socket_accept	src/socket.c	/^socket_t * socket_accept( socket_t * const s,$/;"	f
socket_aiofd_error_evt_fn	src/socket.c	/^static int_t socket_aiofd_error_evt_fn( aiofd_t * const aiofd,$/;"	f	file:
socket_aiofd_read_evt_fn	src/socket.c	/^static int_t socket_aiofd_read_evt_fn( aiofd_t * const aiofd,$/;"	f	file:
socket_aiofd_write_evt_fn	src/socket.c	/^static int_t socket_aiofd_write_evt_fn( aiofd_t * const aiofd,$/;"	f	file:
socket_bind	src/socket.c	/^socket_ret_t socket_bind( socket_t * const s )$/;"	f
socket_connect	src/socket.c	/^socket_ret_t socket_connect( socket_t * const s )$/;"	f
socket_deinitialize	src/socket.c	/^static void socket_deinitialize( socket_t * const s )$/;"	f	file:
socket_delete	src/socket.c	/^void socket_delete( void * s )$/;"	f
socket_disconnect	src/socket.c	/^socket_ret_t socket_disconnect( socket_t* const s )$/;"	f
socket_flush	src/socket.c	/^socket_ret_t socket_flush( socket_t* const s )$/;"	f
socket_get_addr	src/socket.c	/^int_t socket_get_addr( socket_t const * const s,$/;"	f
socket_get_addr_flags_string	src/socket.c	/^static uint8_t * socket_get_addr_flags_string( int flags )$/;"	f	file:
socket_get_addr_string	src/socket.c	/^int_t socket_get_addr_string( sockaddr_t const * const addr,$/;"	f
socket_get_addrinfo_string	src/socket.c	/^static uint8_t * socket_get_addrinfo_string( addrinfo_t const * const info )$/;"	f	file:
socket_get_error	src/socket.c	/^static int_t socket_get_error( socket_t * const s, int * errval )$/;"	f	file:
socket_get_type	src/socket.c	/^socket_type_t socket_get_type( socket_t * const s )$/;"	f
socket_in_addr	src/socket.c	/^void * socket_in_addr( sockaddr_t * const addr )$/;"	f
socket_in_port	src/socket.c	/^static inline in_port_t socket_in_port( sockaddr_t * const addr )$/;"	f	file:
socket_initialize	src/socket.c	/^static int socket_initialize( socket_t * const s,$/;"	f	file:
socket_is_bound	src/socket.c	/^int_t socket_is_bound( socket_t const * const s )$/;"	f
socket_is_connected	src/socket.c	/^int_t socket_is_connected( socket_t const * const s )$/;"	f
socket_is_listening	src/socket.c	/^int_t socket_is_listening( socket_t const * const s )$/;"	f
socket_listen	src/socket.c	/^socket_ret_t socket_listen( socket_t * const s, int const backlog )$/;"	f
socket_new	src/socket.c	/^socket_t* socket_new( socket_type_t const type, $/;"	f
socket_open_socket	src/socket.c	/^static int_t socket_open_socket( socket_t * const s, $/;"	f	file:
socket_open_tcp_socket	src/socket.c	/^static int_t socket_open_tcp_socket( socket_t * const s,$/;"	f	file:
socket_open_udp_socket	src/socket.c	/^static int_t socket_open_udp_socket( socket_t * const s,$/;"	f	file:
socket_open_unix_socket	src/socket.c	/^static int_t socket_open_unix_socket( socket_t * const s,$/;"	f	file:
socket_ops_s	src/socket.h	/^typedef struct socket_ops_s $/;"	s
socket_ops_t	src/socket.h	/^} socket_ops_t;$/;"	t	typeref:struct:socket_ops_s
socket_read	src/socket.c	/^ssize_t socket_read( socket_t* const s, $/;"	f
socket_read_from	src/socket.c	/^ssize_t socket_read_from( socket_t* const s, $/;"	f
socket_readv	src/socket.c	/^ssize_t socket_readv( socket_t * const s,$/;"	f
socket_readv_from	src/socket.c	/^ssize_t socket_readv_from( socket_t * const s,$/;"	f
socket_ret_e	src/socket.h	/^typedef enum socket_ret_e$/;"	g
socket_ret_t	src/socket.h	/^} socket_ret_t;$/;"	t	typeref:enum:socket_ret_e
socket_s	src/socket.c	/^struct socket_s$/;"	s	file:
socket_t	src/socket.h	/^typedef struct socket_s socket_t;$/;"	t	typeref:struct:socket_s
socket_type_e	src/socket.h	/^typedef enum socket_type_e$/;"	g
socket_type_t	src/socket.h	/^} socket_type_t;$/;"	t	typeref:enum:socket_type_e
socket_udp_read_fn	src/socket.c	/^static ssize_t socket_udp_read_fn( int fd, void * const buf, size_t const count, void * user_data )$/;"	f	file:
socket_udp_readv_fn	src/socket.c	/^static ssize_t socket_udp_readv_fn( int fd, struct iovec * const iov, size_t const iovcnt, void * user_data )$/;"	f	file:
socket_udp_write_fn	src/socket.c	/^static ssize_t socket_udp_write_fn( int fd, void const * const buf, size_t const count, void * user_data, void * per_write_data )$/;"	f	file:
socket_udp_writev_fn	src/socket.c	/^static ssize_t socket_udp_writev_fn( int fd, struct iovec const * const iov, size_t const iovcnt, void * user_data, void * per_write_data )$/;"	f	file:
socket_validate_port	src/socket.c	/^static inline int_t socket_validate_port( uint8_t const * const port )$/;"	f	file:
socket_write	src/socket.c	/^socket_ret_t socket_write( socket_t * const s,$/;"	f
socket_write_to	src/socket.c	/^socket_ret_t socket_write_to( socket_t * const s,$/;"	f
socket_writev	src/socket.c	/^socket_ret_t socket_writev( socket_t * const s,$/;"	f
socket_writev_to	src/socket.c	/^socket_ret_t socket_writev_to( socket_t * const s,$/;"	f
start_logging	src/log.c	/^log_t * start_logging( log_type_t type, void * param, int append )$/;"	f
stop_logging	src/log.c	/^void stop_logging( log_t * log )$/;"	f
syslog_fns	src/log.c	/^static cookie_io_functions_t syslog_fns =$/;"	v	file:
syslog_writer	src/log.c	/^static ssize_t syslog_writer( void * cookie, char const * data, size_t leng )$/;"	f	file:
t_cdone	tests/test_socket.c	/^static int t_cdone = FALSE;$/;"	v	file:
t_client_connect_fn	tests/test_socket.c	/^static socket_ret_t t_client_connect_fn( socket_t * const s, void * user_data )$/;"	f	file:
t_client_disconnect_fn	tests/test_socket.c	/^static socket_ret_t t_client_disconnect_fn( socket_t * const s, void * user_data )$/;"	f	file:
t_client_error_fn	tests/test_socket.c	/^static socket_ret_t t_client_error_fn( socket_t * const s, int err, void * user_data )$/;"	f	file:
t_client_read_fn	tests/test_socket.c	/^static ssize_t t_client_read_fn( socket_t * const s, size_t const nread, void * user_data )$/;"	f	file:
t_client_write_fn	tests/test_socket.c	/^static ssize_t t_client_write_fn( socket_t * const s, uint8_t const * const buffer, void * user_data )$/;"	f	file:
t_incoming_fn	tests/test_socket.c	/^static socket_ret_t t_incoming_fn( socket_t * const s, void * user_data )$/;"	f	file:
t_sclose	tests/test_socket.c	/^static int t_sclose = FALSE;$/;"	v	file:
t_sdone	tests/test_socket.c	/^static int t_sdone = FALSE;$/;"	v	file:
t_server_connect_fn	tests/test_socket.c	/^static socket_ret_t t_server_connect_fn( socket_t * const s, void * user_data )$/;"	f	file:
t_server_disconnect_fn	tests/test_socket.c	/^static socket_ret_t t_server_disconnect_fn( socket_t * const s, void * user_data )$/;"	f	file:
t_server_error_fn	tests/test_socket.c	/^static socket_ret_t t_server_error_fn( socket_t * const s, int err, void * user_data )$/;"	f	file:
t_server_read_fn	tests/test_socket.c	/^static ssize_t t_server_read_fn( socket_t * const s, size_t const nread, void * user_data )$/;"	f	file:
t_server_write_fn	tests/test_socket.c	/^static ssize_t t_server_write_fn( socket_t * const s, uint8_t const * const buffer, void * user_data )$/;"	f	file:
test_aiofd_delete_null	tests/test_aiofd.c	/^static void test_aiofd_delete_null( void )$/;"	f	file:
test_aiofd_flush_null	tests/test_aiofd.c	/^static void test_aiofd_flush_null( void )$/;"	f	file:
test_aiofd_get_listen_null	tests/test_aiofd.c	/^static void test_aiofd_get_listen_null( void )$/;"	f	file:
test_aiofd_init_fail_evt_init	tests/test_aiofd.c	/^static void test_aiofd_init_fail_evt_init( void )$/;"	f	file:
test_aiofd_init_fail_list_init	tests/test_aiofd.c	/^static void test_aiofd_init_fail_list_init( void )$/;"	f	file:
test_aiofd_init_prereqs	tests/test_aiofd.c	/^static void test_aiofd_init_prereqs( void )$/;"	f	file:
test_aiofd_initdeinit	tests/test_aiofd.c	/^static void test_aiofd_initdeinit( void )$/;"	f	file:
test_aiofd_new_fail_alloc	tests/test_aiofd.c	/^static void test_aiofd_new_fail_alloc( void )$/;"	f	file:
test_aiofd_new_fail_init	tests/test_aiofd.c	/^static void test_aiofd_new_fail_init( void )$/;"	f	file:
test_aiofd_newdel	tests/test_aiofd.c	/^static void test_aiofd_newdel( void )$/;"	f	file:
test_aiofd_private_functions	src/aiofd.c	/^void test_aiofd_private_functions( void )$/;"	f
test_aiofd_read	tests/test_aiofd.c	/^static void test_aiofd_read( void )$/;"	f	file:
test_aiofd_read_fn	src/aiofd.c	/^static void test_aiofd_read_fn( void )$/;"	f	file:
test_aiofd_set_listen_null	tests/test_aiofd.c	/^static void test_aiofd_set_listen_null( void )$/;"	f	file:
test_aiofd_start_stop_read	tests/test_aiofd.c	/^static void test_aiofd_start_stop_read( void )$/;"	f	file:
test_aiofd_start_stop_write	tests/test_aiofd.c	/^static void test_aiofd_start_stop_write( void )$/;"	f	file:
test_aiofd_write_common	src/aiofd.c	/^void test_aiofd_write_common( void )$/;"	f
test_aiofd_write_fn	src/aiofd.c	/^static void test_aiofd_write_fn( void )$/;"	f	file:
test_aiofd_writev	tests/test_aiofd.c	/^static void test_aiofd_writev( void )$/;"	f	file:
test_bitset_clear_prereqs	tests/test_bitset.c	/^void test_bitset_clear_prereqs( void )$/;"	f
test_bitset_clearall	tests/test_bitset.c	/^void test_bitset_clearall( void )$/;"	f
test_bitset_clearall_prereqs	tests/test_bitset.c	/^void test_bitset_clearall_prereqs( void )$/;"	f
test_bitset_deinit_null	tests/test_bitset.c	/^void test_bitset_deinit_null( void )$/;"	f
test_bitset_deinit_prereqs	tests/test_bitset.c	/^void test_bitset_deinit_prereqs( void )$/;"	f
test_bitset_delete_null	tests/test_bitset.c	/^void test_bitset_delete_null( void )$/;"	f
test_bitset_fail_alloc	tests/test_bitset.c	/^void test_bitset_fail_alloc( void )$/;"	f
test_bitset_init_fail_alloc	tests/test_bitset.c	/^void test_bitset_init_fail_alloc( void )$/;"	f
test_bitset_init_null	tests/test_bitset.c	/^void test_bitset_init_null( void )$/;"	f
test_bitset_initdeinit	tests/test_bitset.c	/^void test_bitset_initdeinit( void )$/;"	f
test_bitset_maxsize	tests/test_bitset.c	/^void test_bitset_maxsize( void )$/;"	f
test_bitset_new_fail_init	tests/test_bitset.c	/^void test_bitset_new_fail_init( void )$/;"	f
test_bitset_newdel	tests/test_bitset.c	/^void test_bitset_newdel( void )$/;"	f
test_bitset_patternbitclears	tests/test_bitset.c	/^void test_bitset_patternbitclears( void )$/;"	f
test_bitset_patternbitflips	tests/test_bitset.c	/^void test_bitset_patternbitflips( void )$/;"	f
test_bitset_private_functions	src/bitset.c	/^void test_bitset_private_functions(void)$/;"	f
test_bitset_randombitflips	tests/test_bitset.c	/^void test_bitset_randombitflips( void )$/;"	f
test_bitset_set_prereqs	tests/test_bitset.c	/^void test_bitset_set_prereqs( void )$/;"	f
test_bitset_setall	tests/test_bitset.c	/^void test_bitset_setall( void )$/;"	f
test_bitset_setall_prereqs	tests/test_bitset.c	/^void test_bitset_setall_prereqs( void )$/;"	f
test_bitset_test_prereqs	tests/test_bitset.c	/^void test_bitset_test_prereqs( void )$/;"	f
test_bitset_zerosize	tests/test_bitset.c	/^void test_bitset_zerosize( void )$/;"	f
test_btree_iterator	tests/test_btree.c	/^static void test_btree_iterator( void )$/;"	f	file:
test_btree_newdel	tests/test_btree.c	/^void test_btree_newdel( void )$/;"	f
test_btree_print	tests/test_btree.c	/^static void test_btree_print(void)$/;"	f	file:
test_btree_private_functions	src/btree.c	/^void test_btree_private_functions( void )$/;"	f
test_btree_random	tests/test_btree.c	/^static void test_btree_random( void )$/;"	f	file:
test_btree_random_default	tests/test_btree.c	/^static void test_btree_random_default( void )$/;"	f	file:
test_btree_random_duplicate	tests/test_btree.c	/^static void test_btree_random_duplicate( void )$/;"	f	file:
test_btree_random_dynamic	tests/test_btree.c	/^static void test_btree_random_dynamic( void )$/;"	f	file:
test_buffer_append	tests/test_buffer.c	/^static void test_buffer_append( void )$/;"	f	file:
test_buffer_append_prereqs	tests/test_buffer.c	/^static void test_buffer_append_prereqs( void )$/;"	f	file:
test_buffer_append_pwned	tests/test_buffer.c	/^static void test_buffer_append_pwned( void )$/;"	f	file:
test_buffer_deinit_fail	tests/test_buffer.c	/^static void test_buffer_deinit_fail( void )$/;"	f	file:
test_buffer_deinit_null	tests/test_buffer.c	/^static void test_buffer_deinit_null( void )$/;"	f	file:
test_buffer_delete_null	tests/test_buffer.c	/^static void test_buffer_delete_null( void )$/;"	f	file:
test_buffer_init_fail_alloc	tests/test_buffer.c	/^static void test_buffer_init_fail_alloc( void )$/;"	f	file:
test_buffer_init_null	tests/test_buffer.c	/^static void test_buffer_init_null( void )$/;"	f	file:
test_buffer_initdeinit	tests/test_buffer.c	/^static void test_buffer_initdeinit( void )$/;"	f	file:
test_buffer_initdeinit_pwned	tests/test_buffer.c	/^static void test_buffer_initdeinit_pwned( void )$/;"	f	file:
test_buffer_new_fail_alloc	tests/test_buffer.c	/^static void test_buffer_new_fail_alloc( void )$/;"	f	file:
test_buffer_new_fail_init	tests/test_buffer.c	/^static void test_buffer_new_fail_init( void )$/;"	f	file:
test_buffer_newdel	tests/test_buffer.c	/^static void test_buffer_newdel( void )$/;"	f	file:
test_buffer_newdel_pwned	tests/test_buffer.c	/^static void test_buffer_newdel_pwned( void )$/;"	f	file:
test_buffer_private_functions	src/buffer.c	/^void test_buffer_private_functions( void )$/;"	f
test_child_aiofd_error_evt_fn	src/child.c	/^static void test_child_aiofd_error_evt_fn( void )$/;"	f	file:
test_child_aiofd_read_evt_fn	src/child.c	/^static void test_child_aiofd_read_evt_fn( void )$/;"	f	file:
test_child_aiofd_write_evt_fn	src/child.c	/^static void test_child_aiofd_write_evt_fn( void )$/;"	f	file:
test_child_newdel	tests/test_child.c	/^static void test_child_newdel( void )$/;"	f	file:
test_child_newdel_fail_first_pipe	tests/test_child.c	/^static void test_child_newdel_fail_first_pipe( void )$/;"	f	file:
test_child_newdel_fail_fork	tests/test_child.c	/^static void test_child_newdel_fail_fork( void )$/;"	f	file:
test_child_newdel_fail_second_pipe	tests/test_child.c	/^static void test_child_newdel_fail_second_pipe( void )$/;"	f	file:
test_child_private_functions	src/child.c	/^void test_child_private_functions( void )$/;"	f
test_child_process_flush	tests/test_child.c	/^void test_child_process_flush( void )$/;"	f
test_child_process_write	tests/test_child.c	/^void test_child_process_write( void )$/;"	f
test_child_process_writev	tests/test_child.c	/^void test_child_process_writev( void )$/;"	f
test_child_read	tests/test_child.c	/^static void test_child_read( void )$/;"	f	file:
test_child_wait	tests/test_child.c	/^static void test_child_wait( void )$/;"	f	file:
test_connect_fn	src/socket.c	/^static socket_ret_t test_connect_fn( socket_t * const s, void * user_data )$/;"	f	file:
test_connect_fn_ret	src/socket.c	/^socket_ret_t test_connect_fn_ret = SOCKET_OK;$/;"	v
test_delete_event_handler	tests/test_events.c	/^static void test_delete_event_handler( void )$/;"	f	file:
test_error_evt_fn	src/child.c	/^static int_t test_error_evt_fn( child_process_t * const cp, int err, void * user_data )$/;"	f	file:
test_error_fn	src/socket.c	/^static socket_ret_t test_error_fn( socket_t * const s, int err, void * user_data )$/;"	f	file:
test_error_fn_ret	src/socket.c	/^socket_ret_t test_error_fn_ret = SOCKET_OK;$/;"	v
test_event_callback	tests/test_events.c	/^static evt_ret_t test_event_callback( evt_loop_t * const el, evt_t * const evt,$/;"	f	file:
test_events_private_functions	src/events.c	/^void test_events_private_functions( void )$/;"	f
test_evt_callback	src/events.c	/^evt_ret_t test_evt_callback( evt_loop_t * const el, evt_t * const evt, evt_params_t * const params, void * user_data )$/;"	f
test_evt_child_callback	src/events.c	/^void test_evt_child_callback( void )$/;"	f
test_evt_delete_null	tests/test_events.c	/^static void test_evt_delete_null( void )$/;"	f	file:
test_evt_io_callback	src/events.c	/^void test_evt_io_callback( void )$/;"	f
test_evt_log_backend	src/events.c	/^void test_evt_log_backend( void )$/;"	f
test_evt_new_failure	tests/test_events.c	/^static void test_evt_new_failure( void )$/;"	f	file:
test_evt_run_null	tests/test_events.c	/^static void test_evt_run_null( void )$/;"	f	file:
test_evt_signal_callback	src/events.c	/^void test_evt_signal_callback( void )$/;"	f
test_evt_stop_null	tests/test_events.c	/^static void test_evt_stop_null( void )$/;"	f	file:
test_exit_evt_fn	src/child.c	/^static int_t test_exit_evt_fn( child_process_t * const cp, int rpid, int rstatus, void * user_data )$/;"	f	file:
test_flag	src/child.c	/^static int_t test_flag = FALSE;$/;"	v	file:
test_flag	src/events.c	/^static int_t test_flag = FALSE;$/;"	v	file:
test_flag	tests/test_events.c	/^static int_t test_flag = FALSE;$/;"	v	file:
test_hashtable_clear	tests/test_hashtable.c	/^static void test_hashtable_clear( void )$/;"	f	file:
test_hashtable_count	tests/test_hashtable.c	/^static void test_hashtable_count( void )$/;"	f	file:
test_hashtable_deinit_prereqs	tests/test_hashtable.c	/^static void test_hashtable_deinit_prereqs( void )$/;"	f	file:
test_hashtable_delete_null	tests/test_hashtable.c	/^static void test_hashtable_delete_null( void )$/;"	f	file:
test_hashtable_empty_iterator	tests/test_hashtable.c	/^static void test_hashtable_empty_iterator( void )$/;"	f	file:
test_hashtable_fail_alloc	tests/test_hashtable.c	/^static void test_hashtable_fail_alloc( void )$/;"	f	file:
test_hashtable_fail_init	tests/test_hashtable.c	/^static void test_hashtable_fail_init( void )$/;"	f	file:
test_hashtable_find	tests/test_hashtable.c	/^static void test_hashtable_find( void )$/;"	f	file:
test_hashtable_get	tests/test_hashtable.c	/^static void test_hashtable_get( void )$/;"	f	file:
test_hashtable_init_prereqs	tests/test_hashtable.c	/^static void test_hashtable_init_prereqs( void )$/;"	f	file:
test_hashtable_initdeinit	tests/test_hashtable.c	/^static void test_hashtable_initdeinit( void )$/;"	f	file:
test_hashtable_insert	tests/test_hashtable.c	/^static void test_hashtable_insert( void )$/;"	f	file:
test_hashtable_newdel	tests/test_hashtable.c	/^static void test_hashtable_newdel( void )$/;"	f	file:
test_hashtable_private_functions	src/hashtable.c	/^void test_hashtable_private_functions( void )$/;"	f
test_hashtable_remove	tests/test_hashtable.c	/^static void test_hashtable_remove( void )$/;"	f	file:
test_initialize_event_handler	tests/test_events.c	/^static void test_initialize_event_handler( void )$/;"	f	file:
test_list_begin_null	tests/test_list.c	/^static void test_list_begin_null( void )$/;"	f	file:
test_list_clear	tests/test_list.c	/^static void test_list_clear( void )$/;"	f	file:
test_list_clear_dep_fails	tests/test_list.c	/^static void test_list_clear_dep_fails( void )$/;"	f	file:
test_list_clear_empty	tests/test_list.c	/^static void test_list_clear_empty( void )$/;"	f	file:
test_list_clear_null	tests/test_list.c	/^static void test_list_clear_null( void )$/;"	f	file:
test_list_deinit_null	tests/test_list.c	/^static void test_list_deinit_null( void )$/;"	f	file:
test_list_delete_null	tests/test_list.c	/^static void test_list_delete_null( void )$/;"	f	file:
test_list_dynamic_grow	tests/test_list.c	/^static void test_list_dynamic_grow( void )$/;"	f	file:
test_list_empty_iterator	tests/test_list.c	/^static void test_list_empty_iterator( void )$/;"	f	file:
test_list_end_null	tests/test_list.c	/^static void test_list_end_null( void )$/;"	f	file:
test_list_get_middle	tests/test_list.c	/^static void test_list_get_middle( void )$/;"	f	file:
test_list_get_prereqs	tests/test_list.c	/^static void test_list_get_prereqs( void )$/;"	f	file:
test_list_init_alloc_fail	tests/test_list.c	/^static void test_list_init_alloc_fail( void )$/;"	f	file:
test_list_init_grow_fail	tests/test_list.c	/^static void test_list_init_grow_fail( void )$/;"	f	file:
test_list_init_null	tests/test_list.c	/^static void test_list_init_null( void )$/;"	f	file:
test_list_initdeinit	tests/test_list.c	/^static void test_list_initdeinit( void )$/;"	f	file:
test_list_new_alloc_fail	tests/test_list.c	/^static void test_list_new_alloc_fail( void )$/;"	f	file:
test_list_new_grow_fail	tests/test_list.c	/^static void test_list_new_grow_fail( void )$/;"	f	file:
test_list_newdel	tests/test_list.c	/^static void test_list_newdel( void )$/;"	f	file:
test_list_next_null	tests/test_list.c	/^static void test_list_next_null( void )$/;"	f	file:
test_list_pop_head_static	tests/test_list.c	/^static void test_list_pop_head_static( void )$/;"	f	file:
test_list_pop_middle	tests/test_list.c	/^static void test_list_pop_middle( void )$/;"	f	file:
test_list_pop_prereqs	tests/test_list.c	/^static void test_list_pop_prereqs( void )$/;"	f	file:
test_list_pop_tail_static	tests/test_list.c	/^static void test_list_pop_tail_static( void )$/;"	f	file:
test_list_private_functions	src/list.c	/^void test_list_private_functions( void )$/;"	f
test_list_push_dynamic	tests/test_list.c	/^static void test_list_push_dynamic( void )$/;"	f	file:
test_list_push_fail	tests/test_list.c	/^static void test_list_push_fail( void )$/;"	f	file:
test_list_push_head	tests/test_list.c	/^static void test_list_push_head( void )$/;"	f	file:
test_list_push_head_1	tests/test_list.c	/^static void test_list_push_head_1( void )$/;"	f	file:
test_list_push_middle	tests/test_list.c	/^static void test_list_push_middle( void )$/;"	f	file:
test_list_push_middle_1	tests/test_list.c	/^static void test_list_push_middle_1( void )$/;"	f	file:
test_list_push_null	tests/test_list.c	/^static void test_list_push_null( void )$/;"	f	file:
test_list_push_tail	tests/test_list.c	/^static void test_list_push_tail( void )$/;"	f	file:
test_list_push_tail_1	tests/test_list.c	/^static void test_list_push_tail_1( void )$/;"	f	file:
test_list_push_tail_small	tests/test_list.c	/^static void test_list_push_tail_small( void )$/;"	f	file:
test_list_push_zero_initial_size	tests/test_list.c	/^static void test_list_push_zero_initial_size( void )$/;"	f	file:
test_list_reserve_null	tests/test_list.c	/^static void test_list_reserve_null( void )$/;"	f	file:
test_list_rnext_null	tests/test_list.c	/^static void test_list_rnext_null( void )$/;"	f	file:
test_list_static_grow	tests/test_list.c	/^static void test_list_static_grow( void )$/;"	f	file:
test_list_tail_null	tests/test_list.c	/^static void test_list_tail_null( void )$/;"	f	file:
test_new_event_handler	tests/test_events.c	/^static void test_new_event_handler( void )$/;"	f	file:
test_pair_accessor_prereqs	tests/test_pair.c	/^void test_pair_accessor_prereqs( void )$/;"	f
test_pair_delete_null	tests/test_pair.c	/^void test_pair_delete_null( void )$/;"	f
test_pair_fail_alloc	tests/test_pair.c	/^void test_pair_fail_alloc( void )$/;"	f
test_pair_newdel	tests/test_pair.c	/^void test_pair_newdel( void )$/;"	f
test_pair_nulls	tests/test_pair.c	/^void test_pair_nulls( void )$/;"	f
test_pair_private_functions	src/pair.c	/^void test_pair_private_functions( void )$/;"	f
test_privileges_drop_failures	tests/test_privileges.c	/^static void test_privileges_drop_failures( void )$/;"	f	file:
test_privileges_drop_root	tests/test_privileges.c	/^static void test_privileges_drop_root( void )$/;"	f	file:
test_privileges_permanent_drop	tests/test_privileges.c	/^static void test_privileges_permanent_drop( void )$/;"	f	file:
test_privileges_private_functions	src/privileges.c	/^void test_privileges_private_functions( void )$/;"	f
test_privileges_restore_failures	tests/test_privileges.c	/^static void test_privileges_restore_failures( void )$/;"	f	file:
test_privileges_restore_root	tests/test_privileges.c	/^static void test_privileges_restore_root( void )$/;"	f	file:
test_privileges_temp_drop	tests/test_privileges.c	/^static void test_privileges_temp_drop( void )$/;"	f	file:
test_read_evt_fn	src/child.c	/^static ssize_t test_read_evt_fn( child_process_t * const cp, size_t nread, void * user_data )$/;"	f	file:
test_sanitize_closed_std_descriptors	tests/test_sanitize.c	/^static void test_sanitize_closed_std_descriptors( void )$/;"	f	file:
test_sanitize_environment	tests/test_sanitize.c	/^static void test_sanitize_environment( void )$/;"	f	file:
test_sanitize_environment_add	tests/test_sanitize.c	/^static void test_sanitize_environment_add( void )$/;"	f	file:
test_sanitize_environment_preserve	tests/test_sanitize.c	/^static void test_sanitize_environment_preserve( void )$/;"	f	file:
test_sanitize_files	src/sanitize.c	/^void test_sanitize_files( void )$/;"	f
test_sanitize_open_files	tests/test_sanitize.c	/^static void test_sanitize_open_files( void )$/;"	f	file:
test_sanitize_private_functions	src/sanitize.c	/^void test_sanitize_private_functions( void )$/;"	f
test_sigchld_cb	src/child.c	/^static void test_sigchld_cb( void )$/;"	f	file:
test_socket_bad_hostname	tests/test_socket.c	/^static void test_socket_bad_hostname( void )$/;"	f	file:
test_socket_delete_null	tests/test_socket.c	/^static void test_socket_delete_null( void )$/;"	f	file:
test_socket_disconnect	tests/test_socket.c	/^static void test_socket_disconnect( void )$/;"	f	file:
test_socket_flush	tests/test_socket.c	/^static void test_socket_flush( void )$/;"	f	file:
test_socket_get_type	tests/test_socket.c	/^static void test_socket_get_type( void )$/;"	f	file:
test_socket_new_fail_alloc	tests/test_socket.c	/^static void test_socket_new_fail_alloc( void )$/;"	f	file:
test_socket_new_fail_init	tests/test_socket.c	/^static void test_socket_new_fail_init( void )$/;"	f	file:
test_socket_newdel	tests/test_socket.c	/^static void test_socket_newdel( void )$/;"	f	file:
test_socket_private_functions	src/socket.c	/^void test_socket_private_functions( void )$/;"	f
test_socket_write	tests/test_socket.c	/^static void test_socket_write( void )$/;"	f	file:
test_socket_writev	tests/test_socket.c	/^static void test_socket_writev( void )$/;"	f	file:
test_start_event_handler	tests/test_events.c	/^static void test_start_event_handler( void )$/;"	f	file:
test_stop_event_handler	tests/test_events.c	/^static void test_stop_event_handler( void )$/;"	f	file:
test_tcp_socket	tests/test_socket.c	/^static void test_tcp_socket( void )$/;"	f	file:
test_tcp_socket_failed_connection	tests/test_socket.c	/^static void test_tcp_socket_failed_connection( void )$/;"	f	file:
test_udp_socket	tests/test_socket.c	/^static void test_udp_socket( void )$/;"	f	file:
test_unix_socket	tests/test_socket.c	/^static void test_unix_socket( void )$/;"	f	file:
test_write_evt_fn	src/child.c	/^static ssize_t test_write_evt_fn( child_process_t * const cp, uint8_t const * const buffer, void * user_data )$/;"	f	file:
trace	src/events.h	/^        int trace;  \/* 0 == only signal upon term, 1 == also signal when stopped\/continued *\/$/;"	m	struct:evt_params_u::__anon2
tree	src/btree.c	/^    node_t*             tree;       \/* pointer to btree root *\/$/;"	m	struct:bt_s	file:
type	src/log.h	/^    log_type_t type;$/;"	m	struct:log_s
type	src/socket.c	/^    socket_type_t   type;           \/* type of socket *\/$/;"	m	struct:socket_s	file:
types	src/events.h	/^        evt_io_type_t types;$/;"	m	struct:evt_params_u::__anon3
u_cconnected	tests/test_socket.c	/^static int_t u_cconnected = FALSE;$/;"	v	file:
u_cdone	tests/test_socket.c	/^static int_t u_cdone = FALSE;$/;"	v	file:
u_cexit	tests/test_socket.c	/^static int_t u_cexit = FALSE;$/;"	v	file:
u_client_error_fn	tests/test_socket.c	/^static socket_ret_t u_client_error_fn( socket_t * const s, int err, void * user_data )$/;"	f	file:
u_client_read_fn	tests/test_socket.c	/^static ssize_t u_client_read_fn( socket_t * const s, size_t const nread, void * user_data )$/;"	f	file:
u_client_write_fn	tests/test_socket.c	/^static ssize_t u_client_write_fn( socket_t * const s, uint8_t const * const buffer, void * user_data )$/;"	f	file:
u_sconnected	tests/test_socket.c	/^static int_t u_sconnected = FALSE;$/;"	v	file:
u_sdone	tests/test_socket.c	/^static int_t u_sdone = FALSE;$/;"	v	file:
u_server_error_fn	tests/test_socket.c	/^static socket_ret_t u_server_error_fn( socket_t * const s, int err, void * user_data )$/;"	f	file:
u_server_read_fn	tests/test_socket.c	/^static ssize_t u_server_read_fn( socket_t * const s, size_t const nread, void * user_data )$/;"	f	file:
u_server_write_fn	tests/test_socket.c	/^static ssize_t u_server_write_fn( socket_t * const s, uint8_t const * const buffer, void * user_data )$/;"	f	file:
u_sexit	tests/test_socket.c	/^static int_t u_sexit = FALSE;$/;"	v	file:
uid	src/privileges.h	/^    uid_t   uid;$/;"	m	struct:priv_state_s
uint_t	src/macros.h	/^typedef uint32_t uint_t;$/;"	t
uint_t	src/macros.h	/^typedef uint64_t uint_t;$/;"	t
used	src/list.c	/^    int_t   used;   \/* bool to mark used nodes *\/$/;"	m	struct:list_item_s	file:
used_head	src/list.h	/^    list_itr_t      used_head;              \/* head node of the used circular list *\/$/;"	m	struct:list_s
user_data	src/aiofd.h	/^    void *      user_data;      \/* context to pass to callbacks *\/$/;"	m	struct:aiofd_s
user_data	src/child.c	/^    void *          user_data;      \/* passed to ops callbacks *\/$/;"	m	struct:child_process_s	file:
user_data	src/events.h	/^    void *          user_data;$/;"	m	struct:evt_s
user_data	src/socket.c	/^    void *          user_data;      \/* passed to ops callbacks *\/$/;"	m	struct:socket_s	file:
val	src/btree.c	/^    void * val;                 \/* value *\/$/;"	m	struct:node_s	file:
vdfn	src/btree.c	/^    bt_delete_fn        vdfn;       \/* value delete function *\/$/;"	m	struct:bt_s	file:
w	src/aiofd.c	/^    int r, w, e;$/;"	m	struct:cb_count_s	file:
wbuf	src/aiofd.h	/^    list_t      wbuf;           \/* array of buffers waiting to be written *\/$/;"	m	struct:aiofd_s
wevt	src/aiofd.h	/^    evt_t       wevt;           \/* write event *\/$/;"	m	struct:aiofd_s
wfd	src/aiofd.h	/^    int         wfd;            \/* read\/write fd, if only one given, write-only otherwise *\/$/;"	m	struct:aiofd_s
write_callback_fn	src/aiofd.c	/^static int_t write_callback_fn( aiofd_t * const aiofd, uint8_t const * const buffer, void * user_data, void * per_write_data )$/;"	f	file:
write_callback_ret	src/aiofd.c	/^static int_t write_callback_ret = TRUE;$/;"	v	file:
write_dst_s	src/socket.c	/^typedef struct write_dst_s$/;"	s	file:
write_dst_t	src/socket.c	/^} write_dst_t;$/;"	t	typeref:struct:write_dst_s	file:
write_evt_fn	src/aiofd.h	/^        int_t (*write_evt_fn)( aiofd_t * const aiofd, uint8_t const * const buffer, void * user_data, void * per_write_data );$/;"	m	struct:aiofd_s::aiofd_ops_s
write_evt_fn	src/child.h	/^    int_t (*write_evt_fn)( child_process_t * const cp, uint8_t const * const buffer, void * user_data );$/;"	m	struct:child_ops_s
write_evt_fn	tests/test_aiofd.c	/^static int_t write_evt_fn( aiofd_t * const aiofd, uint8_t const * const buffer, void * user_data, void * per_write_data )$/;"	f	file:
write_evt_fn	tests/test_child.c	/^static int_t write_evt_fn( child_process_t * const cp, uint8_t const * const buffer, void * user_data )$/;"	f	file:
write_fn	src/aiofd.h	/^        ssize_t (*write_fn)(int fd, void const * const buf, size_t const count, void * user_data, void * per_write_data );$/;"	m	struct:aiofd_s::aiofd_ops_s
write_fn	src/socket.h	/^    ssize_t (*write_fn)( socket_t * const s, uint8_t const * const buffer, void * user_data );$/;"	m	struct:socket_ops_s
write_fn	tests/test_aiofd.c	/^static ssize_t write_fn(int fd, const void *buf, size_t count, void * user_data, void * per_write_data )$/;"	f	file:
write_fn	tests/test_socket.c	/^static ssize_t write_fn( socket_t * const s, uint8_t const * const buffer, void * user_data )$/;"	f	file:
write_pid_evt_fn	tests/test_child.c	/^static int_t write_pid_evt_fn( child_process_t * const cp, uint8_t const * const buffer, void * user_data )$/;"	f	file:
writefn	src/log.c	/^typedef int (*writefn)(void *, const char *, int);$/;"	t	file:
writev_fn	src/aiofd.h	/^        ssize_t (*writev_fn)(int fd, struct iovec const * const iov, size_t const iovcnt, void * user_data, void * per_write_data );$/;"	m	struct:aiofd_s::aiofd_ops_s
writev_fn	tests/test_aiofd.c	/^static ssize_t writev_fn(int fd, const struct iovec *iov, int iovcnt, void * user_data)$/;"	f	file:
x_cdone	tests/test_socket.c	/^static int x_cdone = FALSE;$/;"	v	file:
x_client_connect_fn	tests/test_socket.c	/^static socket_ret_t x_client_connect_fn( socket_t * const s, void * user_data )$/;"	f	file:
x_client_disconnect_fn	tests/test_socket.c	/^static socket_ret_t x_client_disconnect_fn( socket_t * const s, void * user_data )$/;"	f	file:
x_client_error_fn	tests/test_socket.c	/^static socket_ret_t x_client_error_fn( socket_t * const s, int err, void * user_data )$/;"	f	file:
x_client_read_fn	tests/test_socket.c	/^static ssize_t x_client_read_fn( socket_t * const s, size_t const nread, void * user_data )$/;"	f	file:
x_client_write_fn	tests/test_socket.c	/^static ssize_t x_client_write_fn( socket_t * const s, uint8_t const * const buffer, void * user_data )$/;"	f	file:
x_incoming_fn	tests/test_socket.c	/^static socket_ret_t x_incoming_fn( socket_t * const s, void * user_data )$/;"	f	file:
x_sclose	tests/test_socket.c	/^static int x_sclose = FALSE;$/;"	v	file:
x_sdone	tests/test_socket.c	/^static int x_sdone = FALSE;$/;"	v	file:
x_server_connect_fn	tests/test_socket.c	/^static socket_ret_t x_server_connect_fn( socket_t * const s, void * user_data )$/;"	f	file:
x_server_disconnect_fn	tests/test_socket.c	/^static socket_ret_t x_server_disconnect_fn( socket_t * const s, void * user_data )$/;"	f	file:
x_server_error_fn	tests/test_socket.c	/^static socket_ret_t x_server_error_fn( socket_t * const s, int err, void * user_data )$/;"	f	file:
x_server_read_fn	tests/test_socket.c	/^static ssize_t x_server_read_fn( socket_t * const s, size_t const nread, void * user_data )$/;"	f	file:
x_server_write_fn	tests/test_socket.c	/^static ssize_t x_server_write_fn( socket_t * const s, uint8_t const * const buffer, void * user_data )$/;"	f	file:
